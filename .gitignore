/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import api from "@/app/api";
import { useQuery } from "@tanstack/react-query";
import { UploadedDocument } from "@/app/store/types";

// ---- TIPOS MÍNIMOS PARA O QUE USAMOS ----
type RawDocuments = { content?: string[]; required?: boolean } | undefined;

type RawResponse = {
  documents?: RawDocuments;
  createdBy: string;
  createdAt: string;
  requestId?: string;
  // ...resto que o backend manda (mantemos, não tipamos tudo)
  [key: string]: any;
};

// Se você quiser pegar URL assinada agora, use essa função.
// Se preferir fazer no Documents.tsx, só retorne sem ela.
async function getSignedLink(path: string) {
  const res = await api.get("/v1/file/link", {
    params: {
      application: "conductor-client",
      path,
    },
  });
  return res.data.data as { url: string; urlPreview: string };
}

async function normalizeDocs(raw: RawResponse): Promise<UploadedDocument[]> {
  const paths = raw.documents?.content ?? [];
  return Promise.all(
    paths.map(async (p) => {
      const [uuid, ...rest] = p.split("/");
      const name = rest.join("/");

      let url: string | undefined;
      let urlPreview: string | undefined;

      try {
        const signed = await getSignedLink(p);
        url = signed.url;
        urlPreview = signed.urlPreview;
      } catch {
        // se der erro na assinatura, seguimos sem as URLs
      }

      return {
        serverPath: p,
        documentUUID: uuid,
        documentName: name,
        serverUrlSigned: url,
        documentURLPreview: urlPreview,
        uploadedBy: { fullName: raw.createdBy, userId: raw.createdBy },
        createdAt: raw.createdAt ?? new Date().toISOString(),
        documentStatus: "uploaded",
      };
    })
  );
}

// --------- CHAMADAS ---------
const fetchRequestConfig = async (): Promise<RawResponse & { documents: UploadedDocument[] }> => {
  const { data } = await api.get("/v1/wire-client-aggregator/pages/wire");
  const raw: RawResponse = data.data;
  const docs = await normalizeDocs(raw);
  return { ...raw, documents: docs };
};

const fetchRequestConfigById = async (
  id: string
): Promise<RawResponse & { documents: UploadedDocument[] }> => {
  const { data } = await api.get(`/v1/wire-client-aggregator/pages/wire-client/${id}`);
  const raw: RawResponse = data.data;
  const docs = await normalizeDocs(raw);
  return { ...raw, documents: docs };
};

export default function RequestConfigProvider(requestId?: string) {
  const getRequestConfig = useQuery({
    queryKey: ["requestConfig", requestId],
    queryFn: () => (requestId ? fetchRequestConfigById(requestId) : fetchRequestConfig()),
    refetchOnMount: true,
    refetchOnWindowFocus: false,
    refetchOnReconnect: true,
    retry: false,
  });

  return { getRequestConfig };
}




/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";

import React, { useEffect, useRef, useState } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/Tabs";
import CreationContent from "./content/CreationContent";
import ValidationContent from "./content/ValidationsContent";
import { Documents } from "@/components/Documents";
import { useAuthStore } from "@/app/store/auth/authStore";
import { useDocumentStore } from "@/app/store/documentsStore/documentStore";
import { UploadedDocument } from "@/app/store/types";
import RequestConfigProvider from "@/app/providers/getRequestProvider";
import { TabsNavigation } from "@/components/TabsNavigation";
import Requests from "@/components/Requests";
import History from "@/components/history/History";
import { toHistoryData } from "@/app/utils/toHistoryData";
import { parseHistoryToData } from "@/app/utils/parseHistoryToData";
import InstructionEmail from "@/components/InstructionEmail";
import { Comments } from "@/components/Comments";
import { uuidv7 } from "uuidv7";
import { Button } from "@/components/Button";
import CancelRequestModal from "@/components/CancelRequestModal";
import RequestClarificationModal from "@/components/RequestClarificationModal";
import Image from "next/image";
import PrintIcon from "@/app/assets/svg/print-color.svg";
import { Dialog, DialogContent, DialogFooter, DialogTitle } from "@/components/Modal";
import { Approvals } from "@/components/Approvals";
import AlertColorIcon from "@/app/assets/svg/alert-color.svg";
import CancelRequestIcon from "@/app/assets/svg/close.svg";
import { useCancelRequestProvider } from "@/app/providers/cancelRequestProvider";
import api from "@/app/api";

type IPageTabsParams = {
  params: {
    requestName: string;
    requestId?: string;
  };
  tabTriggerType: string;
};

type CancelRequestWarningProps = {
  userThatCanceled: string;
  date: string;
  reason: string;
};

export default function PageTabs({ params, tabTriggerType }: IPageTabsParams) {
  const { getRequestConfig } = RequestConfigProvider(params.requestId);
  const { userData } = useAuthStore();
  const { documentList, setDocumentList } = useDocumentStore();

  const { data } = getRequestConfig;

  const [pendingComments, setPendingComments] = useState<string[]>([]);
  const requestId = data?.requestId ?? uuidv7();
  const [requestQualificationIsOpen, setRequestQualificationIsOpen] = useState(false);
  const [cancelRequestIsOpen, setCancelRequestIsOpen] = useState(false);
  const [openErrorModal, setOpenErrorModal] = useState(false);
  const { mutation } = useCancelRequestProvider();
  const [dataCancelRequest, setDataCancelRequest] = useState<CancelRequestWarningProps>();

  // --------- HIDRATA DOCS UMA VEZ -----------
  const hydratedRef = useRef(false);
  useEffect(() => {
    if (!data || hydratedRef.current) return;

    // provider já retorna UploadedDocument[]
    if (Array.isArray(data.documents) && data.documents.length) {
      setDocumentList(data.documents);
    }
    hydratedRef.current = true;
  }, [data, setDocumentList]);

  if (!data) return null;

  const validationStatus = data?.timeline
    ?.flat()
    ?.find((item: any) => item?.name?.includes("Validation"));

  const workflowData = toHistoryData(data);
  const historyData = parseHistoryToData(workflowData);

  const mockedApprovals = [
    { title: "Acceptance", userName: "GinaS", date: "2/12/2023", hour: "10:22 AM" },
    { title: "Compliance", userName: "MarceloH", date: "2/12/2023", hour: "11:47 AM" },
  ];

  const handleCancelRequest = (reqId: string, reason: string) => {
    mutation.mutate(
      { requestId: reqId },
      {
        onSuccess: (response) => {
          const r = response?.data;
          const formatted = {
            userThatCanceled: r.userName,
            date: r.date,
            reason: r.note || reason,
          };
          setDataCancelRequest(formatted);
          return formatted;
        },
      }
    );
  };

  async function onSubmit() {
    try {
      if (!documentList?.length) {
        if (data.clientEmail?.content === "temporaryEmail" && !data.temporaryClientEmail?.content) {
          setOpenErrorModal(true);
        }
        return;
      }

      const docsForSubmit = documentList.map(
        (d) => d.serverPath ?? `${d.documentUUID}/${d.documentName}`
      );

      const payload = {
        // aqui você junta os demais campos do form se necessário
        documents: {
          content: docsForSubmit,
          required: false,
        },
        requestId,
        comments: pendingComments,
      };

      await api.post("/v1/requests", payload);
      // feedback de sucesso...
    } catch (err) {
      console.error(err);
      setOpenErrorModal(true);
    }
  }

  return (
    <Tabs defaultValue={tabTriggerType} className="min-h-screen w-full py-7 px-6">
      <TabsList>
        <TabsTrigger
          value="request"
          className="-mb-1 rounded-t-lg font-figtree flex h-[45px] cursor-pointer flex-row items-center justify-center bg-background-primary text-sm font-normal text-[#636574] aria-selected:!bg-white aria-selected:text-[#1e2347]"
        >
          {data.caseNumber ? `Request: ${data.caseNumber}` : "New Request"}
        </TabsTrigger>

        <TabsTrigger
          value="documents"
          className="-mb-1 rounded-t-lg font-figtree flex h-[45px] cursor-pointer flex-row items-center justify-center bg-background-primary text-sm font-normal text-[#636574] aria-selected:!bg-white aria-selected:text-[#1e2347]"
        >
          Documents
        </TabsTrigger>

        <TabsTrigger
          value="history"
          className="-mb-1 rounded-t-lg font-figtree flex h-[45px] cursor-pointer flex-row items-center justify-center bg-background-primary text-sm font-normal text-[#636574] aria-selected:!bg-white aria-selected:text-[#1e2347]"
        >
          History
        </TabsTrigger>
      </TabsList>

      {/* REQUEST TAB */}
      <TabsContent
        value="request"
        forceMount
        className="aria-selected:block data-[state=inactive]:hidden"
      >
        {validationStatus?.status === "waiting" ? (
          <Requests data={data} />
        ) : (
          <div className="w-full flex">
            <div className="bg-white rounded-lg p-8">
              <div className="w-full flex">
                <div className="w-1/2 pr-4">
                  <TabsNavigation
                    tabs={[
                      { label: "Creation", content: <CreationContent data={data} /> },
                      {
                        label: "Validations",
                        content: (
                          <ValidationContent
                            data={data}
                            cancelRequestWarning={dataCancelRequest}
                          />
                        ),
                      },
                    ]}
                    initialTab={0}
                  />
                </div>

                <div className="w-[6px] bg-[#F7F7F8] rounded-[15px] h-min-[605px] h-max-full"></div>

                <div className="w-1/2 pl-4">
                  <InstructionEmail />
                </div>
              </div>

              <div className="my-8">
                <Comments
                  userName={userData.userName || ""}
                  disabled={!!data}
                  onOutput={(comments: string[]) => setPendingComments(comments)}
                  requestId={requestId}
                />
              </div>

              {data && <Approvals approvalsList={mockedApprovals} />}

              <Dialog open={openErrorModal} onOpenChange={setOpenErrorModal}>
                <DialogContent className="w-[400px] h-[286px] pb-0">
                  {/* Acessibilidade */}
                  <DialogTitle className="sr-only">Error</DialogTitle>
                  <div className="flex flex-col justify-center items-center w-full">
                    <div className="flex justify-center">
                      <Image src={AlertColorIcon} alt="Alert Icon" width={56} height={56} />
                    </div>
                    <p className="text-[#1E2347] my-6 font-semibold text-lg text-center">
                      Please fix the highlighted errors before submitting.
                    </p>
                    <DialogFooter className="w-full">
                      <Button
                        variant="modalError"
                        size="modalError"
                        onClick={() => setOpenErrorModal(false)}
                      >
                        Close
                      </Button>
                    </DialogFooter>
                  </div>
                </DialogContent>
              </Dialog>

              {!data ? (
                <div className="flex justify-between gap-4 mt-6">
                  <div className="flex gap-4">
                    <Button variant="print" size="print" onClick={() => window.print()}>
                      <Image
                        src={PrintIcon}
                        alt="print-icon"
                        width={24}
                        height={24}
                        className="mr-2"
                      />
                      Print
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="flex justify-between">
                  <div className="flex justify-end mt-14">
                    <Button
                      variant="cancelRequest"
                      size="cancelRequest"
                      className="mr-2"
                      onClick={() => setCancelRequestIsOpen(true)}
                    >
                      <Image src={CancelRequestIcon} alt="CancelRequest" />
                      Cancel request
                    </Button>
                  </div>
                  <div className="flex justify-end mt-14">
                    <Button variant="submit" size="submit" onClick={onSubmit}>
                      Submit
                    </Button>
                  </div>
                </div>
              )}
            </div>

            {requestQualificationIsOpen && (
              <RequestClarificationModal
                open={requestQualificationIsOpen}
                onOpenChange={setRequestQualificationIsOpen}
              />
            )}

            {cancelRequestIsOpen && (
              <CancelRequestModal
                open={cancelRequestIsOpen}
                onClose={() => setCancelRequestIsOpen(false)}
                onSubmit={(reason) => {
                  handleCancelRequest(data?.requestId, reason);
                  // setRequestCanceled(true); // se quiser usar
                }}
                requestId={data?.requestId}
              />
            )}
          </div>
        )}
      </TabsContent>

      {/* DOCUMENTS TAB */}
      <TabsContent
        value="documents"
        className="mt-0 rounded-b-lg rounded-r-lg bg-white aria-selected:block data-[state=inactive]:hidden rounded-lg p-6"
      >
        <Documents
          baseUrl={process.env.NEXT_PUBLIC_BASE_URL ?? ""}
          bucketName="conductor-client"
          pathUrl="/v1/file"
          getListDocument={documentList}
          showUploader={true}
          userData={userData}
          onUploadDocuments={(docs: UploadedDocument[]) => setDocumentList(docs)}
        />
      </TabsContent>

      {/* HISTORY TAB */}
      <TabsContent value="history" className="mt-0 rounded-b-lg rounded-r-lg bg-white p-6">
        <History
          status={historyData.status}
          data={historyData.data}
          cardRowData={historyData.cardRowData}
          dataDisplayData={historyData.dataDisplayData}
          selectedBank={historyData.selectedBank}
          approvalsSteps={historyData.approvalsSteps}
        />
      </TabsContent>
    </Tabs>
  );
}

