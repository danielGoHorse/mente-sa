import React, { useState, useRef, useEffect } from "react";

interface SearchProps extends React.InputHTMLAttributes<HTMLInputElement> {
  placeholder?: string;
  error?: boolean;
  errorMsg?: string;
  width?: string | number;
  suggestions?: string[];
}

const Search: React.FC<SearchProps> = ({
  placeholder,
  error,
  errorMsg,
  width = "100%",
  suggestions = [],
  ...rest
}) => {
  const [value, setValue] = useState("");
  const [filteredSuggestions, setFilteredSuggestions] = useState<string[]>([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const userInput = e.target.value;
    setValue(userInput);

    const filtered = suggestions.filter((suggestion) =>
      suggestion.toLowerCase().includes(userInput.toLowerCase())
    );

    setFilteredSuggestions(filtered);
    setShowSuggestions(true);
  };

  const handleClickOutside = (event: MouseEvent) => {
    if (containerRef.current && !containerRef.current.contains(event.target as Node)) {
      setShowSuggestions(false);
    }
  };

  useEffect(() => {
    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const clearInput = () => {
    setValue("");
    setFilteredSuggestions([]);
    setShowSuggestions(false);
  };

  return (
    <div className="relative" style={{ width }} ref={containerRef}>
      <input
        type="text"
        className={`w-full border rounded-md px-3 py-2 focus:outline-none focus:ring-2 ${
          error ? "border-red-500 focus:ring-red-300" : "border-gray-300 focus:ring-blue-300"
        }`}
        placeholder={placeholder}
        value={value}
        onChange={handleChange}
        {...rest}
      />

      {value && (
        <button
          type="button"
          onClick={clearInput}
          className="absolute right-2 top-1/2 -translate-y-1/2 text-gray-500 hover:text-gray-700"
        >
          ✕
        </button>
      )}

      {error && <p className="text-sm text-red-500 mt-1">{errorMsg}</p>}

      {showSuggestions && filteredSuggestions.length > 0 && (
        <ul className="absolute z-10 w-full bg-white border border-gray-200 mt-1 rounded shadow-lg">
          {filteredSuggestions.map((suggestion, index) => (
            <li
              key={index}
              className="px-4 py-2 cursor-pointer hover:bg-blue-500 hover:text-white"
              onClick={() => {
                setValue(suggestion);
                setShowSuggestions(false);
              }}
            >
              {suggestion}
            </li>
          ))}
        </ul>
      )}

      {showSuggestions && filteredSuggestions.length === 0 && (
        <div className="absolute z-10 w-full bg-white border border-gray-200 mt-1 rounded shadow-lg px-4 py-2 text-gray-500">
          Nenhuma sugestão encontrada.
        </div>
      )}
    </div>
  );
};

export default Search;
