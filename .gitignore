import Result from '#features/shared/result.js'

export default class FeeCaseGetByCifUseCase {
  async execute({ cif }, feeManagementModel, customerModel) {
    global.logger.info(`customerModel.getCustomerDetailsByCif(${cif})`)

    // ðŸ”¹ Buscar os detalhes do cliente pelo CIF
    const [errCustomer, responseCustomer] = await customerModel.getCustomerDetailsByCif(cif)

    if (errCustomer) {
      return Result.fail({ message: "It's not possible to get address cif" })
    }

    const customerData = responseCustomer?.data?.customer || {}

    // ðŸ”¹ Buscar as informaÃ§Ãµes de Fee do cliente
    global.logger.info('feeManagementModel.getFeeByAccount')
    const [errFee, responseFee] = await feeManagementModel.getFeeByAccount(customerData)

    if (errFee) {
      return Result.fail({ message: "It's not possible to get fee values" })
    }

    const feesData = responseFee?.data || {}

    // ðŸ”¹ Mapear os "currentFees"
    const currentFees = customerData?.customerCurrentFees?.map((x) => ({
      feeDescription: x.feeDescription,
      feeCode: x.feeCode
    })) || []

    // ðŸ”¹ Construindo o resultado final com **TODOS OS DADOS**
    const result = {
      customerName: customerData?.customerAddress?.name || '',
      customerAddress: customerData?.customerAddress?.address || '',
      customerAccountOfficer: customerData?.customerAddress?.officer || '',
      cif: customerData?.customerAddress?.cif || cif, 
      officerId: customerData?.customerAddress?.officerId || '',
      branchCity: customerData?.customerAddress?.branchCity || '',
      branchState: customerData?.customerAddress?.branchState || '',
      feePackage: customerData?.customerAddress?.feePackage || '',
      defaultFeePackageId: customerData?.customerAddress?.defaultFeePackageId || '',

      // ðŸ”¹ **Certifique-se de que fees e feesActives vÃªm corretamente**
      fees: feesData.fees || [],
      feesActives: feesData.feesActives || [],

      // ðŸ”¹ **URL do Documento**
      documentUrl: feesData.documentUrl || '',

      // ðŸ”¹ **Current Fees**
      currentFees
    }

    global.logger.info('End process')

    return Result.ok(result)
  }
}
