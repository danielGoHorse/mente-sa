
import { FeeGroup } from './entities/FeeGroups.js';
import numberToCurrency from '../core/helpers/currency.js';

export default class InvestimentAccountFee {
  #feeName = 'Investment Account Fees';
  #investiment = {};
  #accounts = [];
  #accountsDDA = [];
  #allExceptions = new Set();

  constructor(fees, accounts, equityField) {
    this.#investiment = fees.find((x) => x.feeType === this.#feeName);
    if (!this.#investiment) return;

    const feeGroupCode = this.#investiment.feeGroups[0].code;
    this.#accounts = accounts.filter((x) => x.feeGroup === feeGroupCode);

    if (!this.#accounts.length) {
      this.#investiment = {};
      return;
    }

    this.#accountsDDA = new Set(
      this.#accounts
        .filter((x) => x.bpsFeeTypeCode !== 'O')
        .map((x) => ({
          number: x.bpsAcctNumber,
          code: x.feeType,
          entity: x.entity
        }))
    );

    this.#addMultiplesAccount(this.#accounts[0].cifno);
    this.#addCurrentClientValue(equityField);
  }

  get fee() {
    return this.#investiment;
  }

  #addMultiplesAccount(cif) {
    const result = {};

    for (const feeGroup of this.#investiment.feeGroups) {
      for (const account of this.#accountsDDA) {
        if (!result[account.number]) result[account.number] = {};

        const fields = feeGroup.fields.filter((x) => x.code === account.code);

        if (!fields.length) continue;

        if (!result[account.number][feeGroup.name]) {
          result[account.number][feeGroup.name] = [];

          feeGroup.fields.forEach((item) => {
            item.exceptionOptions = item.exceptionOptions
              .filter((x) => !x.retired)
              .map((x) => ({
                ...x,
                text: x.text?.trim(),
                value: x.value?.trim()
              }));
            item.exceptionOptions.forEach(this.#allExceptions.add, this.#allExceptions);
          });

          const newFeeGroup = new FeeGroup({
            name: feeGroup.name,
            fields,
            cif,
            accountNumber: account.number,
            visible: feeGroup.visible,
            code: feeGroup.code,
            entityCode: account.entity
          });

          result[account.number][feeGroup.name].push(newFeeGroup);
          continue;
        }

        const feeGroupToAddFields = result[account.number][feeGroup.name][0];
        feeGroupToAddFields.fields = [...feeGroupToAddFields.fields, ...fields];
      }
    }

    const feeGroupsByAccount = Object.keys(result).reduce((acc, item) => {
      Object.keys(result[item]).forEach((element) => {
        acc.push(result[item][element]);
      });
      return acc;
    }, []);

    this.#investiment.feeGroups = feeGroupsByAccount.flat();
  }

  #addCurrentClientValue(equityField) {
    const exceptionsOptions = Array.from(this.#allExceptions);
    for (const [feeGroupIndex, feeGroup] of this.#investiment.feeGroups.entries()) {
      feeGroup.cif = this.#accounts[0].cifno;
  
      for (const [fieldIndex, field] of feeGroup.fields.entries()) {
        if (field.isException) {
          field.labelValue =
            this.#investiment.feeGroups[feeGroupIndex - 1].fields[fieldIndex].labelValue;
        } else {
          for (const account of this.#accounts) {
            if (field.code === account.feeType && feeGroup.accountNumber === account.bpsAcctNumber) {
              if (field.code === 5) {
                field.defaultValue = field.isStandard
                  ? field.defaultValue
                  : account.feeAmount.toString();
                field.labelValue = numberToCurrency(field.defaultValue);
              } else if (field.code === 7) {
                const equityRow = exceptionsOptions.find(x => x.value === account.feeCode && x.text.includes('Equity'));
                if (equityRow) {
                  field.defaultValue = equityRow.value;
                  field.labelValue = equityRow.text;
                }
              } else {
                if (field.labelValue !== 'Other') {
                  if (field.isCurrentClient) {
                    field.defaultValue = account.feeCode.toString();
                  }
                  let exception = exceptionsOptions.find(x => x.value === field.defaultValue);
                  if (!exception) {
                    exception = equityField.exceptionOptions.find(e => e.value === field.defaultValue) || { text: '' };
                  }
                  field.labelValue = exception.text;
                }
              }
            }
          }
        }
      }
    }
    this.#clearMemory();
  }

  #clearMemory() {
    this.#accounts = [];
    this.#accountsDDA = [];
    this.#allExceptions = new Set();
  }
}
