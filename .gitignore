import { FeeCase } from '#src/models/entities/FeeCase.js'
import { Field } from '#src/models/entities/Fields.js'
import Result from '#features/shared/result.js'
import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js'
export default class FeeGetByCifUseCase {
  async execute({ customerAccount }) {
    global.logger.info('FeeGetByCifUseCase()')

    const cifno = customerAccount[0].cifno;

    const result = {
      customerName: '',
      customerAddress: '',
      customerAccountOfficer: '',
      cif: cifno,
      fees: [],
      feesActives: [],
      documentUrl: '',
      currentFees: []
    };

    // 📌 1️⃣ - Buscar os dados da Procedure de Fees (Standard e Current)
    const feesData = await this.#getFeesFromSQL(cifno);

    // 📌 2️⃣ - Buscar as Exception Fees baseadas no Fee Package
    const exceptionData = await this.#getExceptionFeesFromSQL(feesData);

    // 📌 3️⃣ - Organizar os dados no JSON esperado pelo front-end
    result.fees = this.#mapFeesByCategory(feesData, exceptionData);

    // 📌 4️⃣ - Buscar Fees Ativos (Casos Pendentes)
    const feesActives = await FeeCase.find({
      cif: cifno,
      status: { $nin: ['DONE', 'REJECTED'] },
      caseNumber: { $exists: true }
    });

    result.feesActives = feesActives.map((x) => ({
      caseNumber: x.caseNumber,
      id: x.id
    }));

    // 📌 5️⃣ - URL do Documento
    result.documentUrl = `https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=U2NoZWR1bGVPZkZlZXMucGRm`;

    // 📌 6️⃣ - Mapear o "currentFees"
    result.currentFees = this.#mapCurrentFees(feesData);

    return Result.ok(result);
  }

  /**
   * 📌 1️⃣ Buscar Standard e Current Fees do SQL
   */
  async #getFeesFromSQL(cifno) {
    global.logger.info('getFeesFromSQL()');
    const connection = await connectToFeeMgmtDb();
    return await executeStoreProcedure(connection, 'sp_get_fees_byCIF', { cifno });
  }

  /**
   * 📌 2️⃣ Buscar Exception Fees por Fee Package
   */
  async #getExceptionFeesFromSQL(feesData) {
    global.logger.info('getExceptionFeesFromSQL()');

    const feePackageId = feesData[0]?.DefaultFeePackageId;  // Pega o Fee Package Id do primeiro item
    if (!feePackageId) return [];

    const connection = await connectToFeeMgmtDb();
    return await executeStoreProcedure(connection, 'sp_get_exception_fees_bypackage', { feePackageId });
  }

  /**
   * 📌 3️⃣ Organiza os Fees (Standard, Current, Exception)
   */
  #mapFeesByCategory(feesData, exceptionData) {
    const mappedFees = [];

    feesData.forEach(record => {
      const isException = record.StandardException === 'Exception';
      const isCurrentClient = record.FeeAmount > 0;

      const field = {
        code: record.FeeCode,
        name: record.FeeDescription,
        defaultValue: record.DefaultFeeAmount || '',
        isStandard: !isException,
        isException: isException,
        isCurrentClient: isCurrentClient,
        labelValue: record.FeeAmount ? `$${record.FeeAmount}.00` : '',
        exceptionOptions: isException ? this.#parseExceptionOptions(exceptionData, record) : [],
      };

      let feeGroup = mappedFees.find(f => f.feeType === record.FeeType);
      if (!feeGroup) {
        feeGroup = { feeType: record.FeeType, feeGroups: [] };
        mappedFees.push(feeGroup);
      }

      let targetGroup;
      if (isException) {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Exception Request');
        if (!targetGroup) {
          targetGroup = { name: 'Exception Request', fields: [] };
          feeGroup.feeGroups.push(targetGroup);
        }
      } else if (isCurrentClient) {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Client Current Fees');
        if (!targetGroup) {
          targetGroup = { name: 'Client Current Fees', fields: [] };
          feeGroup.feeGroups.push(targetGroup);
        }
      } else {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Standard Fees');
        if (!targetGroup) {
          targetGroup = { name: 'Standard Fees', fields: [] };
          feeGroup.feeGroups.push(targetGroup);
        }
      }

      targetGroup.fields.push(field);
    });

    return mappedFees;
  }

  /**
   * 📌 4️⃣ Converte ExceptionOptions para o formato correto
   */
  #parseExceptionOptions(exceptionData, record) {
    return exceptionData
      .filter(exc => exc.FeeCode === record.FeeCode)
      .map(exc => ({
        value: exc.Amount,
        text: `$${exc.Amount}.00`,
        visible: true,
        retired: false
      }));
  }

  /**
   * 📌 5️⃣ Mapear os valores de "currentFees"
   */
  #mapCurrentFees(feesData) {
    return feesData
      .filter(record => record.FeeAmount > 0)
      .map(record => ({
        feeDescription: `${record.FeeDescription} - $${record.FeeAmount}.00`,
        feeCode: `${record.FeeType} ${record.ACCTNO}`
      }));
  }
}





Chat, me entregue o USeCase completo....

Aqui esta a versão antes das mudanças pra vc ver, quando os dadosvinham do mongo....

ai mudamdo tudo para a nova procedure:
import { Fee } from '#src/models/entities/Fees.js'
import Result from '#features/shared/result.js'
import CustomerFees from '#src/models/CustomerFees.js'
import BankAccountFee from '#src/models/BankAccountFee.js'
import InvestimentAccountFee from '#src/models/InvestimentAccountFee.js'
import { FeeCase } from '#src/models/entities/FeeCase.js'
import { Field } from '#src/models/entities/Fields.js'

export default class FeeGetByCifUseCase {
  async execute({ customerAccount }) {
    global.logger.info('FeeGetByCifUseCase()')

    const result = { fees: [] }
    const fees = await this.#getFeeStandard([
      {
        feeType: 'Customer Fees'
      },
      {
        feeType: 'Bank Account Fees'
      },
      {
        feeType: 'Investment Account Fees'
      }
    ])

    const customer = new CustomerFees(fees, customerAccount)
    if (customer.fee) result.fees.push(customer.fee)
    global.logger.info('After Customer Fees')
    const bank = new BankAccountFee(fees, customerAccount)
    if (bank.fee) result.fees.push(bank.fee)
    global.logger.info('After Bank Account Fees')
    const equityField = await Field.find({ code: 7 })
    const investiment = new InvestimentAccountFee(
      fees,
      customerAccount,
      equityField[0]
    )
    if (investiment.fee?.feeGroups) result.fees.push(investiment.fee)
    global.logger.info('After Investment Account Fees')
    const feesActives = await FeeCase.find({
      cif: customerAccount[0].cifno,
      status: {
        $nin: ['DONE', 'REJECTED']
      },
      caseNumber: {
        $exists: true
      }
    })
    global.logger.info('After Fees Actives')
    result.feesActives = feesActives?.map((x) => ({
      caseNumber: x.caseNumber,
      id: x.id
    }))

    result.documentUrl =
      'https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=U2NoZWR1bGVPZkZlZXMucGRm'

    global.logger.info(`documentUrl= ${result.document}`)

    return Result.ok(result)
  }

  async #getFeeStandard(filter) {
    global.logger.info('getFeeStandard()')

    const feeResult = []

    for await (const fee of Fee.find({
      $or: filter
    }).select({
      feeType: 1,
      feeGroups: {
        name: 1,
        fields: 1,
        code: 1
      }
    })) {
      feeResult.push(fee.toObject())
    }

    return feeResult
  }
}
