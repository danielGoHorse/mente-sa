/* === dentro do uniqueApprovals.map( … ) ======================= */

const required = Number(approvalStep.requiredApprovals) ||               // se vier como número
                 approvalStep.permissions?.people?.length || 0;          // fallback

const completed = approvalStep.permissions?.people?.filter(
  (p: any) => p.action && p.action[0]?.type === 'success'                // quem já assinou
).length || 0;

// usamos só uma vez, não precisa guardar no state:
const suffix = `(${completed}/${required})`;

return (
  <Fragment key={approvalStep.id || displayIndex}>
    <TableStep.Title status={approvalStep.status as workflowStatus}>
      <span className="font-normal">{displayIndex}</span>{" "}
      <span className="font-semibold ml-2">
        {/* remove o prefixo longo, mantém o resto + sufixo */}
        {approvalStep.name.replace(/^Approvals and Restrictions:\s?/, "").trim()}{" "}
        {suffix}
      </span>
    </TableStep.Title>

    {/* Columns e Body continuam exatamente como já estavam */}
