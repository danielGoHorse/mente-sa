export type ButtonProps = {
  type: string;
  label: string;
  name: string;
  icon?: string;
  iconSize?: number;
  theme: "primary" | "outline" | "text" | undefined;
  method: string;
  openModal?: boolean;
  requestBody: string;
  requestName?: boolean;
  actionAfterSubmit?: any;
  action: string;
  size: "lg" | "sm" | undefined;
  width: string | number | undefined;
  disabled: boolean | undefined;
  bringFields?: string[];
  styles: any;
};

export type QuestionBehavior = {
  renderByFieldConditions?: {
    fieldName: string;
    fieldValues: string;
  }[];
};

export type Question = {
  title: string;
  attributes: {
    behavior: QuestionBehavior;
    styles: Record<string, string>;
  };
};

export type Section = {
  questions: Question[];
  attributes: {
    behavior: Record<string, string>;
    styles: Record<string, string>;
  };
};

export type Container = {
  sections: Section[];
  attributes: {
    behavior: Record<string, string>;
    styles: Record<string, string>;
  };
};

export type TCard = {
  title: string;
  border: boolean;
  img: string;
  size: string;
  subTitle: string;
  cardWidth: string;
  cardHeight: string;
};

export type frontEntries = {
  card: TCard[];
  containers: Container[];
  attributes: {
    behavior: Record<string, string>;
    styles: Record<string, string>;
  };
};

export type Document = {
  itemRef?: string;
  createdAt?: string | number | Date;
  documentName: string;
  documentSize?: string;
  documentUUID?: string;
  documentStatus?: string;
  documentURL?: string;
  documentURLPreview?: string;
  uploadedBy: { fullName?: string; userId?: string };
};

export type ActiveRequests = {
  requestId: string;
  caseNumber: number;
  caseId?: string;
};

export type IData = {
  id?: string;
  requestId?: string;
  responseId?: string;
  page?: string;
  caseNumber?: string;
  caseStatus?: string;
  createdBy?: string;
  requestConfigId?: string;
  workflowConfigId?: string;
  workflow?: any[];
  documents?: Document[];
  frontEntries: frontEntries;
  backEntries: Record<string, Record<string, any>>;
  options: {
    validationRequired: false;
  };
  approvals: any[];
  buttons: ButtonProps[];
  version: string;
  activeRequests: ActiveRequests[];
  messageResult?: Record<string, any>;
  data?: IData;
  timeline?: TimeLineItems[];
  actions?: ActionsItems[];
  result?: string;
};

export type TimeLineItems = {
  name: string;
  status: string;
};

export type ActionsItems = {
  firstName: string;
  lastName: string;
  comment: string;
  stepName: string;
  type: string;
  subtype: string;
  userID: string;
  date: string;
};

export type CaseAttribute = {
  name: string;
  value: string;
};

export type CardDashboardData = {
  application: number;
  applicationName: string;
  caseAttribute: CaseAttribute[];
  createdBy: string;
  createdOn: string;
  currentActivity: string;
  editedAt: string;
  editedBy: string;
  locked: boolean;
  lockedBy: string;
  status: number;
};

export type DashboardTableProps = {
  field?: any;
  reference: string;
  initiator: string;
  currentActivity: string;
  status: number;
  result: number;
  department: string;
  createdOn: string;
  url: string;
};

export type DashboardFilterProps = {
  reference: string;
  initiator: string;
  currentActivity: string;
  task: string;
  status: string;
  result: string;
  department: string;
  createdOn: string;
  accountOfficer: string;
  clientName: string;
  cif: string;
  referenceNumber: string;
  createdBy: string;
};

export type DashboardOptionProps = {
  value: string;
  label: string;
};

export interface BeneficiaryData {
  beneficiaryEnabled: boolean;
  usBankEnabled: boolean;
  intermediaryBankEnabled: boolean;
  selectedBeneficiary: string;
  templateName: string;
  bankCountry: string;
  bankIdType: string;
  intermediaryBankCountry: string;
  beneficiaryBankIdType: string;
  beneficiaryBankCountry: string;
  beneficiaryCountry: string;
  bankAba: string;
  bankName: string;
  bankCity: string;
  swiftBicBeneficiary: string;
  intermediaryBankName: string;
  intermediaryBankCity: string;
  beneficiaryBankName: string;
  beneficiaryBankCity: string;
  beneficiaryName: string;
  addressLine1: string;
  addressLine2: string;
  beneficiaryCity: string;
  beneficiaryState: string;
  beneficiaryZipCode: string;
  accountNumber: string;
  obiEnabled: boolean;
  obiReferences: string[];
  isDomestic: boolean;
}

export interface HistoryData {
  status: string;
  data: Array<
    Array<{
      id: number;
      name: string;
      status: "completed" | "pending" | "waiting" | "canceled" | "skipped";
      successLabel?: string;
      permissions: {
        people: Array<{
          userId: string;
          firstName: string;
          lastName: string;
          action?: Array<{
            type: string;
            subtype: string;
            date: string;
            comment: string;
          }>;
        }>;
      };
    }>
  >;
  cardRowData: Array<{
    title: string;
    value: string;
    level: string;
    date?: string;
  }>;
  dataDisplayData: Array<{
    Id: string;
    Status: string;
    Date: string;
  }>;
  selectedBank: string;
}


export interface BankAccount {
  id: string;
  accountNumber: string;
  name: string;
  availableBalance: number;
  origin: string;
  cif?: string;
  emailVerified?: boolean;
  status?: string
}
