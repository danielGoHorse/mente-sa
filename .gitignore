import { FeeGroup } from './entities/FeeGroups.js';
import numberToCurrency from '../core/helpers/currency.js';

export default class InvestimentAccountFee {
  #feeName = 'Investment Account Fees';
  #investiment = {};
  #accounts = [];
  #accountsDDA = [];
  #allExceptions = new Set();

  constructor(fees, accounts, equityField) {
    this.#investiment = fees.find((x) => x.feeType === this.#feeName);
    if (!this.#investiment) return;

    const feeGroupCode = this.#investiment.feeGroups[0].code;
    this.#accounts = accounts.filter((x) => x.feeGroup === feeGroupCode);

    if (!this.#accounts.length) {
      this.#investiment = {};
      return;
    }

    this.#accountsDDA = new Set(
      this.#accounts
        .filter((x) => x.bpsFeeTypeCode !== 'O')
        .map((x) => ({
          number: x.bpsAcctNumber,
          code: x.feeType,
          entity: x.entity
        }))
    );

    this.#addMultiplesAccount(this.#accounts[0].cifno);
    this.#addCurrentClientValue(equityField);
  }

  get fee() {
    return this.#investiment;
  }

  #addMultiplesAccount(cif) {
    const result = {};

    for (const feeGroup of this.#investiment.feeGroups) {
      for (const account of this.#accountsDDA) {
        if (!result[account.number]) result[account.number] = {};

        const fields = feeGroup.fields.filter((x) => x.code === account.code);

        if (!fields.length) continue;

        if (!result[account.number][feeGroup.name]) {
          result[account.number][feeGroup.name] = [];

          feeGroup.fields.forEach((item) => {
            item.exceptionOptions = item.exceptionOptions
              .filter((x) => !x.retired)
              .map((x) => ({
                ...x,
                text: x.text?.trim(),
                value: x.value?.trim()
              }));
            item.exceptionOptions.forEach(this.#allExceptions.add, this.#allExceptions);
          });

          const newFeeGroup = new FeeGroup({
            name: feeGroup.name,
            fields,
            cif,
            accountNumber: account.number,
            visible: feeGroup.visible,
            code: feeGroup.code,
            entityCode: account.entity
          });

          result[account.number][feeGroup.name].push(newFeeGroup);
          continue;
        }

        const feeGroupToAddFields = result[account.number][feeGroup.name][0];
        feeGroupToAddFields.fields = [...feeGroupToAddFields.fields, ...fields];
      }
    }

    const feeGroupsByAccount = Object.keys(result).reduce((acc, item) => {
      Object.keys(result[item]).forEach((element) => {
        acc.push(result[item][element]);
      });
      return acc;
    }, []);

    this.#investiment.feeGroups = feeGroupsByAccount.flat();
  }

  #addCurrentClientValue(equityField) {
    const exceptionsOptions = Array.from(this.#allExceptions);

    for (const feeGroup of this.#investiment.feeGroups) {
      feeGroup.cif = this.#accounts[0].cifno;

      const equityOptionFields = feeGroup.fields.filter((f) => f.code === 7); // Equity e Option (code 7)

      if (equityOptionFields.length > 1) {
        // Concatena Equity e Option
        const labelParts = equityOptionFields.map((field) => {
          return `${field.name}:${
            field.labelValue || field.defaultValue
          }`;
        });

        const codeValue = equityOptionFields[0].defaultValue; // Tipo E3, I3, etc.
        const labelValue = `${codeValue} - ${labelParts.join('; ')}`;

        equityOptionFields.forEach((field) => {
          field.labelValue = labelValue;
        });
      }

      for (const field of feeGroup.fields) {
        if (!field.isException) {
          const account = this.#accounts.find(
            (a) => a.feeType === field.code && a.bpsAcctNumber === feeGroup.accountNumber
          );

          if (account) {
            if (field.code === 5) {
              field.defaultValue = field.isStandard
                ? field.defaultValue
                : account.feeAmount?.toString();
              field.labelValue = numberToCurrency(field.defaultValue);
            } else {
              if (field.isCurrentClient) {
                field.defaultValue = account.feeCode?.toString();
              }

              let exception = exceptionsOptions.find(
                (x) => x.value === field.defaultValue
              ) || equityField.exceptionOptions.find(
                (x) => x.value === field.defaultValue
              ) || { text: '' };

              field.labelValue = exception.text;
            }
          }
        }
      }
    }

    this.#clearMemory();
  }

  #clearMemory() {
    this.#accounts = [];
    this.#accountsDDA = [];
    this.#allExceptions = new Set();
  }
}
