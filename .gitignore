import React, { ReactNode, useRef } from "react";
import FlagIcon from "@/app/assets/svg/flag.svg";
import CheckIcon from "@/app/assets/svg/check.svg";
import FlagGreenIcon from "@/app/assets/svg/flag-green.svg";
import CloseGrayIcon from "@/app/assets/svg/close-gray.svg";
import CloseWhiteIcon from "@/app/assets/svg/close-white.svg";
import ChevronLeftLargeIcon from "@/app/assets/svg/chevron-left-large.svg";
import ChevronRightLargeIcon from "@/app/assets/svg/chevron-right-large.svg";
import WrapperIcon from "@/app/assets/svg/Wrapper.svg"; // novo Ã­cone quadrado
import { StaticImageData } from "next/image";
import Image from "next/image";

type StatusType = "waiting" | "pending" | "completed" | "canceled" | "skipped";

interface TimelineProps {
  children?: ReactNode;
}

interface StepProps {
  status?: StatusType;
  progress?: boolean;
  children?: ReactNode;
}

//
// Root & Scroll
//
export const TimelineRoot: React.FC<TimelineProps> = ({ children }) => (
  <div className="flex">{children}</div>
);

export const TimelineScroll: React.FC<TimelineProps> = ({ children }) => {
  const scrollRef = useRef<HTMLDivElement>(null);
  const scroll = (delta: number) => {
    if (scrollRef.current) scrollRef.current.scrollLeft += delta;
  };
  return (
    <div className="flex items-center">
      <button
        onClick={() => scroll(-100)}
        className="w-[37px] h-[56px] flex items-center justify-center rounded border border-[#DBDBDB] bg-white"
      >
        <ChevronLeftLargeIcon />
      </button>
      <div
        ref={scrollRef}
        className="flex gap-[10px] w-full overflow-x-auto whitespace-nowrap transition-all duration-300 scrollbar-none"
      >
        {children}
      </div>
      <button
        onClick={() => scroll(100)}
        className="w-[37px] h-[56px] flex items-center justify-center rounded border border-[#DBDBDB] bg-white"
      >
        <ChevronRightLargeIcon />
      </button>
    </div>
  );
};

//
// Circle
//
export const TimelineCircle: React.FC<Pick<StepProps, "status">> = ({
  status = "waiting",
}) => {
  const IconMap: Record<StatusType, StaticImageData> = {
    waiting: FlagIcon,
    pending: FlagGreenIcon,
    completed: CheckIcon,
    canceled: CloseWhiteIcon,
    skipped: CloseGrayIcon,
  };
  const BorderColorMap: Record<StatusType, string> = {
    waiting: "#DBDBDB",
    pending: "#008056",
    completed: "#008056",
    canceled: "#CA303D",
    skipped: "#DBDBDB",
  };
  const BgColorMap: Record<StatusType, string> = {
    waiting: "#FFFFFF",
    pending: "#FFFFFF",
    completed: "#008056",
    canceled: "#CA303D",
    skipped: "#F7F7F8",
  };
  const Icon = IconMap[status];
  return (
    <div
      className="w-[56px] h-[56px] flex items-center justify-center rounded-full"
      style={{
        border: `1px solid ${BorderColorMap[status]}`,
        backgroundColor: BgColorMap[status],
      }}
    >
      <Image src={Icon} alt="icon" />
    </div>
  );
};

//
// Link (quadrado com hoverContent)
//
export interface TimelineLinkProps {
  status?: StatusType;
  hoverContent?: ReactNode;
}

export const TimelineLink: React.FC<TimelineLinkProps> = ({
  status = "waiting",
  hoverContent,
}) => {
  const BorderColorMap: Record<StatusType, string> = {
    waiting: "#DBDBDB",
    pending: "#008056",
    completed: "#008056",
    canceled: "#CA303D",
    skipped: "#DBDBDB",
  };

  return (
    <div className="relative inline-block group mt-[7px]">
      <div className="w-[28px] h-[28px] flex items-center rounded-[5px] justify-center bg-white">
        <Image src={WrapperIcon} alt="IconWrapper" />
      </div>
      {hoverContent && (
        <div
          className="
            absolute top-full left-1/2 -translate-x-1/2
            mt-2 w-48 p-2 bg-white rounded shadow-lg
            opacity-0 group-hover:opacity-100 transition-opacity
          "
        >
          {hoverContent}
        </div>
      )}
    </div>
  );
};

//
// Step & Text
//
export const TimelineStep: React.FC<StepProps> = ({
  status = "waiting",
  progress = false,
  children,
}) => {
  const BorderColorMap: Record<StatusType, string> = {
    waiting: "#DBDBDB",
    pending: "#008056",
    completed: "#008056",
    canceled: "#CA303D",
    skipped: "#DBDBDB",
  };
  const borderColor = BorderColorMap[status];

  return (
    <div
      className="relative flex-1 flex flex-col items-center"
      style={{ width: 150 }}
    >
      {progress && (
        <div
          className="absolute  border-b left-[calc(55%+25px)] top-[43%] -translate-y-1/2 w-[calc(100%+10px-56px)]"
          style={{ borderColor }}
        />
      )}
      <div className="relative flex flex-col items-center gap-2">
        {children}
      </div>
    </div>
  );
};

export const TimelineText: React.FC<TimelineProps> = ({ children }) => (
  <span className="text-[12px] font-normal leading-[18px] text-[#484A55] text-center font-figtree tracking-[0.12px]">
    {children}
  </span>
);

const Timeline = {
  Scroll: TimelineScroll,
  Root: TimelineRoot,
  Step: TimelineStep,
  Circle: TimelineCircle,
  Link: TimelineLink,
  Text: TimelineText,
};
export default Timeline;
