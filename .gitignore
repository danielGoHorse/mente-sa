function applyStandardAmounts(mongoFees, stdRows) {
  mongoFees.forEach(fee => {
    const stdGrp = findGroup(fee, 'Standard Fees');
    if (!stdGrp) return;

    stdGrp.fields.forEach(field => {
      const row = stdRows.find(r => Number(r.FeeType) === field.code);
      if (!row) return;

      // --- NOVO: caso Custody/Safekeeping (code 6) ---
      if (field.code === 6 && row.Amount && row.FrequencyDescription) {
        field.defaultValue = row.Amount;
        field.labelValue = `${row.Amount} - ${row.FrequencyDescription?.trim() || ''}`;
        field.tooltip = row.FrequencyDescription?.trim() || '';
        return;
      }

      const num = Number(row.FeeAmount);

      if (!Number.isNaN(num)) {
        field.defaultValue = num.toString();
        field.labelValue = numberToCurrency(num);
      } else {
        field.defaultValue = row.FeeAmount;
        field.labelValue = row.FrequencyDescription?.trim() || row.FeeAmount;
      }

      field.tooltip = row.FrequencyDescription?.trim() || '';
    });
  });
}




function applyExceptionAmounts(mongoFees, excRows) {
  const byCode = excRows.reduce((acc, r) => {
    (acc[r.FeeCode] ??= []).push(r);
    return acc;
  }, {});

  mongoFees.forEach(fee => {
    const excGrp = fee.feeGroups?.find(g => g.name === 'Exception Request');
    if (excGrp) {
      excGrp.fields.forEach(field => applyEquityOptionException(field, excRows));
    }
    if (!excGrp) return;
    excGrp.fields.forEach(field => {
      if (field.code === 7) {
        field.exceptionOptions = mergeEquityOptionAll(excRows);
        field.defaultValue = '';
        field.labelValue = '';
        return;
      }
      const codes = Object.entries(feeCodeMap)
        .filter(([, c]) => c === field.code)
        .map(([k]) => k);
      const rows = codes.flatMap(c => byCode[c] || []);
      if (!rows.length) return;

      // --- NOVO: Custody/Safekeeping code 6 ---
      if (field.code === 6) {
        field.exceptionOptions = rows.map(r => ({
          value: r.Amount,
          text: r.FreqDescription
            ? `${r.Amount} - ${r.FreqDescription?.trim()}`
            : `${r.Amount}`,
          visible: true,
          retired: false,
        }));
        field.defaultValue = '';
        field.labelValue = '';
        return;
      }

      const nums = rows.filter(r => !Number.isNaN(Number(r.Amount)))
        .sort((a, b) => Number(a.Amount) - Number(b.Amount));
      const alpha = rows.filter(r => Number.isNaN(Number(r.Amount)))
        .sort((a, b) => a.Amount.localeCompare(b.Amount));
      field.exceptionOptions = [...nums, ...alpha].map(r => ({
        value: r.Amount,
        text: Number.isNaN(Number(r.Amount))
          ? (r.FreqDescription?.trim() || r.Amount)
          : numberToCurrency(Number(r.Amount)),
        visible: true,
        retired: false,
      }));
      field.defaultValue = '';
      field.labelValue = '';
    });
  });
}




function setEquityOptionLabelValue(field, excRows) {
  // --- NOVO: Para custody (code 6) ---
  if (field && field.code === 6 && field.defaultValue) {
    const code = field.defaultValue;
    const custody = excRows.filter(r => r.FeeCode === "BPS002");
    const item = custody.find(r => r.Amount === code);
    if (item) {
      field.labelValue =
        `${item.Amount} - ${item.FreqDescription?.trim() || ''}`;
      return;
    }
  }

  // Já existe para Equity/Options (code 7)
  if (field && field.code === 7 && field.defaultValue) {
    const code = field.defaultValue;
    const equities = excRows.filter(r => r.FeeCode === "BPS004");
    const options  = excRows.filter(r => r.FeeCode === "BPS005");
    const equity = equities.find(r => r.Amount === code);
    const option = options .find(r => r.Amount === code);
    field.labelValue =
      `${code} - ` +
      `Equity:${equity && equity.FreqDescription ? equity.FreqDescription.trim() : '-'}` +
      `; Option:${option && option.FreqDescription ? option.FreqDescription.trim() : '-'}`;
  }
}



function patchClientCurrent(customerAccount, feesArr) {
  const invFee = feesArr.find(f => f.feeType === 'Investment Account Fees');
  if (!invFee) return;

  const currGrp = invFee.feeGroups?.find(g => g.name === 'Client Current Fees');
  const stdGrp  = invFee.feeGroups?.find(g => g.name === 'Standard Fees');
  if (!currGrp || !stdGrp) return;

  // Custody/Safekeeping (code 6)
  const custodyAcc = customerAccount.find(a => a.feeType === 6);
  if (custodyAcc) {
    const fldCurr6 = currGrp.fields.find(f => f.code === 6);
    if (fldCurr6) {
      fldCurr6.defaultValue = custodyAcc.feeCode;
      // Novo: não use numberToCurrency, use o label customizado!
      // (vai ser ajustado depois no setEquityOptionLabelValue)
    }
  }

  // Equity / Option (code 7)
  const fldStd7  = stdGrp.fields .find(f => f.code === 7);
  const fldCurr7 = currGrp.fields.find(f => f.code === 7);
  if (fldStd7 && fldCurr7 && !fldCurr7.labelValue) {
    fldCurr7.defaultValue = fldStd7.defaultValue;
    fldCurr7.labelValue   = fldStd7.labelValue;
  }
}
