export default class FeeGetByCifUseCase {
  async execute({ customerAccount }) {
    const result = { fees: [] };

    // =====================
    // Buscar os Standard Fees do SQL
    const standardFees = await this.#getFeeStandardFromSQL(customerAccount[0].cifno);
    const fees = [...standardFees];
    // =====================

    const customer = new CustomerFees(fees, customerAccount);
    if (customer.fee) result.fees.push(customer.fee);

    const bank = new BankAccountFee(fees, customerAccount);
    if (bank.fee) result.fees.push(bank.fee);

    const equityField = await Field.find({ code: 7 });
    const investiment = new InvestimentAccountFee(
      fees,
      customerAccount,
      equityField[0]
    );
    if (investiment.fee?.feeGroups) result.fees.push(investiment.fee);

    const feesActives = await FeeCase.find({
      cif: customerAccount[0].cifno,
      status: {
        $nin: ['DONE', 'REJECTED'],
      },
      caseNumber: {
        $exists: true,
      },
    });

    result.feesActives = feesActives?.map((x) => ({
      caseNumber: x.caseNumber,
      id: x.id,
    }));

    // =====================
    // Obter o scheduleType baseado no fee carregado
    const scheduleType = this.#getScheduleType(fees);

    // Obter a URL correta baseada no scheduleType
    const scheduleUrls = global.environment.scheduleUrls;
    result.documentUrl = scheduleUrls[scheduleType] || null;
    // =====================

    return Result.ok(result);
  }

  async #getFeeStandardFromSQL(cifno) {
    const connection = await connectToFeeMgmtDb();
    const recordset = await executeStoreProcedure(connection, 'sp_get_standard_fees', { cifno });

    const feeResult = recordset.map((record) => ({
      feeType: record.feeType,
      feeGroups: [
        {
          name: record.feeGroup,
          code: record.groupCode,
          fields: [
            {
              code: record.fieldCode,
              name: record.fieldName,
              defaultValue: record.defaultValue,
              isStandard: record.isStandard === 1,
            },
          ],
        },
      ],
    }));

    return feeResult;
  }

  // =====================
  // MÃ©todo para determinar o ScheduleType
  #getScheduleType(fees) {
    if (!fees || fees.length === 0) return null;

    for (const fee of fees) {
      if (fee.feeType === 'Investment Account Fees') {
        return 'ScheduleofFeesIntlPB3';
      } else if (fee.feeType === 'Customer Fees') {
        return 'ScheduleofFeesUSPBIndividual3';
      } else if (fee.feeType === 'Bank Account Fees') {
        return 'ScheduleofFeesUSPBCorporation3';
      }
    }

    return null;
  }
  // =====================
}
