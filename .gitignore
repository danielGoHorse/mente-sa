import Result from '#features/shared/result.js'

export default class FeeGetByCifUseCase {
  async execute({ customerAccount }) {
    global.logger.info(`Fetching fees for CIF: ${customerAccount[0].cifno}`)

    // Buscar Fees pelo CIF no SQL
    const feesData = await this.#getFeesFromSQL(customerAccount[0].cifno)
    if (!feesData) {
      return Result.fail({ message: "It's not possible to get fee values" })
    }
    
    // Buscar Exceptions pelo FeePackageId
    global.logger.info(`Fetching exceptions for FeePackageId: ${customerAccount[0].feePackageId}`)
    const exceptionFees = await this.#getExceptionFeesFromSQL(customerAccount[0].feePackageId)
    if (!exceptionFees) {
      return Result.fail({ message: "It's not possible to get exception fee values" })
    }
    
    // Mock de dados que ainda nÃ£o existem na base SQL
    const feesActives = [
      { caseNumber: "12345", id: "mocked-active-fee-1" },
      { caseNumber: "67890", id: "mocked-active-fee-2" }
    ]
    
    const documentUrl = this.#getDocumentUrl(customerAccount[0].feePackageId)
    
    // Montando o payload final
    const result = {
      customerName: customerAccount[0].customerName || '',
      customerShortName: customerAccount[0].customerShortName || '',
      customerAddress: customerAccount[0].customerAddress || '',
      customerAccountOfficer: customerAccount[0].customerAccountOfficer || '',
      cif: customerAccount[0].cifno,
      officerId: customerAccount[0].officerId || '',
      branchCity: customerAccount[0].branchCity || '',
      branchState: customerAccount[0].branchState || '',
      feePackage: customerAccount[0].feePackage || '',
      defaultFeePackageId: customerAccount[0].feePackageId || '',
      
      fees: feesData,
      feesActives,
      
      documentUrl,

      currentFees: exceptionFees.map(fee => ({
        feeDescription: fee.FeeDescription,
        feeCode: fee.FeeCode,
        amount: fee.Amount,
        frequency: fee.FreqDescription || 'Mocked Frequency'
      }))
    }
    
    global.logger.info('End process')
    return Result.ok(result)
  }

  async #getFeesFromSQL(cifno) {
    global.logger.info('getFeesFromSQL()')
    const connection = await connectToFeeMgmtDb()
    const recordset = await executeStoreProcedure(connection, 'sp_get_fees_byCIF', { cifno })
    return recordset
  }

  async #getExceptionFeesFromSQL(feePackageId) {
    global.logger.info('getExceptionFeesFromSQL()')
    const connection = await connectToFeeMgmtDb()
    const recordset = await executeStoreProcedure(connection, 'sp_get_exception_fees_bypackage', { feePackageId })
    return recordset
  }

  #getDocumentUrl(feePackageId) {
    const scheduleUrls = global.environment.scheduleUrls
    const packageMap = {
      1: 'intlPB3',
      2: 'uSPBIndividual3',
      3: 'uSPBCorporation3',
      4: 'efraPB3',
      5: 'eraPB3'
    }
    
    const scheduleType = packageMap[feePackageId] || ''
    return scheduleUrls[scheduleType] || ''
  }
}
