function mergeEquityOption(rows) {
-  const byId = {};
-  rows.forEach(r=>{
-    const id = r.FeeParameterOptionId;
-    (byId[id] ??= {E:null,O:null});
-    if (r.BPSFeeTypeCode==='E') byId[id].E = r;
-    if (r.BPSFeeTypeCode==='O') byId[id].O = r;
-  });
-  return Object.values(byId)
-    .filter(({E,O}) => E && O)    // só quando há par E/O
-    .map(({E,O}) => ({
-      value : E.Amount.toString(),
-      text  : `${E.Amount} - Equity:${E.FreqDescription}; `
-            + `Option:${O.FreqDescription}`,
-      visible:true, retired:false
-    }));
+  const bucket = {};
+  for (const r of rows) {
+    const id = r.FeeParameterOptionId;
+    (bucket[id] ??= { E: null, O: null });
+    if (r.BPSFeeTypeCode === 'E') bucket[id].E = r;
+    if (r.BPSFeeTypeCode === 'O') bucket[id].O = r;
+  }
+
+  return Object.values(bucket)
+    .filter(x => x.E && x.O)                        // exige par completo
+    .map(({ E, O }) => ({
+      value  : E.Amount.toString(),                 // “E3”, “B6” …
+      text   : `${E.Amount} - Equity:${E.FreqDescription}; `
+             + `Option:${O.FreqDescription}`,
+      visible: true,
+      retired: false
+    }));
}
