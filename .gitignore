import Result from '#features/shared/result.js';

export default class FeeCaseGetByCifUseCase {
  async execute({ cif }, feeManagementModel, customerModel) {
    const [errCustomer, responseCustomer] = await customerModel.getCustomerDetailsByCif(cif);
    if (errCustomer) {
      return Result.fail({ message: "It's not possible to get address CIF" });
    }

    const customerData = responseCustomer?.data?.customer || {};
    const [errFee, responseFee] = await feeManagementModel.getFeeByAccount(customerData);
    if (errFee) {
      return Result.fail({ message: "It's not possible to get fee values" });
    }

    function formatCamelCaseToTitle(text) {
      return text.replace(/([a-z])([A-Z])/g, '$1 $2');
    }

    const feesData = responseFee?.data || {};
    const timestamp = new Date().toISOString();

    const formattedFees = customerData?.customerAccount
      ?.filter(fee => ["Customer Fees", "Bank Account Fees", "Investment Account Fees"].includes(fee.feeType))
      .map(fee => ({
        feeType: fee.feeType,
        feeGroups: [{
          name: fee.feeGroup === 1 ? "Client Current Fees" : "Standard Fees",
          visible: true,
          kycMailingStatus: fee.kycMailingStatus || null,
          code: fee.feeGroup,
          accountNumber: fee.ddaNumber || '',
          cif: fee.cifno,
          id: '',
          fields: [{
            hasChanged: false,
            code: fee.feeCode,
            name: formatCamelCaseToTitle(fee.feeDescription),
            defaultValue: fee.feeAmount?.toString() || '',
            isStandard: fee.isFeesStandard === "Yes",
            isException: fee.isFeesStandard === "No",
            isCurrentClient: false,
            labelValue: fee.feeAmount ? `$${fee.feeAmount.toFixed(2)}` : '',
            tooltip: fee.source ? `Source: ${fee.source}` : '',
            exceptionOptions: [],
            createdAt: timestamp,
            updatedAt: timestamp,
            id: fee.ddaNumber.toString()
          }]
        }]
      })) || [];

    const formattedFeeGroups = feesData?.fees
      ?.filter(feeGroup => ["Customer Fees", "Bank Account Fees", "Investment Account Fees"].includes(feeGroup.feeType))
      .map(feeGroup => ({
        ...feeGroup,
        id: '',
        feeGroups: feeGroup.feeGroups.map(group => ({
          ...group,
          id: group.id || '',
          cif: group.cif || '',
          accountNumber: group.accountNumber || '',
          fields: group.fields.map(field => ({
            ...field,
            hasChanged: field.hasChanged || false,
            createdAt: field.createdAt || timestamp,
            updatedAt: field.updatedAt || timestamp,
            id: field._id || '',
            exceptionOptions: field.exceptionOptions?.map(opt => ({
              ...opt,
              parameterOptionId: opt.parameterOptionId || '',
            })) || []
          }))
        }))
      })) || [];

    const currentFees = [
      ...(customerData?.customerCurrentFees?.filter(x => x.feeDescription === "FX Outgoing Wire Fee").map(x => ({
        feeDescription: x.feeDescription || '',
        feeCode: x.feeCode || ''
      })) || []),
      ...(feesData?.currentFees?.filter(x => x.feeDescription.includes("FX Outgoing Wire Fee")) || [])
    ];

    const result = {
      customerName: customerData?.customerAddress?.name || feesData?.customerName || '',
      customerShortName: feesData?.customerShortName || '',
      customerAddress: customerData?.customerAddress?.address || '',
      customerAccountOfficer: customerData?.customerAddress?.officer || '',
      cif: customerData?.customerAddress?.cif || cif,
      officerId: feesData?.officerId || '',
      branchCity: feesData?.branchCity || '',
      branchState: feesData?.branchState || '',
      branchType: feesData?.branchType || '',
      feePackage: feesData?.feePackage || '',
      defaultFeePackageType: feesData?.defaultFeePackageType || '',
      defaultFeePackageId: feesData?.defaultFeePackageId || '',
      fees: [...formattedFees, ...formattedFeeGroups],
      feesActives: feesData?.feesActives || [],
      documentUrl: feesData?.documentUrl || '',
      currentFees
    };

    return Result.ok(result);
  }
}
