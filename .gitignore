import React, { useState } from "react";
import Timeline from "./Timeline/timeline";
import TimelineApprovalsModal from "./TimelineApprovalsModal/timeLineApprovalsModal";

// ...outros imports...

export default function History({ data, cardRowData, approvalsSteps, ... }) {
  const [showApprovalsModal, setShowApprovalsModal] = useState(false);
  const [modalStepIndex, setModalStepIndex] = useState<number | null>(null);

  return (
    <div className="p-6">
      {/* Approvals Cards */}
      {cardRowData && (
        <div className="flex flex-col gap-4 mb-6">
          <CardsRow title="Approvals" data={cardRowData} />
        </div>
      )}

      {/* Timeline */}
      <div className="flex flex-col gap-4">
        <div className="text-[#484A55] font-figtree text-base font-semibold leading-[24px] tracking-[0.12px] text-left">
          Timeline
        </div>
        <div className=" max-full overflow-hidden">
          <Timeline.Scroll>
            {data
              .flatMap((subArray, subArrayIndex) =>
                subArray.map((item, itemIndex) => ({
                  ...item,
                  isFromMultiple: subArray.length > 1,
                  subArrayIndex,
                  key: `${subArrayIndex}-${itemIndex}`,
                }))
              )
              .map((item, idx, flat) => {
                const isApprovalsStep = item.name?.includes("Approvals and Restrictions");
                return (
                  <React.Fragment key={item.key}>
                    <Timeline.Step status={item.status} progress={idx < flat.length - 1}>
                      <div
                        className="relative flex flex-col items-center justify-center overflow-visible min-h-[180px]"
                        onMouseEnter={() => {
                          if (isApprovalsStep) {
                            setModalStepIndex(idx);
                            setShowApprovalsModal(true);
                          }
                        }}
                        onMouseLeave={() => setShowApprovalsModal(false)}
                      >
                        <Timeline.Circle status={item.status} />
                        <Timeline.Text>{item.name}</Timeline.Text>

                        {/* Só renderiza o modal quando mouse está no círculo e é approvals step */}
                        {showApprovalsModal && modalStepIndex === idx && approvalsSteps && (
                          <TimelineApprovalsModal
                            open={showApprovalsModal}
                            onClose={() => setShowApprovalsModal(false)}
                            data={approvalsSteps}
                          />
                        )}
                      </div>
                    </Timeline.Step>
                  </React.Fragment>
                );
              })}
          </Timeline.Scroll>
        </div>
      </div>
      {/* ...restante do componente... */}
    </div>
  );
}





