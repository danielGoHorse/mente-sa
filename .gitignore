/* eslint‑disable no‑console */
import { Fee }               from '#src/models/entities/Fees.js';
import Result                from '#features/shared/result.js';
import CustomerFees          from '#src/models/CustomerFees.js';
import BankAccountFee        from '#src/models/BankAccountFee.js';
import InvestimentAccountFee from '#src/models/InvestimentAccountFee.js';
import { FeeCase }           from '#src/models/entities/FeeCase.js';
import { Field }             from '#src/models/entities/Fields.js';
import numberToCurrency      from '#core/helpers/currency.js';
import {
  connectToFeeMgmtDb,
  executeStoreProcedure,
} from '#core/data/mssql/index.js';

/* ───────────── helpers SQL ───────────── */

async function getPackageData(cifno) {
  const conn = await connectToFeeMgmtDb();
  const [row] = await executeStoreProcedure(conn, 'sp_get_fees_byCIF', { cifno });
  if (!row) return {};

  return {
    defaultFeePackageId: row['Default Fee Package Id'] ?? null,
    branchCity:          row['Branch City']?.trim()          || '',
    branchState:         row['Branch State']?.trim()         || '',
    branchType:          row['Branch Type']?.trim()          || '',
    defaultPackageType:  row['Default Package Type']?.trim() || '',
    feePackage:          row['Default Fee Package']?.trim()  || '',
  };
}

async function getStandardFees(packageId) {
  const conn = await connectToFeeMgmtDb();
  return (
    await executeStoreProcedure(conn, 'sp_get_standard_fees_bypackage', {
      FeePackageId: packageId,
    })
  ) ?? [];
}

async function getExceptionFees(packageId) {
  const conn = await connectToFeeMgmtDb();
  return (
    await executeStoreProcedure(conn, 'sp_get_exception_fees_bypackage', {
      FeePackageId: packageId,
    })
  ) ?? [];
}

function getDocumentUrl(id) {
  const urls = global.environment.scheduleUrls || {};
  const key  = { 1: 'intlPB3', 2: 'uSPBIndividual3', 3: 'uSPBCorporation3' }[id];
  return key ? urls[key] || '' : '';
}

/* ───────────── helpers Mongo/array ───────────── */

async function getFeeStandard(filter) {
  return Fee.find({ $or: filter })
    .select({ feeType: 1, feeGroups: { name: 1, fields: 1, code: 1 } })
    .lean();
}

function findGroup(fee, name) {
  return fee?.feeGroups?.find((g) => g.name === name);
}

/* mapas para localizar campos */
const feeCodeMap = {
  JH001: 1,
  JH002: 2,
  JH010: 3,
  JH008: 4,
  BPS002: 6,
  BPS003: 5,
  BPS004: 7,
  BPS005: 7,
};

/* Procurar descrição humana para um código A0xx nos rows vindo do SQL */
function lookupCustodyDesc(code, rows) {
  const r = rows.find((x) => x.Amount === code);
  return r ? (r.FreqDescription || '').trim() : '';
}

/* ---------- Standard ---------- */
function applyStandardAmounts(mongoFees, stdRows) {
  /* cria mapa A0xx -> descrição */
  const custodyMap = {};
  stdRows
    .filter((r) => r.FeeCode?.startsWith('BPS'))
    .forEach((r) => {
      custodyMap[r.Amount] = (r.FreqDescription || '').trim();
    });

  mongoFees.forEach((fee) => {
    const stdGrp = findGroup(fee, 'Standard Fees');
    if (!stdGrp) return;

    stdGrp.fields.forEach((field) => {
      const row = stdRows.find((r) => parseInt(r.FeeType, 10) === field.code);
      if (!row) return;

      /* Safekeeping/Custody (código 6) usa código A0xx */
      if (field.code === 6) {
        field.defaultValue = row.Amount;                            // A021...
        field.labelValue   = custodyMap[row.Amount]
                          || row.FreqDescription?.trim()
                          || row.Amount;
        field.tooltip      = field.labelValue;
        return;
      }

      /* Demais campos numéricos */
      const amt = Number(row.FeeAmount);
      field.defaultValue = amt.toString();
      field.labelValue   = numberToCurrency(amt);
      field.tooltip      = row.FreqDescription?.trim() || field.tooltip;
    });
  });

  return custodyMap;
}

/* ---------- Exception ---------- */
function applyExceptionAmounts(mongoFees, excRows) {
  const byCode = excRows.reduce((acc, r) => {
    (acc[r.FeeCode] ??= []).push(r);
    return acc;
  }, {});

  mongoFees.forEach((fee) => {
    const excGrp = findGroup(fee, 'Exception Request');
    if (!excGrp) return;

    excGrp.fields.forEach((field) => {
      const code = Object.entries(feeCodeMap).find(([, c]) => c === field.code)?.[0];
      const rows = code ? byCode[code] : null;
      if (!rows?.length) return;

      field.exceptionOptions = rows.map((r) => ({
        value:   Number(r.Amount).toString(),
        text:    numberToCurrency(r.Amount),
        visible: true,
        retired: false,
      }));

      field.defaultValue = '';
      field.labelValue   = '';
    });
  });
}

/* sincroniza labelValue dos exception quando há default selecionado */
function syncExceptionLabels(feesArr) {
  feesArr.forEach((fee) => {
    const exc = findGroup(fee, 'Exception Request');
    if (!exc) return;
    exc.fields.forEach((f) => {
      const val = f.defaultValue;
      f.labelValue = val ? numberToCurrency(Number(val)) : '$0.00';
    });
  });
}

/* ───────────── Use‑case ───────────── */

export default class FeeGetByCifUseCase {
  async execute({ customerAccount }) {
    /* 1. modelo Mongo */
    const fees = await getFeeStandard([
      { feeType: 'Customer Fees' },
      { feeType: 'Bank Account Fees' },
      { feeType: 'Investment Account Fees' },
    ]);

    /* 2. dados do pacote (SQL) */
    const pkgData   = await getPackageData(customerAccount[0].cifno);
    const packageId = pkgData.defaultFeePackageId;

    const stdRows = await getStandardFees(packageId);
    const excRows = await getExceptionFees(packageId);

    /* 3. aplica valores & gera mapa A0xx -> descrição */
    const custodyMap = applyStandardAmounts(fees, stdRows);
    applyExceptionAmounts(fees, excRows);

    /* 4. completa labelValue do Client Current (campo 6) se estiver vazio */
    fees.forEach((fee) => {
      const curGrp = findGroup(fee, 'Client Current Fees');
      if (!curGrp) return;

      curGrp.fields.forEach((f) => {
        if (f.code === 6 && !f.labelValue) {
          f.labelValue =
            custodyMap[f.defaultValue] ||
            lookupCustodyDesc(f.defaultValue, excRows) ||
            f.defaultValue;
          f.tooltip = f.labelValue;
        }
      });
    });

    /* 5. enriquece customerAccount */
    customerAccount.forEach((acc) => {
      Object.assign(acc, pkgData);
      const exc = excRows.find((e) => e.FeeCode === acc.feeCode);
      if (exc) acc.exceptionAmount = Number(exc.Amount);
    });

    /* 6. monta resposta */
    const result = { fees: [] };
    const [customer, bank, investment] = [
      new CustomerFees(fees, customerAccount),
      new BankAccountFee(fees, customerAccount),
      new InvestimentAccountFee(
        fees,
        customerAccount,
        await Field.findOne({ code: 7 })
      ),
    ];

    [customer, bank, investment]
      .filter((f) => f.fee && f.fee.feeGroups?.length)
      .forEach((f) => result.fees.push(f.fee));

    /* casos ativos */
    const actives = await FeeCase.find({
      cif: customerAccount[0].cifno,
      status: { $nin: ['DONE', 'REJECTED'] },
      caseNumber: { $exists: true },
    });
    result.feesActives = actives.map(({ caseNumber, id }) => ({ caseNumber, id }));

    /* contas + schedule PDF */
    const docUrl = getDocumentUrl(packageId);
    result.accounts = customerAccount.map((acc) => ({
      cifno: acc.cifno,
      ddaNumber: acc.ddaNumber,
      branchCity: acc.branchCity,
      branchState: acc.branchState,
      branchType: acc.branchType,
      defaultPackageType: acc.defaultPackageType,
      feePackage: acc.feePackage,
      defaultFeePackageId: acc.defaultFeePackageId,
      defaultFeePackage: acc.defaultFeePackage,
      documentUrl: docUrl,
      feeAmount: acc.feeAmount,
      exceptionAmount: acc.exceptionAmount ?? null,
    }));
    result.documentUrl = docUrl;

    /* 7. limpa labels dos exception */
    syncExceptionLabels(result.fees);

    return Result.ok(result);
  }
}
