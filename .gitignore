'use client';

import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/Tabs';
import { IData } from '@/store/types';
import { useState } from 'react';
import FormFactory from './FormFactory';
import { Email } from "@snb/ds-email";
import Buttons from './Buttons';
import { FormProvider, useForm } from 'react-hook-form';
import { tranformBackEntriesOnValues } from '@/utils';
import { ProgressAlert } from '@snb/ds-progress-alert';
import { DataDisplay } from "@snb/ds-data-display";
import { RadioButton } from "@snb/ds-radio-button"


const ForeignCurrenciesTab = (data: IData, useFormObject: any) => {
  if (!data?.contingencyData?.id || !data?.contingencyData?.status || !data?.contingencyData?.dateAndTime || !data.requestId) return;

  return (
    <TabsContent value="processing-bank-of-america" className="data-[state=inactive]:hidden">
      <FormProvider {...useFormObject}>
        <div className="grid grid-cols-2 gap-8 p-6">
          <div>
            <DataDisplay
              title='Process Integration: Bank of America'
              data={[{
                Id: "320923457#-983242|239",
                Status: "processed",
                Date: "2025-11-01T11:49:30.2098749-05:00"
              }]}
            />
          </div>

          <div>
            <Email senderName={""}
              subjectName={""}
              attachments={[]}
              message={""}></Email>
          </div>
        </div>

        <Buttons requestId={data.requestId} initialRequestData={data} data={data.buttons} />
      </FormProvider>
    </TabsContent>
  )
};

const DomesticInternacionalTab = (data: IData, useFormObject: any) => {
  const [selectedBank, setSelectedBank] = useState('');

  const handleBankSelection = (bank: string) => {
    setSelectedBank(bank);
  };

  if (!data.requestId) {
    return;
  }

  return (
    <TabsContent value="processing-bank-of-america" className="data-[state=inactive]:hidden">
      <FormProvider {...useFormObject}>
        <div className="grid grid-cols-2 gap-8 p-6">
          <div>
            {data.messageCutoffTime && <ProgressAlert
              isLayoutInLine={true}
              cardColor='Yellow'
              height='56px'
              cardIcon='WarningCircle'
            >{data.messageCutoffTime}</ProgressAlert>}
            <h1 className='my-6 text-[#484A55] font-Figtree text-lg font-semibold leading-5 tracking-tighter' style={{ color: 'var(--text-[#484A55], #484A55)' }}>
              Select Bank
            </h1>

            <div className="flex flex-grow gap-4">
              <div className='flex items-center w-1/3 space-x-2 px-4 py-6 border border-[#D9D9D9] rounded-md flex-grow'>
                <RadioButton name="bank" onChange={() => handleBankSelection('payplus')}>
                  <label className="text-[#484A55] font-Figtree text-lg font-semibold leading-5 tracking-tighter">Payplus</label>
                </RadioButton>
                <div className='bg-[#008056] text-white font-Figtree text-xs font-semibold py-1 px-2 ml-4 rounded-full'>Default</div>
              </div>

              <div className='flex items-center w-1/3 space-x-2 px-4 py-6 border border-[#D9D9D9] rounded-md flex-grow'>
                <RadioButton name="bank" onChange={() => handleBankSelection('bank-of-america')}>
                  <label className="text-[#484A55] font-Figtree text-lg font-semibold leading-5 tracking-tighter">Bank of America</label>
                </RadioButton>
                <div className='bg-[#C75300] text-white font-Figtree text-xs font-semibold py-1 px-2 ml-4 rounded-full'>Contingency</div>
              </div>
            </div>

            <div className='mt-10'>
              {data.processIntegration && data.processIntegration.length > 0 && <DataDisplay
                title='Process Integration: Bank of America'
                data={[{
                  Id: "320923457#-983242|239",
                  Status: "processed",
                  Date: "2025-11-01T11:49:30.2098749-05:00"
                }]}
              />}
            </div>
          </div>
          <div>
            <Email senderName={""}
              subjectName={""}
              attachments={[]}
              message={""}></Email>
          </div>
        </div>

        <Buttons requestId={data.requestId} initialRequestData={data} data={data.buttons} />
      </FormProvider>
    </TabsContent>
  )
};

export default function TabsFactory({ data }: { data: IData }) {
  const [selectedTab, setSelectedTab] = useState('wire-transfer-form');
  const useFormObject = useForm({
    defaultValues: tranformBackEntriesOnValues(data.backEntries),
  });
  if (!data) {
    return;
  }
  const transferType = data.backEntries['transfer-type'].value;


  const TranferTypeTabs = {
    'usd-domestic': DomesticInternacionalTab(data, useFormObject),
    'usd-internacional': DomesticInternacionalTab(data, useFormObject),
    'foreign-currencies': ForeignCurrenciesTab(data, useFormObject),
  }


  return (
    <Tabs className="min-h-screen w-full p-6">
      <TabsList className='m-0 p-0 pb-4 w-1/2 list-none border-b border-[#DBDBDB] rounded-none justify-start'>
        <TabsTrigger value="wire-transfer-form" className={`p-4 font-body font-Figtree text-base font-normal tracking-tighter underline-from-font decoration-skip-ink-none ${selectedTab === 'wire-transfer-form' ? 'border-b-2 border-blue-500' : ''}`} style={{ color: 'var(--text-light-text-secondary, #636574)' }} onClick={() => setSelectedTab('wire-transfer-form')}>
          Wire Transfer Form
        </TabsTrigger>

        <TabsTrigger value="processing-bank-of-america" className={`p-4 font-body font-Figtree text-base font-normal tracking-tighter underline-from-font decoration-skip-ink-none ${selectedTab === 'processing-bank-of-america' ? 'border-b-2 border-blue-500' : ''}`} style={{ color: 'var(--text-light-text-secondary, #636574)' }} onClick={() => setSelectedTab('processing-bank-of-america')}>
          {transferType === 'usd-domestic' || transferType === 'usd-internacional' ? 'Processing' : 'Processing: Bank of America'}
        </TabsTrigger>
      </TabsList>

      <TabsContent forceMount={true} value="wire-transfer-form" className="data-[state=inactive]:hidden">
        <FormFactory data={data} />
      </TabsContent>

      {transferType && TranferTypeTabs[transferType as keyof typeof TranferTypeTabs]}
    </Tabs>
  );
}
