import { FeeCase } from '#src/models/entities/FeeCase.js'
import Result from '#features/shared/result.js'
import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js'

export default class FeeGetByCifUseCase {
  async execute({ customerAccount }) {
    global.logger.info('FeeGetByCifUseCase()')

    const cifno = customerAccount[0].cifno

    const result = {
      customerName: '',
      customerAddress: '',
      customerAccountOfficer: '',
      cif: cifno,
      fees: [],
      feesActives: [],
      documentUrl: '',
      currentFees: []
    }

    // 📌 1️⃣ - Buscar os dados de Fees (Standard e Current)
    const feesData = await this.#getFeesFromSQL(cifno)

    // 📌 2️⃣ - Identificar o Fee Package ID e buscar as Exception Fees
    const feePackageId = feesData[0]?.DefaultFeePackageId || null
    const exceptionData = feePackageId
      ? await this.#getExceptionFeesFromSQL(feePackageId)
      : []

    // 📌 3️⃣ - Organizar os dados no JSON esperado pelo frontend
    result.fees = this.#mapFeesByCategory(feesData, exceptionData)

    // 📌 4️⃣ - Buscar Fees Ativos (Casos Pendentes)
    const feesActives = await FeeCase.find({
      cif: cifno,
      status: { $nin: ['DONE', 'REJECTED'] },
      caseNumber: { $exists: true }
    })

    result.feesActives = feesActives.map((x) => ({
      caseNumber: x.caseNumber,
      id: x.id
    }))

    // 📌 5️⃣ - Determinar a URL do Documento baseado no Fee Package
    result.documentUrl = this.#getDocumentUrl(feePackageId)

    // 📌 6️⃣ - Mapear o "currentFees"
    result.currentFees = this.#mapCurrentFees(feesData)

    return Result.ok(result)
  }

  /**
   * 📌 1️⃣ Buscar Standard e Current Fees do SQL
   */
  async #getFeesFromSQL(cifno) {
    global.logger.info('getFeesFromSQL()')
    const connection = await connectToFeeMgmtDb()
    return await executeStoreProcedure(connection, 'sp_get_fees_byCIF', { cifno })
  }

  /**
   * 📌 2️⃣ Buscar Exception Fees por Fee Package
   */
  async #getExceptionFeesFromSQL(feePackageId) {
    global.logger.info('getExceptionFeesFromSQL()')

    const connection = await connectToFeeMgmtDb()
    return await executeStoreProcedure(connection, 'sp_get_exception_fees_bypackage', { feePackageId })
  }

  /**
   * 📌 3️⃣ Organiza os Fees (Standard, Current, Exception)
   */
  #mapFeesByCategory(feesData, exceptionData) {
    const mappedFees = []

    feesData.forEach(record => {
      const isException = record.StandardException === 'Exception'
      const isCurrentClient = record.FeeAmount > 0

      const field = {
        code: record.FeeCode,
        name: record.FeeDescription,
        defaultValue: record.DefaultFeeAmount || '',
        isStandard: !isException,
        isException: isException,
        isCurrentClient: isCurrentClient,
        labelValue: record.FeeAmount ? `$${record.FeeAmount}.00` : '',
        exceptionOptions: isException ? this.#parseExceptionOptions(exceptionData, record) : []
      }

      let feeGroup = mappedFees.find(f => f.feeType === record.FeeType)
      if (!feeGroup) {
        feeGroup = { feeType: record.FeeType, feeGroups: [] }
        mappedFees.push(feeGroup)
      }

      let targetGroup
      if (isException) {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Exception Request')
        if (!targetGroup) {
          targetGroup = { name: 'Exception Request', fields: [] }
          feeGroup.feeGroups.push(targetGroup)
        }
      } else if (isCurrentClient) {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Client Current Fees')
        if (!targetGroup) {
          targetGroup = { name: 'Client Current Fees', fields: [] }
          feeGroup.feeGroups.push(targetGroup)
        }
      } else {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Standard Fees')
        if (!targetGroup) {
          targetGroup = { name: 'Standard Fees', fields: [] }
          feeGroup.feeGroups.push(targetGroup)
        }
      }

      targetGroup.fields.push(field)
    })

    return mappedFees
  }

  /**
   * 📌 4️⃣ Converte ExceptionOptions para o formato correto
   */
  #parseExceptionOptions(exceptionData, record) {
    return exceptionData
      .filter(exc => exc.FeeCode === record.FeeCode)
      .map(exc => ({
        value: exc.Amount,
        text: `$${exc.Amount}.00`,
        visible: true,
        retired: false
      }))
  }

  /**
   * 📌 5️⃣ Determina a URL do Documento baseado no Fee Package
   */
  #getDocumentUrl(feePackageId) {
    const scheduleUrls = global.environment.scheduleUrls

    const packageMap = {
      1: 'intlPB3',
      2: 'uSPBIndividual3',
      3: 'uSPBCorporation3',
      4: 'efraPB3',
      5: 'eraPB3'
    }

    const scheduleType = packageMap[feePackageId] || 'intlPB3' // Default para `intlPB3`
    
    return scheduleUrls[scheduleType] || ''
  }

  /**
   * 📌 6️⃣ Mapear os valores de "currentFees"
   */
  #mapCurrentFees(feesData) {
    return feesData
      .filter(record => record.FeeAmount > 0)
      .map(record => ({
        feeDescription: `${record.FeeDescription} - $${record.FeeAmount}.00`,
        feeCode: `${record.FeeType} ${record.ACCTNO}`
      }))
  }
}
