import { Fee }            from '#src/models/entities/Fees.js';
import Result             from '#features/shared/result.js';
import CustomerFees       from '#src/models/CustomerFees.js';
import BankAccountFee     from '#src/models/BankAccountFee.js';
import InvestimentAccountFee from '#src/models/InvestimentAccountFee.js';
import { FeeCase }        from '#src/models/entities/FeeCase.js';
import { Field }          from '#src/models/entities/Fields.js';
import {
  connectToFeeMgmtDb,
  executeStoreProcedure,
} from '#core/data/mssql/index.js';

export default class FeeGetByCifUseCase {

  /* ================================================================ */
  /* MAIN                                                             */
  /* ================================================================ */
  async execute({ customerAccount }) {

    /* 1 ─ modelo‑padrão (Mongo) ------------------------------------ */
    const fees = await this.#getFeeStandard([
      { feeType: 'Customer Fees' },
      { feeType: 'Bank Account Fees' },
      { feeType: 'Investment Account Fees' },
    ]);

    /* 2 ─ dados de package (SQL) ----------------------------------- */
    const conn           = await connectToFeeMgmtDb();          // 1ª conexão
    const pkgData        = await this.#getPackageDataFromSQL(conn, customerAccount[0].cifno);
    await conn.close();                                         // libera pool

    /* packageId pode vir nulo → por enquanto fixamos 1 -------------- */
    const pkgId = pkgData.defaultFeePackageId ?? 1;

    /* 3 ─ fees Standard / Exception em paralelo  (opção B) ---------- */
    const [connStd, connExc] = await Promise.all([
      connectToFeeMgmtDb(), connectToFeeMgmtDb()
    ]);

    const [stdRows, excRows] = await Promise.all([
      executeStoreProcedure(connStd, 'sp_get_standard_fees_bypackage',  { FeePackageId: pkgId }),
      executeStoreProcedure(connExc,'sp_get_exception_fees_bypackage', { FeePackageId: pkgId }),
    ]);

    await Promise.all([connStd.close(), connExc.close()]);

    /* apenas log para teste ----------------------------------------- */
    console.log('STD rows →', stdRows);
    console.log('EXC rows →', excRows);

    /* 4 ─ mescla pkgData em cada conta ------------------------------ */
    customerAccount.forEach(acc => Object.assign(acc, pkgData));

    /* 5 ─ constrói objetos já usados pelo front --------------------- */
    const result = { fees: [] };

    const [customer, bank, investment] = [
      new CustomerFees      (fees, customerAccount),
      new BankAccountFee    (fees, customerAccount),
      new InvestimentAccountFee(
        fees, customerAccount, await Field.findOne({ code: 7 })
      ),
    ];

    [customer, bank, investment]
      .filter(f => f.fee && f.fee.feeGroups?.length)
      .forEach(f => result.fees.push(f.fee));

    /* 6 ─ casos ativos ---------------------------------------------- */
    const feesActives = await FeeCase.find({
      cif: customerAccount[0].cifno,
      status: { $nin: ['DONE', 'REJECTED'] },
      caseNumber: { $exists: true },
    });

    result.feesActives = feesActives.map(({ caseNumber, id }) => ({ caseNumber, id }));

    /* 7 ─ accounts detalhados p/ Conductor -------------------------- */
    const docUrl = this.#getDocumentUrl(pkgData.defaultFeePackageId);
    result.accounts = customerAccount.map(acc => ({
      cifno:               acc.cifno,
      ddaNumber:           acc.ddaNumber,
      branchCity:          acc.branchCity,
      branchState:         acc.branchState,
      branchType:          acc.branchType,
      defaultPackageType:  acc.defaultPackageType,
      feePackage:          acc.feePackage,
      defaultFeePackageId: acc.defaultFeePackageId,
      defaultFeePackage:   acc.defaultFeePackage,
      documentUrl:         docUrl,
    }));

    result.documentUrl = docUrl;

    return Result.ok(result);
  }

  /* ================================================================ */
  /* HELPERS                                                          */
  /* ================================================================ */

  /* dados do package/cif ------------------------------------------- */
  async #getPackageDataFromSQL(conn, cifno) {
    const [row] = await executeStoreProcedure(conn, 'sp_get_fees_byCIF', { cifno });
    if (!row) return {};

    return {
      defaultFeePackageId: row['Default Fee Package Id'] ?? null,
      branchCity:          row['Branch City']?.trim()      || '',
      branchState:         row['Branch State']?.trim()     || '',
      branchType:          row['Branch Type']?.trim()      || '',
      defaultPackageType:  row['Default Package Type']?.trim() || '',
      feePackage:          row['Default Fee Package']?.trim()  || '',
    };
  }

  /* traduz id → URL do PDF ----------------------------------------- */
  #getDocumentUrl(id) {
    const keyMap = { 1: 'intlPB3', 2: 'uSPBIndividual3', 3: 'uSPBCorporation3' };
    const key    = keyMap[id];
    return key ? (global.environment.scheduleUrls?.[key] || '') : '';
  }

  /* pega modelo default no Mongo ----------------------------------- */
  async #getFeeStandard(filter) {
    return Fee.find({ $or: filter })
              .select({ feeType: 1, feeGroups: { name: 1, fields: 1, code: 1 } })
              .lean();          // já devolve objeto puro (sem hydrate)
  }
}
