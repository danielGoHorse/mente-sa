import { FeeGroup } from './entities/FeeGroups.js';
import numberToCurrency from '../core/helpers/currency.js';

export default class InvestmentAccountFee {
  #feeName = 'Investment Account Fees';
  #investiment = {};
  #accounts = [];
  #accountsDDA = [];
  #allExceptions = new Set();

  constructor(fees, accounts, equityField) {
    this.#investiment = fees.filter((x) => x.feeType === this.#feeName)[0];
    if (!this.#investiment || !Array.isArray(this.#investiment.feeGroups) || !this.#investiment.feeGroups.length) {
      this.#investiment = {};
      return;
    }
    const feeGroupCode = this.#investiment.feeGroups[0].code;

    this.#accounts = accounts.filter((x) => x.feeType === 3);

    if (this.#accounts.length < 1) {
      this.#investiment = {};
      return;
    }

    this.#accounts.forEach((acc) => {
      if (acc.ddaNumber) {
        this.#accountsDDA.push({
          number: acc.ddaNumber,
          code: 5,
          entity: acc.entity || null,
        });
        this.#accountsDDA.push({
          number: acc.ddaNumber,
          code: 7,
          entity: acc.entity || null,
        });
      }
    });
    
    this.#accountsDDA = Array.from(
      new Map(this.#accountsDDA.map(item => [${item.number}-${item.code}, item])).values()
    );

    this.#addMultiplesAccount(this.#accounts[0].cifno);
    this.#addCurrentClientValue(equityField);
  }

  get fee() {
    if (!this.#investiment || !this.#investiment.feeGroups) {
      return null;
    }
    return this.#investiment;
  }

  #addMultiplesAccount(cif) {
   
    const result = {};

    for (const feeGroup of this.#investiment.feeGroups) {
      for (const account of this.#accountsDDA) {
        if (!result[account.number]) {
          result[account.number] = {};
        }

        const fields = feeGroup.fields.filter((x) => x.code === account.code);
        if (fields.length === 0) continue;

        if (!result[account.number][feeGroup.name]) {
          result[account.number][feeGroup.name] = [];

          feeGroup.fields?.forEach((item) => {
            if(!item.exceptionOptions){
              item.exceptionOptions = []
            }

            item.exceptionOptions = item.exceptionOptions.filter((x) => !x.retired);
            item.exceptionOptions.forEach(this.#allExceptions.add, this.#allExceptions);
          });

          const newFeeGroup = new FeeGroup({
            name: feeGroup.name,
            fields,
            cif,
            accountNumber: account.number,
            visible: feeGroup.visible,
            code: feeGroup.code,
            entityCode: account.entity,
          });
          result[account.number][feeGroup.name].push(newFeeGroup);
          continue;
        }

        const feeGroupToAddFields = result[account.number][feeGroup.name][0];
        feeGroupToAddFields.fields = [...feeGroupToAddFields.fields, ...fields];
      }
    }

    const feeGroupsByAccount = Object.keys(result).reduce((acc, accountNumber) => {
      Object.keys(result[accountNumber]).forEach((groupName) => {
        acc.push(result[accountNumber][groupName]);
      });
      return acc;
    }, []);

    this.#investiment.feeGroups = [];
    for (const feeGroups of feeGroupsByAccount) {
      for (const feeGroup of feeGroups) {
        this.#investiment.feeGroups.push(feeGroup);
      }
    }
  }

  #addCurrentClientValue(equityField) {
    const exceptionsOptions = Array.from(this.#allExceptions);
    for (const [feeGroupIndex, feeGroup] of this.#investiment.feeGroups.entries()) {
      feeGroup.cif = this.#accounts[0]?.cifno || null;
      for (const [fieldIndex, field] of feeGroup.fields.entries()) {
        if (field.isException) {
          if (feeGroupIndex > 0 && this.#investiment.feeGroups[feeGroupIndex - 1].fields[fieldIndex]) {
            field.labelValue =
              this.#investiment.feeGroups[feeGroupIndex - 1].fields[fieldIndex].labelValue || '';
          }
        } else {
          for (const account of this.#accounts) {
            if (
              field.code === feeGroup.accountNumber &&  
              feeGroup.accountNumber === account.ddaNumber
            ) {
              if (field.code === 5) {
                field.defaultValue = field.isStandard
                  ? field.defaultValue
                  : account.feeAmount?.toString() || '';
                field.labelValue = numberToCurrency(field.defaultValue);
              } else {
                if (field.labelValue !== 'Other') {
                  if (field.isCurrentClient) {
                    field.defaultValue = account.feeCode?.toString() || '';
                  }
                  let exception = exceptionsOptions.find((x) => x.value === field.defaultValue);
                  if (!exception && equityField?.exceptionOptions) {
                    exception = equityField.exceptionOptions.find(
                      (e) => e.value === field.defaultValue
                    );
                  }
                  if (!exception) {
                    exception = { text: '' };
                  }
                  field.labelValue = exception.text;
                }
              }
            }
          }
        }
      }
    }
    this.#clearMemory();
  }

  #clearMemory() {
    this.#accounts = [];
    this.#accountsDDA = [];
    this.#allExceptions = new Set();
  }
}

Preciso da mesma tratativa do Banc Account, com relação a não duplicar informações....

Só mais uma coisa.....on vem o valor Fee Amount agora vem uma string, com um dado assim:

FeeAmount
$0.10 per share, min charge of $150 per trade

Eu preciso apresentar este valor desta forma....

