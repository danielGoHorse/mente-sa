async #getFeesStructuredFromSQL(customerAccount) {
  // Obter os dados do SQL
  const feesData = await this.#getFeesFromSQL(customerAccount[0].cifno);

  const feePackageId = feesData[0]?.['Default Fee Package Id'];
  if (!feePackageId) {
    throw new Error('Default Fee Package Id not found in feesData');
  }

  // Construir o formato esperado para customerAccount
  const accounts = feesData.map((fee) => ({
    cifno: fee.CIFNO,
    ddaNumber: fee.ACCTNO,
    feeType: this.#mapFeeType(fee.FeeType),
    feeGroup: 1, // Pode ajustar se tiver lógica para isso
    kycMailingStatus: fee.StandardException === 'Standard' ? 'Standard' : 'Hold Mail',
  }));

  // Estruturar os dados agrupados
  const groupedFees = {};

  for (const fee of feesData) {
    const { FeeType, FeeDescription, FeeCode, FeeAmount, Frequency, DefaultFeeAmount, DefaultFrequency } = fee;

    // Converter FeeCode via de/para
    const mappedCode = deParaFeeCodes[FeeCode] || FeeCode;

    // Criar feeType se ainda não existir
    if (!groupedFees[FeeType]) {
      groupedFees[FeeType] = {
        feeType: FeeType,
        feeGroups: [],
      };
    }

    // Adicionar Standard Fees
    let standardGroup = groupedFees[FeeType].feeGroups.find((group) => group.name === 'Standard Fees');
    if (!standardGroup) {
      standardGroup = {
        name: 'Standard Fees',
        code: 1,
        fields: [],
      };
      groupedFees[FeeType].feeGroups.push(standardGroup);
    }

    standardGroup.fields.push({
      code: mappedCode,
      name: FeeDescription,
      defaultValue: FeeAmount ? FeeAmount.toString() : '',
      tooltip: Frequency ? Frequency : '',
      isException: false,
    });

    // Adicionar Client Current Fees
    let clientCurrentGroup = groupedFees[FeeType].feeGroups.find((group) => group.name === 'Client Current Fees');
    if (!clientCurrentGroup) {
      clientCurrentGroup = {
        name: 'Client Current Fees',
        code: 2,
        fields: [],
      };
      groupedFees[FeeType].feeGroups.push(clientCurrentGroup);
    }

    clientCurrentGroup.fields.push({
      code: mappedCode,
      name: FeeDescription,
      defaultValue: DefaultFeeAmount ? DefaultFeeAmount.toString() : '',
      tooltip: DefaultFrequency ? DefaultFrequency : '',
      isException: false,
    });
  }

  // Buscar exceções do SQL
  const exceptions = await this.#getExceptionFeesFromSQL(feePackageId);
  console.log('Exceptions from SQL:', exceptions);

  // Adicionar Exceptions Group
  for (const exception of exceptions) {
    const { code, name, defaultValue, tooltip, isException } = exception;

    // Encontrar ou criar o grupo de exceções
    let exceptionGroup = groupedFees[exception.feeType]?.feeGroups.find(
      (group) => group.name === 'Exceptions'
    );
    if (!exceptionGroup) {
      exceptionGroup = {
        name: 'Exceptions',
        code: 3,
        fields: [],
      };
      groupedFees[exception.feeType]?.feeGroups.push(exceptionGroup);
    }

    // Adicionar exceção ao grupo
    exceptionGroup.fields.push({
      code,
      name,
      defaultValue,
      tooltip,
      isException,
    });
  }

  console.log('Grouped Fees with Exceptions:', groupedFees);

  // Retornar groupedFees e accounts
  return { groupedFees: Object.values(groupedFees), accounts };
}
