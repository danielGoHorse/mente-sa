import Result from '#features/shared/result.js';
import CustomerFees from '#src/models/CustomerFees.js';
import BankAccountFee from '#src/models/BankAccountFee.js';
import InvestmentAccountFee from '#src/models/InvestmentAccountFee.js'; // <--- importe aqui
import { FeeCase } from '#src/models/entities/FeeCase.js';
import {
  connectToFeeMgmtDb,
  executeStoreProcedure,
} from '#core/data/mssql/index.js';

const deParaFeeCodes = {
  JH001: 1,
  JH002: 2,
  JH006: 4,
  JH007: 8,
  BPS002: 6,
  BPS003: 5,
  BPS004: 9,
  BPS005: 7,
  JH010: 3,
};

const excludedCodes = new Set([8]);

// ... mapDbFeeTypeToApp, mapFeeTypeToNumber, getDocumentUrl, etc. ...
// (tudo igual antes)

export default class FeeGetByCifUseCase {
  async execute({ customerAccount }) {
    const result = { fees: [] };

    const { groupedFees, accounts } = await this.#getFeesStructuredFromSQL(
      customerAccount
    );

    // Povoar "accounts" no result
    result.accounts = accounts.map((account) => ({
      cifno: account.cifno,
      ddaNumber: account.ddaNumber,
      branchCity: account.branchCity,
      branchState: account.branchState,
      branchType: account.branchType,
      defaultPackageType: account.defaultPackageType,
      feePackage: account.feePackage,
    }));

    // 1. Cria CustomerFees (seu fluxo normal)
    const customer = new CustomerFees(groupedFees, accounts);
    if (customer.fee) result.fees.push(customer.fee);

    // 2. Cria BankAccountFee (seu fluxo normal)
    const bank = new BankAccountFee(groupedFees, accounts);
    if (bank.fee) result.fees.push(bank.fee);

    // 3. Cria InvestmentAccountFee
    //    Precisamos passar "groupedFees", "accounts" e "equityField".
    //    Se você ainda não tem "equityField" no seu código, pode ser
    //    algo opcional ou você cria um objeto vazio mesmo (ou com as exceptionOptions).
    //    Exemplo simples:
    const equityField = {
      exceptionOptions: [
        // Se precisar de algo fixo, coloque aqui. Caso não precise, deixe vazio.
      ],
    };

    const investment = new InvestmentAccountFee(groupedFees, accounts, equityField);
    if (investment.fee) {
      result.fees.push(investment.fee);
    }

    // 4. Fees ativas (Mongo)
    const feesActives = await FeeCase.find({
      cif: customerAccount[0].cifno,
      status: {
        $nin: ['DONE', 'REJECTED'],
      },
      caseNumber: {
        $exists: true,
      },
    });

    result.feesActives = feesActives?.map((x) => ({
      caseNumber: x.caseNumber,
      id: x.id,
    }));

    return Result.ok(result);
  }

  // ... o resto do seu código (#getFeesStructuredFromSQL, etc.) ...
}
