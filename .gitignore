import Result from '#features/shared/result.js';

export default class FeeCaseGetByCifUseCase {
  async execute({ cif }, feeManagementModel, customerModel) {
    const [errCustomer, responseCustomer] = await customerModel.getCustomerDetailsByCif(cif);
    if (errCustomer) {
      return Result.fail({ message: "It's not possible to get address cif" });
    }

    const customerData = responseCustomer?.data?.customer || {};
    const [errFee, responseFee] = await feeManagementModel.getFeeByAccount(customerData);
    if (errFee) {
      return Result.fail({ message: "It's not possible to get fee values" });
    }

    const feesData = responseFee?.data || {};

    // Mapeando currentFees corretamente
    const currentFees = [
      ...(customerData?.customerCurrentFees?.map(x => ({
        feeDescription: x.feeDescription || '',
        feeCode: x.feeCode || ''
      })) || []),
      ...(feesData?.currentFees || [])
    ];

    // Gerando uma timestamp para `createdAt` e `updatedAt`
    const timestamp = new Date().toISOString();

    // Mapeando fees com todos os campos necessários
    const fees = [
      ...(customerData?.customerAccount?.map(fee => ({
        name: fee.feeGroup === 1 ? "Client Current Fees" : "Standard Fees",
        visible: true,
        kycMailingStatus: fee.kycMailingStatus || null,
        code: fee.feeGroup,
        accountNumber: fee.ddaNumber || '',
        cif: fee.cifno,
        id: fee.entity, // Assumindo que `entity` pode ser um identificador único
        fields: [
          {
            hasChanged: false, // Valor padrão
            code: fee.feeCode,
            name: fee.feeDescription,
            defaultValue: fee.feeAmount?.toString() || '',
            isStandard: fee.isFeesStandard === "Yes",
            isException: fee.isFeesStandard === "No",
            isCurrentClient: false,
            labelValue: `$${fee.feeAmount.toFixed(2)}`,
            tooltip: fee.source ? `Source: ${fee.source}` : '',
            exceptionOptions: [],
            createdAt: timestamp,
            updatedAt: timestamp,
            id: fee.ddaNumber.toString(), // Assumindo que `ddaNumber` pode ser um id único
          }
        ]
      })) || []),
      ...(feesData?.fees?.map(feeGroup => ({
        ...feeGroup,
        id: feeGroup.id || '', // Garantindo que `id` esteja presente
        feeGroups: feeGroup.feeGroups.map(group => ({
          ...group,
          id: group.id || '',
          cif: group.cif || '',
          accountNumber: group.accountNumber || '',
          fields: group.fields.map(field => ({
            ...field,
            hasChanged: field.hasChanged || false,
            createdAt: field.createdAt || timestamp,
            updatedAt: field.updatedAt || timestamp,
            id: field._id || '', // Garantindo que `_id` seja incluído
            exceptionOptions: field.exceptionOptions?.map(opt => ({
              ...opt,
              parameterOptionId: opt.parameterOptionId || '',
            })) || []
          }))
        }))
      })) || [])
    ];

    const result = {
      customerName: customerData?.customerAddress?.name || responseFee?.customerName || '',
      customerShortName: responseFee?.customerShortName || '',
      customerAddress: customerData?.customerAddress?.address || '',
      customerAccountOfficer: customerData?.customerAddress?.officer || '',
      cif: customerData?.customerAddress?.cif || cif,
      officerId: responseFee?.officerId || '',
      branchCity: responseFee?.branchCity || '',
      branchState: responseFee?.branchState || '',
      feePackage: responseFee?.feePackage || '',
      defaultFeePackageId: responseFee?.defaultFeePackageId || '',
      fees,
      feesActives: responseFee?.feesActives || [],
      documentUrl: responseFee?.documentUrl || '',
      currentFees
    };

    return Result.ok(result);
  }
}
