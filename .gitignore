// import api from '@/app/api';
import { useQuery } from "@tanstack/react-query";
import { HistoryData } from '../store/types';
import mockHistoryData from "@/mocks/historyMock.json";


const fetchHistory = async (requestId?: string): Promise<HistoryData> => {
    // const response = await api.get<HistoryData>(`/v1/history/${requestId}`);
    // return response.data;

    await new Promise((res) => setTimeout(res, 500));
    return mockHistoryData as HistoryData;;
}

export function useHistoryProvider(requestId?: string) {
    const query = useQuery<HistoryData>({
      queryKey: ["historyProvider", requestId],
      queryFn: () => fetchHistory(requestId),
      enabled: !!requestId,
      staleTime: 1000 * 60,
    });
  
    return { query };
}


============================================


"use client";
import React, { useEffect } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/Tabs";
import Requests from "@/components/Requests";
import { Documents } from "@/components/Documents";
import { useAuthStore } from "@/app/store/auth/authStore";
import { useDocumentStore } from "@/app/store/documentsStore/documentStore";
import { Document } from "@/app/store/types";
import History from "@/components/history/History";
// import historyJson from "@/mocks/historyMock.json";
import { useHistoryProvider } from "@/app/providers/useHistoryProvider";

// const historyData = historyJson as HistoryData;

type IPageTabsParams = {
  params: {
    requestName: string;
    requestId?: string;
  };
  tabTriggerType: string;
};

export default function PageTabs({ params, tabTriggerType }: IPageTabsParams) {
  const { userData } = useAuthStore((state) => state);
  const { documentList, setDocumentList } = useDocumentStore((state) => state);
  const { query: historyQuery } = useHistoryProvider(params.requestId);

  useEffect(() => {
    setDocumentList([]);

    return () => {
      setDocumentList([]);
    };
  }, []);

  return (
    <Tabs
      defaultValue={tabTriggerType}
      className="min-h-screen w-full py-7 px-6"
    >
      <TabsList>
        <TabsTrigger
          value="request"
          className="-mb-1 rounded-t-lg font-figtree flex h-[45px] cursor-pointer flex-row items-center justify-center bg-background-primary text-sm font-normal text-[#636574] aria-selected:!bg-white aria-selected:text-[#1e2347]"
        >
          {params.requestId ? (
            <>{`Request: ${params.requestId}`}</>
          ) : (
            "New Request"
          )}
        </TabsTrigger>
        <TabsTrigger
          value="documents"
          className="-mb-1 rounded-t-lg font-figtree flex h-[45px] cursor-pointer flex-row items-center justify-center bg-background-primary text-sm font-normal text-[#636574] aria-selected:!bg-white aria-selected:text-[#1e2347]"
        >
          Documents
        </TabsTrigger>
        <TabsTrigger
          value="history"
          className="-mb-1 rounded-t-lg font-figtree flex h-[45px] cursor-pointer flex-row items-center justify-center bg-background-primary text-sm font-normal text-[#636574] aria-selected:!bg-white aria-selected:text-[#1e2347]"
        >
          History
        </TabsTrigger>
      </TabsList>

      <TabsContent value="request">
        <Requests />
      </TabsContent>

      <TabsContent
        value="documents"
        className="mt-0 rounded-b-lg rounded-r-lg bg-[white] aria-selected:block rounded-lg p-6"
      >
        {
          <Documents
            baseUrl={process.env.NEXT_PUBLIC_BASE_URL ?? ""}
            bucketName="conductor-client"
            pathUrl="/v1/file"
            getListDocument={documentList ?? []}
            showUploader={true}
            userData={userData}
            onUploadDocuments={(documents: Document[]) =>
              setDocumentList(documents)
            }
          />
        }
      </TabsContent>

      <TabsContent
        value="history"
        className="mt-0 rounded-b-lg rounded-r-lg bg-[white] aria-selected:block rounded-lg p-6"
      >
        {historyQuery.data && (
          <History
            status={historyQuery.data.status}
            data={historyQuery.data.data}
            cardRowData={historyQuery.data.cardRowData}
            dataDisplayData={historyQuery.data.dataDisplayData}
            selectedBank={historyQuery.data.selectedBank}
          />
        )}
      </TabsContent>
    </Tabs>
  );
}



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

{ 
  "status": "pending",
  "data": [
    [
      {
        "id": 1,
        "name": "Initiator",
        "status": "completed",
        "successLabel": "Submitted",
        "approvalsLevel": "Compliance",
        "permissionLevel": "PB AA",
        "indexLevel": 1,
        "permissions": {
          "people": [
            {
              "userId": "user1",
              "firstName": "João",
              "lastName": "Silva",
              "addedAt": "2023-10-01T12:00:00Z",
              "addedBy": "Carter Goose",
              "action": [
                {
                  "signature": "PB AA",
                  "type": "success",
                  "subtype": "approved",
                  "date": "2023-10-01T09:00:00Z",
                  "comment": "Transferência iniciada"
                }
              ]
            }
          ]
        }
      }
    ],
    [
      {
        "id": 2,
        "name": "Validations",
        "status": "skipped",
        "successLabel": "Validated",
        "permissions": {
          "people": [
            {
              "userId": "user2",
              "firstName": "Maria",
              "lastName": "Santos",
              "addedAt": "2023-10-01T12:00:00Z",
              "addedBy": "Carter Goose",
                  "action": [
                {
                  "signature": "PB AA",
                  "type": "success",
                  "subtype": "approved",
                  "date": "2023-10-01T10:30:00Z",
                  "comment": "Validações concluídas"
                }
              ]
            }
          ]
        }
      }
    ],
    [
      {
        "id": 3,
        "name": "Approvals and Restrictions",
        "status": "pending",
        "successLabel": "Approved",
        "permissions": {
          "people": [
            {
              "userId": "user3",
              "firstName": "Carlos",
              "lastName": "Oliveira",
              "addedAt": "2023-10-01T12:00:00Z",
              "addedBy": "Carter Goose",
              "action": [
                {
                  "signature": "-",
                  "type": "success",
                  "subtype": "approved",
                  "date": "2023-10-01T10:30:00Z",
                  "comment": "Validações concluídas"
                }
              ]
            },
            {
              "userId": "user4",
              "firstName": "Ana",
              "lastName": "Costa",
              "addedAt": "2023-10-01T12:00:00Z",
              "addedBy": "John Doe",
              "action": [
                {
                  "signature": "-",
                  "type": "success",
                  "subtype": "approved",
                  "date": "2023-10-01T10:30:00Z",
                  "comment": "Validações concluídas"
                }
              ]
            }
          ]
        }
      },
      {
        "id": 4,
        "name": "Restriction Removal",
        "status": "canceled",
        "successLabel": "Restrictions Removed",
        "permissions": {
          "people": []
        }
      }
    ],
    [
      {
        "id": 5,
        "name": "Wire Repair",
        "status": "waiting",
        "successLabel": "Repaired",
        "permissions": {
          "people": []
        }
      }
    ],
    [
      {
        "id": 6,
        "name": "OFAC",
        "status": "waiting",
        "successLabel": "Cleared",
        "permissions": {
          "people": []
        }
      }
    ],
    [
      {
        "id": 7,
        "name": "Processing",
        "status": "waiting",
        "successLabel": "Processed",
        "permissions": {
          "people": []
        }
      }
    ],
    [
      {
        "id": 8,
        "name": "Initiator Notified",
        "status": "waiting",
        "successLabel": "Notified",
        "permissions": {
          "people": []
        }
      }
    ]
  ],
  "cardRowData": [
    {
      "title": "Request Status",
      "value": "In Progress",
      "level": ""
    },
    {
      "title": "Initiator",
      "value": "Completed",
      "level": "",
      "date": "01/10/2023 09:00"
    },
    {
      "title": "Validations",
      "value": "Completed",
      "level": "",
      "date": "01/10/2023 10:30"
    },
    {
      "title": "Approvals and Restrictions",
      "value": "Pending (2/5)",
      "level": "",
      "date": ""
    },
    {
      "title": "Restriction Removal",
      "value": "Waiting",
      "level": "",
      "date": ""
    },
    {
      "title": "Wire Repair",
      "value": "Waiting",
      "level": "",
      "date": ""
    },
    {
      "title": "OFAC",
      "value": "Waiting",
      "level": "",
      "date": ""
    },
    {
      "title": "Processing",
      "value": "Waiting",
      "level": "",
      "date": ""
    },
    {
      "title": "Initiator Notified",
      "value": "Waiting",
      "level": "",
      "date": ""
    }
  ],
  "dataDisplayData": [
    {
      "Id": "WT-2023-001",
      "Status": "In Progress",
      "Date": "2023-10-01T09:00:00.000Z"
    }
  ],
  "selectedBank": "Bank of America"
}


=====================================================================


export type ButtonProps = {
  type: string;
  label: string;
  name: string;
  icon?: string;
  iconSize?: number;
  theme: "primary" | "outline" | "text" | undefined;
  method: string;
  openModal?: boolean;
  requestBody: string;
  requestName?: boolean;
  actionAfterSubmit?: any;
  action: string;
  size: "lg" | "sm" | undefined;
  width: string | number | undefined;
  disabled: boolean | undefined;
  bringFields?: string[];
  styles: any;
};

export type QuestionBehavior = {
  renderByFieldConditions?: {
    fieldName: string;
    fieldValues: string;
  }[];
};

export type Question = {
  title: string;
  attributes: {
    behavior: QuestionBehavior;
    styles: Record<string, string>;
  };
};

export type Section = {
  questions: Question[];
  attributes: {
    behavior: Record<string, string>;
    styles: Record<string, string>;
  };
};

export type Container = {
  sections: Section[];
  attributes: {
    behavior: Record<string, string>;
    styles: Record<string, string>;
  };
};

export type TCard = {
  title: string;
  border: boolean;
  img: string;
  size: string;
  subTitle: string;
  cardWidth: string;
  cardHeight: string;
};

export type frontEntries = {
  card: TCard[];
  containers: Container[];
  attributes: {
    behavior: Record<string, string>;
    styles: Record<string, string>;
  };
};

export type Document = {
  itemRef?: string;
  createdAt?: string | number | Date;
  documentName: string;
  documentSize?: string;
  documentUUID?: string;
  documentStatus?: string;
  documentURL?: string;
  documentURLPreview?: string;
  uploadedBy: { fullName?: string; userId?: string };
};

export type ActiveRequests = {
  requestId: string;
  caseNumber: number;
  caseId?: string;
};

export type IData = {
  id?: string;
  requestId?: string;
  responseId?: string;
  page?: string;
  caseNumber?: string;
  caseStatus?: string;
  createdBy?: string;
  requestConfigId?: string;
  workflowConfigId?: string;
  workflow?: any[];
  documents?: Document[];
  frontEntries: frontEntries;
  backEntries: Record<string, Record<string, any>>;
  options: {
    validationRequired: false;
  };
  approvals: any[];
  buttons: ButtonProps[];
  version: string;
  activeRequests: ActiveRequests[];
  messageResult?: Record<string, any>;
  data?: IData;
  timeline?: TimeLineItems[];
  actions?: ActionsItems[];
  result?: string;
};

export type TimeLineItems = {
  name: string;
  status: string;
};

export type ActionsItems = {
  firstName: string;
  lastName: string;
  comment: string;
  stepName: string;
  type: string;
  subtype: string;
  userID: string;
  date: string;
};

export type CaseAttribute = {
  name: string;
  value: string;
};

export type CardDashboardData = {
  application: number;
  applicationName: string;
  caseAttribute: CaseAttribute[];
  createdBy: string;
  createdOn: string;
  currentActivity: string;
  editedAt: string;
  editedBy: string;
  locked: boolean;
  lockedBy: string;
  status: number;
};

export type DashboardTableProps = {
  field?: any;
  reference: string;
  initiator: string;
  currentActivity: string;
  status: number;
  result: number;
  department: string;
  createdOn: string;
  url: string;
};

export type DashboardFilterProps = {
  reference: string;
  initiator: string;
  currentActivity: string;
  task: string;
  status: string;
  result: string;
  department: string;
  createdOn: string;
  accountOfficer: string;
  clientName: string;
  cif: string;
  referenceNumber: string;
  createdBy: string;
};

export type DashboardOptionProps = {
  value: string;
  label: string;
};

export interface BeneficiaryData {
  beneficiaryEnabled: boolean;
  usBankEnabled: boolean;
  intermediaryBankEnabled: boolean;
  selectedBeneficiary: string;
  templateName: string;
  bankCountry: string;
  bankIdType: string;
  intermediaryBankCountry: string;
  beneficiaryBankIdType: string;
  beneficiaryBankCountry: string;
  beneficiaryCountry: string;
  bankAba: string;
  bankName: string;
  bankCity: string;
  swiftBicBeneficiary: string;
  intermediaryBankName: string;
  intermediaryBankCity: string;
  beneficiaryBankName: string;
  beneficiaryBankCity: string;
  beneficiaryName: string;
  addressLine1: string;
  addressLine2: string;
  beneficiaryCity: string;
  beneficiaryState: string;
  beneficiaryZipCode: string;
  accountNumber: string;
  obiEnabled: boolean;
  obiReferences: string[];
  isDomestic: boolean;
}

export interface HistoryData {
  status: string;
  data: Array<
    Array<{
      id: number;
      name: string;
      status: "completed" | "pending" | "waiting" | "canceled" | "skipped";
      successLabel?: string;
      permissions: {
        people: Array<{
          userId: string;
          firstName: string;
          lastName: string;
          action?: Array<{
            type: string;
            subtype: string;
            date: string;
            comment: string;
          }>;
        }>;
      };
    }>
  >;
  cardRowData: Array<{
    title: string;
    value: string;
    level: string;
    date?: string;
  }>;
  dataDisplayData: Array<{
    Id: string;
    Status: string;
    Date: string;
  }>;
  selectedBank: string;
}


export interface BankAccount {
  id: string;
  accountNumber: string;
  name: string;
  availableBalance: number;
  origin: string;
  cif?: string;
  emailVerified?: boolean;
  status?: string
}
