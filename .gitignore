Exceptions from SQL: (3) [{…}, {…}, {…}]
feeGetByCifUseCase.js:167
arg1 =
(3) [{…}, {…}, {…}]
0 =
{code: 1, name: 'Account Maintenance Fee', defaultValue: '0', tooltip: '', isException: true}
code =
1
defaultValue =
'0'
isException =
true
name =
'Account Maintenance Fee'
tooltip =
''
[[Prototype]] =
Object
1 =
{code: 4, name: 'FX Outgoing Wire Fee', defaultValue: '0', tooltip: '', isException: true}
code =
4
defaultValue =
'0'
isException =
true
name =
'FX Outgoing Wire Fee'
tooltip =
''
[[Prototype]] =
Object
2 =
{code: 8, name: 'FX Outgoing Wire (SafraLink) Fee', defaultValue: '0', tooltip: '', isException: true}
code =
8
defaultValue =
'0'
isException =
true
name =
'FX Outgoing Wire (SafraLink) Fee'
tooltip =
''
[[Prototype]] =
Object
length =
3
[[Prototype]] =
Array(0)
[[Prototype]] =
Object
groupedFees getExceptionFeesFromSQL: {Customer Fees: {…}, Bank Account Fees: {…}, Investment Account Fees: {…}}
feeGetByCifUseCase.js:169
arg1 =
{Customer Fees: {…}, Bank Account Fees: {…}, Investment Account Fees: {…}}

feeGroups =
(2) [model, model]
0 =
model {$__: InternalCache, _doc: {…}}
__v =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
_doc =
{name: 'Standard Fees', code: 1, fields: Proxy(Array), cif: 'K016665', accountNumber: '99010118', …}
_id =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
$__ =
InternalCache {activePaths: ctor, pathsToScopes: {…}}
$locals =
ƒ () {\n    if (this.$__.locals == null) {\n      this.$__.locals = {};\n    }\n    return this.$__.locals;\n  }
$op =
ƒ () {\n    return this.$__.op || null;\n  }
accountNumber =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
cif =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
code =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
createdAt =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
entityCode =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
errors =
ƒ () {\n    return this.$errors;\n  }
fields =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
id =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
isNew =
ƒ () {\n    return this.$isNew;\n  }
kycMailingStatus =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
name =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
updatedAt =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
visible =
ƒ () {\n        return this[getSymbol].call(this.$__[scopeSymbol] || this, path);\n      }
[[Prototype]] =
Model
1 =
model {$__: InternalCache, _doc: {…}}



    // Buscar exceções do SQL
    const exceptions = await this.#getExceptionFeesFromSQL(feePackageId);
    console.log('Exceptions from SQL:', exceptions);

    console.log('groupedFees getExceptionFeesFromSQL:', groupedFees);

    // Retornar groupedFees e accounts
    return { groupedFees: Object.values(groupedFees), accounts };
  }
