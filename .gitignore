/* ─────────── Ajuste “Client Current” (custody & equity/options) ─────────── */
function patchClientCurrent(customerAccount, feesArr) {
  const invFee = feesArr.find(f => f.feeType === 'Investment Account Fees');
  if (!invFee) return;

  /* agrupa feeGroups por accountNumber+entityCode */
  const key = g => `${g.accountNumber ?? ''}::${g.entityCode ?? ''}`;

  const stdMap  = new Map();   // Standard  por conta
  const currMap = new Map();   // Current   por conta

  invFee.feeGroups.forEach(g => {
    if (g.name === 'Standard Fees')       stdMap.set(key(g), g);
    if (g.name === 'Client Current Fees') currMap.set(key(g), g);
  });

  /* ------------ percorre cada conta que possua Client Current ------------ */
  for (const [k, currGrp] of currMap.entries()) {
    const stdGrp = stdMap.get(k);
    if (!stdGrp) continue;                     // não deveria acontecer

    /* -------- custody (code 6) -------- */
    const custodyAcc = customerAccount
      .find(a => a.feeType === 6 &&
                 `${a.bpsAcctNumber ?? ''}::${a.entity}` === k);

    if (custodyAcc) {
      const fld6 = currGrp.fields.find(f => f.code === 6);
      if (fld6) {
        fld6.defaultValue = custodyAcc.feeCode;               // A053…
        fld6.labelValue   = numberToCurrency(custodyAcc.feeAmount);
      }
    }

    /* -------- equity + option (code 7) -------- */
    const fldCurr7 = currGrp.fields.find(f => f.code === 7);
    const fldStd7  = stdGrp .fields.find(f => f.code === 7);

    if (fldCurr7 && fldStd7) {
      // usa exatamente o valor/descrição já montados no grupo Standard
      fldCurr7.defaultValue = fldStd7.defaultValue;   // “E3”, “B6” …
      fldCurr7.labelValue   = fldStd7.labelValue;     // “E3 – Equity: …; Option: …”
    }
  }
}
