import { FeeCase } from '#src/models/entities/FeeCase.js'
import Result from '#features/shared/result.js'
import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js'

export default class FeeGetByCifUseCase {
  async execute({ customerAccount }) {
    global.logger.info('FeeGetByCifUseCase()')

    const cifno = customerAccount[0].cifno

    // 🔍 1️⃣ Buscar os dados de Fees (Standard e Current)
    const feesData = await this.#getFeesFromSQL(cifno)
    console.log("🔍 Fees Data retornado:", feesData)

    if (!feesData.length) {
      return Result.fail({ message: "No data found for this CIF" })
    }

    // 🔍 2️⃣ Identificar Fee Package ID e Exception Fees
    const feePackageId = feesData[0]['Default Fee Package Id'] || null
    console.log(`🔍 Fee Package ID encontrado: ${feePackageId}`)

    const exceptionData = feePackageId
      ? await this.#getExceptionFeesFromSQL(feePackageId)
      : []

    console.log("🔍 Exception Fees retornado:", exceptionData)

    // 🔍 3️⃣ Criando JSON Final com TODOS os dados
    const result = {
      cif: cifno,
      customerAccountOfficer: feesData[0].Officer || '',
      officerId: feesData[0].OfficerId || '',
      branchCity: feesData[0]['Branch City'] || '',
      branchState: feesData[0]['Branch State'] || '',
      feePackage: feesData[0]['Default Fee Package'] || '',
      defaultFeePackageId: feesData[0]['Default Fee Package Id'] || '',
      fees: this.#mapFeesByCategory(feesData, exceptionData),
      feesActives: await this.#getActiveFees(cifno),
      documentUrl: this.#getDocumentUrl(feePackageId),
      currentFees: this.#mapCurrentFees(feesData)
    }

    console.log("✅ JSON FINAL:", JSON.stringify(result, null, 2))
    
    return Result.ok(result)
  }

  /**
   * 🔍 1️⃣ Buscar Standard e Current Fees do SQL
   */
  async #getFeesFromSQL(cifno) {
    global.logger.info('getFeesFromSQL()')
    const connection = await connectToFeeMgmtDb()
    const recordset = await executeStoreProcedure(connection, 'sp_get_fees_byCIF', { cifno })
    console.log("🛠 Dados retornados da Procedure `sp_get_fees_byCIF`:", recordset)
    return recordset
  }

  /**
   * 🔍 2️⃣ Buscar Exception Fees por Fee Package
   */
  async #getExceptionFeesFromSQL(feePackageId) {
    global.logger.info('getExceptionFeesFromSQL()')
    const connection = await connectToFeeMgmtDb()
    const recordset = await executeStoreProcedure(connection, 'sp_get_exception_fees_bypackage', { feePackageId })
    console.log("🛠 Dados retornados da Procedure `sp_get_exception_fees_bypackage`:", recordset)
    return recordset
  }

  /**
   * 🔍 3️⃣ Buscar Fees Ativos (Casos Pendentes)
   */
  async #getActiveFees(cifno) {
    const feesActives = await FeeCase.find({
      cif: cifno,
      status: { $nin: ['DONE', 'REJECTED'] },
      caseNumber: { $exists: true }
    })

    return feesActives.map((x) => ({
      caseNumber: x.caseNumber,
      id: x.id
    }))
  }

  /**
   * 🔍 4️⃣ Organiza os Fees (Standard, Current, Exception)
   */
  #mapFeesByCategory(feesData, exceptionData) {
    console.log("📌 Iniciando organização dos Fees...")

    const mappedFees = []

    feesData.forEach(record => {
      const isException = record.StandardException === 'Exception'
      const isCurrentClient = record.FeeAmount > 0

      const field = {
        code: record.FeeCode,
        name: record.FeeDescription,
        defaultValue: record['Default Fee Amount'] || '',
        isStandard: !isException,
        isException: isException,
        isCurrentClient: isCurrentClient,
        labelValue: record.FeeAmount ? `$${record.FeeAmount}.00` : '',
        frequency: record.Frequency || '',
        defaultFrequency: record['Default Frequency'] || '',
        exceptionOptions: isException ? this.#parseExceptionOptions(exceptionData, record) : []
      }

      let feeGroup = mappedFees.find(f => f.feeType === record.FeeType)
      if (!feeGroup) {
        feeGroup = { feeType: record.FeeType, feeGroups: [] }
        mappedFees.push(feeGroup)
      }

      let targetGroup
      if (isException) {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Exception Request')
        if (!targetGroup) {
          targetGroup = { name: 'Exception Request', fields: [] }
          feeGroup.feeGroups.push(targetGroup)
        }
      } else if (isCurrentClient) {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Client Current Fees')
        if (!targetGroup) {
          targetGroup = { name: 'Client Current Fees', fields: [] }
          feeGroup.feeGroups.push(targetGroup)
        }
      } else {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Standard Fees')
        if (!targetGroup) {
          targetGroup = { name: 'Standard Fees', fields: [] }
          feeGroup.feeGroups.push(targetGroup)
        }
      }

      targetGroup.fields.push(field)
    })

    return mappedFees
  }

  /**
   * 🔍 5️⃣ Converte ExceptionOptions para o formato correto
   */
  #parseExceptionOptions(exceptionData, record) {
    console.log(`📌 Mapeando Exception Options para FeeCode: ${record.FeeCode}`)
    
    return exceptionData
      .filter(exc => exc.FeeCode === record.FeeCode)
      .map(exc => ({
        value: exc.Amount,
        text: `$${exc.Amount}.00`,
        visible: true,
        retired: false
      }))
  }

  /**
   * 🔍 6️⃣ Determina a URL do Documento baseado no Fee Package
   */
  #getDocumentUrl(feePackageId) {
    const scheduleUrls = global.environment.scheduleUrls
    const packageMap = {
      1: 'intlPB3',
      2: 'uSPBIndividual3',
      3: 'uSPBCorporation3',
      4: 'efraPB3',
      5: 'eraPB3'
    }

    const scheduleType = packageMap[feePackageId] || 'intlPB3'
    console.log(`🔍 Mapeando Schedule Type para Fee Package ${feePackageId}: ${scheduleType}`)
    
    return scheduleUrls[scheduleType] || ''
  }

  /**
   * 🔍 7️⃣ Mapear os valores de "currentFees"
   */
  #mapCurrentFees(feesData) {
    console.log("📌 Iniciando mapeamento dos Current Fees...")
    
    return feesData
      .filter(record => record.FeeAmount > 0)
      .map(record => ({
        feeDescription: `${record.FeeDescription} - $${record.FeeAmount}.00`,
        feeCode: `${record.FeeType} ${record.ACCTNO}`
      }))
  }
}
