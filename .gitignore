// ...seu código...
// [Após const mockData = [] e antes do return]
const approvalsSteps = (Array.isArray(history.data) ? history.data.flat() : [])
    .filter(s => s.name?.startsWith("Approvals and Restrictions"));

// [No return]
return {
    status: history.status,
    data: mockData.map(item => [item]),
    approvalsSteps, // <--- Add isso
    // outros campos...
};



// imports...
import { useState } from "react";
import TimelineApprovalsModal from "./TimelineApprovalsModal";

export default function History({ data, approvalsSteps, ... }) {
  const [showModal, setShowModal] = useState(false);

  // ...no render, na timeline:
  .map((item, idx, flat) => {
    // checa se é o step agrupado:
    const isApprovalsStep = item.name === "Approvals and Restrictions";
    // ...
    return (
      <Fragment key={item.key}>
        <Timeline.Step progress={!isLast} status={statusValue}>
          <div className="relative flex flex-col items-center justify-center overflow-visible min-h-[180px]">
            {isApprovalsStep ? (
              <>
                <span
                  onMouseEnter={() => setShowModal(true)}
                  onMouseLeave={() => setShowModal(false)}
                  // ou onClick, se preferir abrir no click
                  style={{ cursor: "pointer" }}
                >
                  <Timeline.Circle status={statusValue} />
                  <Timeline.Text>{item.name}</Timeline.Text>
                </span>
                <TimelineApprovalsModal
                  open={showModal}
                  onClose={() => setShowModal(false)}
                  data={approvalsSteps}
                />
              </>
            ) : (
              <>
                <Timeline.Circle status={statusValue} />
                <Timeline.Text>{item.name}</Timeline.Text>
              </>
            )}
          </div>
        </Timeline.Step>
      </Fragment>
    );
  })
}



import React from "react";
import Timeline from "./Timeline/timeline"; // supondo import igual

export default function TimelineApprovalsModal({ open, onClose, data }) {
  if (!open) return null;
  // CSS de modal pode ser adaptado ou trocar por popover da lib que preferir

  return (
    <div className="fixed z-50 top-0 left-0 w-full h-full bg-black/30 flex items-center justify-center">
      <div className="bg-white rounded-lg p-8 min-w-[400px] relative">
        <button className="absolute top-2 right-2" onClick={onClose}>
          ✕
        </button>
        <div className="mb-4 font-semibold">Approvals and Restrictions Details</div>
        <Timeline
          data={data.map((step) => [step])}
        />
      </div>
    </div>
  );
}




