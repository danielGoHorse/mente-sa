"use client";
import React, { useEffect } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/Tabs";
import CreationContent from "./content/CreationContent";
import ValidationContent from "./content/ValidationsContent";
import { Documents } from "@/components/Documents";
import { useAuthStore } from "@/app/store/auth/authStore";
import { useDocumentStore } from "@/app/store/documentsStore/documentStore";
import { Document } from "@/app/store/types";
import RequestConfigProvider from "@/app/providers/getRequestProvider";
import { TabsNavigation } from "@/components/TabsNavigation";
import Requests from "@/components/Requests";
import History from "@/components/history/History";
import { toHistoryData } from "@/app/utils/toHistoryData";
import { parseHistoryToData } from "@/app/utils/parseHistoryToData";

type IPageTabsParams = {
  params: {
    requestName: string;
    requestId?: string;
  };
  tabTriggerType: string;
};

export default function PageTabs({ params, tabTriggerType }: IPageTabsParams) {
  const { getRequestConfig } = RequestConfigProvider(params.requestId);
  const { userData } = useAuthStore((state) => state);
  const { documentList, setDocumentList } = useDocumentStore((state) => state);
  const { isLoading, isFetching, data } = getRequestConfig;

  // Exemplo de uso:

  
  const mockJson = getRequestConfig.data && getRequestConfig.data.data
  ? parseHistoryToData(getRequestConfig.data)
  : null;

  console.log("mockJsonmockJsonmockJsonmockJsonmockJsonmockJsonmockJson",mockJson )

  
 if(mockJson){
  // console.log('>>>>>>>>>>>>',JSON.stringify(mockJson, null, 2));
 }

  const validationStatus = data?.timeline
    ?.flat()
    ?.find((item: any) => item?.name?.includes("Validation"));

  useEffect(() => {
    setDocumentList([]);

    return () => {
      setDocumentList([]);
    };
  }, []);

  if (!data) {
    return;
  }

  const historyData = toHistoryData(data);

  // console.log('historyData', historyData)

  return (
    <Tabs
      defaultValue={tabTriggerType}
      className="min-h-screen w-full py-7 px-6"
    >
      <TabsList>
        <TabsTrigger
          value="request"
          className="-mb-1 rounded-t-lg font-figtree flex h-[45px] cursor-pointer flex-row items-center justify-center bg-background-primary text-sm font-normal text-[#636574] aria-selected:!bg-white aria-selected:text-[#1e2347]"
        >
          {data.caseNumber ? (
            <>{`Request: ${data.caseNumber}`}</>
          ) : (
            "New Request"
          )}
        </TabsTrigger>
        <TabsTrigger
          value="documents"
          className="-mb-1 rounded-t-lg font-figtree flex h-[45px] cursor-pointer flex-row items-center justify-center bg-background-primary text-sm font-normal text-[#636574] aria-selected:!bg-white aria-selected:text-[#1e2347]"
        >
          Documents
        </TabsTrigger>
        <TabsTrigger
          value="history"
          className="-mb-1 rounded-t-lg font-figtree flex h-[45px] cursor-pointer flex-row items-center justify-center bg-background-primary text-sm font-normal text-[#636574] aria-selected:!bg-white aria-selected:text-[#1e2347]"
        >
          History
        </TabsTrigger>
      </TabsList>

      <TabsContent value="request">
        {validationStatus.status === "pending" ? (
          <Requests data={data} />
        ) : (
          <div className="w-full ">
            <TabsNavigation
              tabs={[
                {
                  label: "Creation",
                  content: <CreationContent data={data} />,
                },
                {
                  label: "Validations",
                  content: <ValidationContent />,
                } /*,
                // {
                //   label: "Acceptance",
                //   content: <AcceptanceContent />,
                // },
                // {
                //   label: "Callback",
                //   content: <CallbackContent />,
                // },*/,
              ]}
              initialTab={0}
            />
          </div>
        )}
      </TabsContent>

      <TabsContent
        value="documents"
        className="mt-0 rounded-b-lg rounded-r-lg bg-[white] aria-selected:block rounded-lg p-6"
      >
        {
          <Documents
            baseUrl={process.env.NEXT_PUBLIC_BASE_URL ?? ""}
            bucketName="conductor-client"
            pathUrl="/v1/file"
            getListDocument={documentList ?? []}
            showUploader={true}
            userData={userData}
            onUploadDocuments={(documents: Document[]) =>
              setDocumentList(documents)
            }
          />
        }
      </TabsContent>
      <TabsContent
        value="history"
        className="mt-0 rounded-b-lg rounded-r-lg bg-white p-6"
      >
        <History
          status={historyData.status}
          data={historyData.data}
          cardRowData={historyData.cardRowData}
          dataDisplayData={historyData.dataDisplayData}
          selectedBank={historyData.selectedBank}
          approvalsSteps={historyData.approvalsSteps}
        />
      </TabsContent>

      <TabsContent value="history">{<p>History</p>}</TabsContent>
    </Tabs>
  );
}
