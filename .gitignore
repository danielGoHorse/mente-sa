export const apiPathAddress = {
  feeManagement: "/v1/conductor/fee",
  uploadDocuments: "/v1/file",
  customerSearch: "/customer/v1",
  feeCaseCreate: "/v1/fee/case",
  userAuthentication: "/user-management/v1/authentication",
  conductorFeeManagement: "",
  conductorCustomer: "/v1/conductor/customer",
};

export const apiConstants = {
  realm: "SNB-Internal",
  profile: "employee",
};

Aqui abaixo, encontrei na pasta models algo que possa ser util:
========================================================================

import { CustomerException } from '#src/models/CustomerExceptions.js'
import { Fee } from '#src/models/entities/Fees.js'

export const customerExceptions = async () => {
  const result = await Fee.find()
  const customer = result.filter((x) => x.feeType === 'Customer Fee')[0]
  const bank = result.filter((x) => x.feeType === 'Bank Account Fee')[0]

  const clientCurrentFees = customer.feeGroups.filter(
    (item) => item.name === 'Client Current Fees'
  )[0]

  const bankAccounts = bank.feeGroups.filter(
    (item) => item.name === 'Client Current Fees'
  )[0]

  for (const field of clientCurrentFees.fields) {
    field.defaultValue = 'Waived'
  }

  for (const field of bankAccounts.fields) {
    field.defaultValue = 'Waived'
  }

  return [
    new CustomerException({
      cif: 'CUSTOMER01',
      customerValues: clientCurrentFees
    }),
    new CustomerException({
      cif: 'CUSTOMER01',
      customerValues: bankAccounts
    })
  ]
}

============================================================================
import { FeeGroup } from '#src/models/entities/FeeGroups.js'
import { Fee } from '#src/models/entities/Fees.js'
import { Field } from '#src/models/entities/Fields.js'

export const fees = [
  new Fee({
    feeType: 'Customer Fees',
    feeGroups: [
      new FeeGroup({
        name: 'Standard Fees',
        code: 1,
        fields: [
          new Field({
            code: 1,
            name: 'Account Maintenance',
            defaultValue: '1200',
            isStandard: true
          }),
          new Field({
            code: 2,
            isStandard: true,
            name: 'Hold Mail',
            defaultValue: '600'
          })
        ]
      }),
      new FeeGroup({
        name: 'Client Current Fees',
        code: 1,
        fields: [
          new Field({
            code: 1,
            name: 'Account Maintenance',
            defaultValue: '1200',
            isCurrentClient: true
          }),
          new Field({
            code: 2,
            name: 'Hold Mail ',
            isCurrentClient: true,
            defaultValue: '600'
          })
        ]
      }),
      new FeeGroup({
        name: 'Exception Request',
        code: 1,
        fields: [
          new Field({
            code: 1,
            name: 'Account Maintenance',
            defaultValue: '1200',
            isException: true,
            exceptionOptions: [
              {
                value: '1200',
                text: '$1200'
              },
              {
                value: '0',
                text: 'Waived'
              }
            ]
          }),
          new Field({
            code: 2,
            name: 'Hold Mail ',
            defaultValue: '600',
            isException: true,
            exceptionOptions: [
              {
                value: '600',
                text: '$600'
              },
              {
                value: '0',
                text: 'Waived'
              }
            ]
          })
        ]
      })
    ]
  }),
  new Fee({
    feeType: 'Bank Account Fees',
    feeGroups: [
      new FeeGroup({
        name: 'Standard Fees',
        code: 2,
        fields: [
          new Field({
            code: 3,
            name: 'Incoming Wire',
            defaultValue: '10',
            isStandard: true
          }),
          new Field({
            code: 4,
            isStandard: true,
            name: 'Outgoing Wire',
            defaultValue: '75'
          })
        ]
      }),
      new FeeGroup({
        name: 'Client Current Fees',
        code: 2,
        fields: [
          new Field({
            code: 3,
            name: 'Incoming Wire',
            defaultValue: '10',
            isCurrentClient: true
          }),
          new Field({
            code: 4,
            isCurrentClient: true,
            name: 'Outgoing Wire',
            defaultValue: '75'
          })
        ]
      }),
      new FeeGroup({
        name: 'Exception Request',
        code: 2,
        fields: [
          new Field({
            code: 3,
            name: 'Incoming Wire',
            defaultValue: '0',
            isException: true,
            exceptionOptions: [
              {
                value: '10',
                text: '$10'
              },
              {
                value: '0',
                text: 'Waived'
              }
            ]
          }),
          new Field({
            code: 4,
            name: 'Outgoing Wire',
            defaultValue: '0',
            isException: true,
            exceptionOptions: [
              {
                value: '75',
                text: '$75'
              },
              {
                value: '60',
                text: '$60'
              },
              {
                value: '50',
                text: '$50'
              },
              {
                value: '30',
                text: '$30'
              },
              {
                value: '20',
                text: '$20'
              },
              {
                value: '10',
                text: '$10'
              }
            ]
          })
        ]
      })
    ]
  }),
  new Fee({
    feeType: 'Investment Account Fees',
    feeGroups: [
      new FeeGroup({
        name: 'Standard Fees',
        code: 3,
        fields: [
          new Field({
            code: 6,
            isStandard: true,
            name: 'Safekeeping-Custody',
            defaultValue: 'A021'
          }),
          new Field({
            code: 5,
            isStandard: true,
            name: 'SSL Account Maintenance',
            defaultValue: '375'
          }),
          new Field({
            code: 7,
            isStandard: true,
            name: 'Equity and Options Commission',
            defaultValue: 'E3'
          })
        ]
      }),
      new FeeGroup({
        name: 'Client Current Fees',
        code: 3,
        fields: [
          new Field({
            code: 6,
            isCurrentClient: true,
            name: 'Safekeeping-Custody',
            defaultValue: 'A021'
          }),
          new Field({
            code: 5,
            isCurrentClient: true,
            name: 'SSL Account Maintenance',
            defaultValue: '375'
          }),
          new Field({
            code: 7,
            isCurrentClient: true,
            name: 'Equity and Options Commission',
            defaultValue: 'E3'
          })
        ]
      }),
      new FeeGroup({
        name: 'Exception Request',
        code: 3,
        fields: [
          new Field({
            code: 6,
            isException: true,
            name: 'Safekeeping-Custody',
            defaultValue: '0',
            exceptionOptions: [
              {
                value: 'A021',
                text: '0.35% per year with a minimum of $375.00 per quarter'
              }
            ]
          }),
          new Field({
            code: 5,
            isException: true,
            name: 'SSL Account Maintenance',
            defaultValue: '0',
            exceptionOptions: [
              {
                value: '375',
                text: '$375'
              },
              {
                value: '0',
                text: 'Waived'
              }
            ]
          }),
          new Field({
            code: 7,
            isException: true,
            name: 'Equity and Options Commission',
            defaultValue: '0',
            exceptionOptions: [
              {
                value: 'B6',
                text: 'Equity:$0.03 per share, with a minimum charge of $150 per trade; Option:$0.03 per share, with a minimum charge of $150 per trade'
              },
              {
                value: 'C8',
                text: 'Equity:$0.05 per share, with a minimum charge of $100 per trade; Option:$0.05 per share, with a minimum charge of $100 per trade'
              },
              {
                value: 'D2',
                text: 'Equity:$0.05 per share, with a minimum charge of $150 per trade; Option:$0.05 per share, with a minimum charge of $150 per trade'
              },
              {
                value: 'D7',
                text: 'Equity:$0.07 per share, with a minimum charge of $150 per trade; Option:$0.05 per share, with a minimum charge of $150 per trade'
              },
              {
                valeu: 'E3',
                text: 'Equity:$0.10 per share, with a minimum charge of $150 per trade; Option:$0.05 per share, with a minimum charge of $150 per trade'
              },
              {
                value: 'I3',
                text: 'Equity:100 basis points, with a minimum charge of $150 per trade; Option:100 basis points, with a minimum charge of $150 per trade'
              },
              {
                value: 'I8',
                text: 'Equity:$0.03 per share, with a minimum charge of $100 per trade; Option:$0.03 per share, with a minimum charge of $100 per trade'
              }
            ]
          })
        ]
      })
    ]
  })
]

===============================================================

import Result from '#features/shared/result.js'
import numberToCurrency from '#core/helpers/currency.js'
import { FeeCase } from '#src/models/entities/FeeCase.js'
import { Field } from '#src/models/entities/Fields.js'
import { Fee } from '#src/models/entities/Fees.js'
const { logger } = global

export default class FeeCaseCreateUseCase {
  async execute(feeTicketRequest) {
    logger.info('FeeCaseCreateUseCase()')
    const feeTicket = new FeeCase(feeTicketRequest)

    const fieldsDataBase = await this.#getFeeStandard([
      {
        feeType: 'Customer Fees'
      },
      {
        feeType: 'Bank Account Fees'
      },
      {
        feeType: 'Investment Account Fees'
      }
    ])

    const allExceptions = this.#returnAllExceptions(fieldsDataBase)

    logger.info('validateSync()')
    const validate = feeTicket.validateSync()

    if (validate && validate?.errors) {
      return Result.fail(validate.errors)
    }
    let hasAnyChange = false
    for (const fee of feeTicket.fees) {
      for (const [groupIndex, group] of fee.feeGroups.entries()) {
        for (const [fieldIndex, field] of group.fields.entries()) {
          if (field.isException) {
            // se for uma exception, verifica se é uma alteração
            const newValue =
              field.defaultValue !==
              fee.feeGroups[groupIndex - 1].fields[fieldIndex].defaultValue
            const validValue =
              !!field.defaultValue && field.defaultValue !== 'NOT APPLICABLE'
            field.hasChanged = newValue && validValue

            if (field.hasChanged) {
              hasAnyChange = true
              fee.hasAnyChange = true
              group.hasAnyChange = true
              fee.feeGroups[groupIndex - 1].hasAnyChange = true
              fee.feeGroups[groupIndex - 2].hasAnyChange = true
            }

            if (!field.hasChanged) {
              field.defaultValue =
                fee.feeGroups[groupIndex - 1].fields[fieldIndex].defaultValue
            }
          }

          if (/^\d+$/.test(field.defaultValue)) {
            // se o defaultvalue tiver apenas digitos
            field.labelValue = numberToCurrency(field.defaultValue)
            continue
          }

          // safekeeping ou equity
          if (field.labelValue === 'Other') {
            const other = field.exceptionOptions.filter(
              (x) => x.text === 'Other'
            )[0]
            const fieldEquities = (
              await Field.find({
                code: 7,
                isException: true
              })
            )[0]

            field.exceptionOptions = [...fieldEquities.exceptionOptions, other]
          } else if (
            !field.labelValue ||
            !field.labelValue.includes(field.defaultValue)
          ) {
            let exception = allExceptions.find(
              (e) => e.value === field.defaultValue
            )

            if (!exception) {
              exception = { text: '' }
            }

            field.labelValue = exception.text
          }
        }
      }
    }

    if (!hasAnyChange) {
      return Result.fail('Cannot create Fee Case without any change.')
    }

    feeTicket.fees = feeTicket.fees.filter((x) => x.hasAnyChange)
    feeTicket.fees?.forEach((item) => {
      item.feeGroups = item.feeGroups.filter((x) => x.hasAnyChange)
    })

    try {
      const model = await feeTicket.save()
      return Result.ok(model.toObject())
    } catch (err) {
      logger.error(err)
      return Result.fail('Error when try to save Fee Case')
    }
  }

  async #getFeeStandard(filter) {
    logger.info('getFeeStandard()')
    const feeResult = []

    for await (const fee of Fee.find({
      $or: filter
    }).select({
      feeGroups: {
        fields: 1,
        code: 1
      }
    })) {
      feeResult.push(fee.toObject())
    }

    return feeResult
  }

  #returnAllExceptions(fees) {
    logger.info('returnAllExceptions()')
    const allExceptions = new Set()
    fees.forEach((fee) => {
      fee.feeGroups.forEach((feeGroup) => {
        feeGroup.fields.forEach((field) => {
          if (field.isException) {
            field.exceptionOptions.forEach(allExceptions.add, allExceptions)
          }
        })
      })
    })
    return Array.from(allExceptions)
  }
}


=================================================================================

import { Router } from 'express'
import feeCaseCreateEndpoint from './feeCaseCreateEndpoint.js'

const feeCaseCreateRouter = Router()

feeCaseCreateRouter.post('/fee/case', feeCaseCreateEndpoint)

export default feeCaseCreateRouter


===========================================
import FeeCaseCreateUseCase from './feeCaseCreateUseCase.js'
import ApiResponse from '#core/http/apiResponse.js'

export default async function feeCaseCreateEndpoint(req, res) {
  const useCase = new FeeCaseCreateUseCase()
  const result = await useCase.execute(req.body)

  if (result.isFailure) {
    const badRequestResponse = ApiResponse.createBadRequestResponse({
      error: result.error
    })
    return res.status(badRequestResponse.code).json(badRequestResponse)
  }

  const okResponse = ApiResponse.createOkResponse(result.value)

  res.json(okResponse)
}


