async execute({ customerAccount }) {
  const result = { fees: [] };

  // Buscar dados estruturados e accounts
  const { groupedFees, accounts } = await this.#getFeesStructuredFromSQL(customerAccount);

  // Passar `accounts` no lugar de `customerAccount`
  const customer = new CustomerFees(groupedFees, accounts);
  if (customer.fee) result.fees.push(customer.fee);

  const bank = new BankAccountFee(groupedFees, accounts);
  if (bank.fee) result.fees.push(bank.fee);

  const equityField = await Field.find({ code: 7 });
  const investiment = new InvestimentAccountFee(
    groupedFees,
    accounts,
    equityField[0]
  );
  if (investiment.fee?.feeGroups) result.fees.push(investiment.fee);

  const feesActives = await FeeCase.find({
    cif: customerAccount[0].cifno,
    status: {
      $nin: ['DONE', 'REJECTED']
    },
    caseNumber: {
      $exists: true
    }
  });

  result.feesActives = feesActives?.map((x) => ({
    caseNumber: x.caseNumber,
    id: x.id
  }));

  result.documentUrl =
    'https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=U2NoZWR1bGVPZkZlZXMucGRm';

  return Result.ok(result);
}
