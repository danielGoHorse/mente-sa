/* eslint‑disable camelcase */
import { Fee }               from '#src/models/entities/Fees.js';
import Result                from '#features/shared/result.js';
import CustomerFees          from '#src/models/CustomerFees.js';
import BankAccountFee        from '#src/models/BankAccountFee.js';
import InvestimentAccountFee from '#src/models/InvestimentAccountFee.js';
import { FeeCase }           from '#src/models/entities/FeeCase.js';
import { Field }             from '#src/models/entities/Fields.js';
import numberToCurrency      from '#core/helpers/currency.js';
import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js';

/* ───────────── Helpers SQL ───────────── */

async function getPackageData (cifno) {
  const conn  = await connectToFeeMgmtDb();
  const [row] = await executeStoreProcedure(conn, 'sp_get_fees_byCIF', { cifno });
  if (!row) return {};

  return {
    defaultFeePackageId : row['Default Fee Package Id'] ?? null,
    branchCity          : row['Branch City']?.trim()          || '',
    branchState         : row['Branch State']?.trim()         || '',
    branchType          : row['Branch Type']?.trim()          || '',
    defaultPackageType  : row['Default Package Type']?.trim() || '',
    feePackage          : row['Default Fee Package']?.trim()  || ''
  };
}

async function getStandardFees (packageId) {
  const conn = await connectToFeeMgmtDb();
  const rows = await executeStoreProcedure(
    conn,
    'sp_get_standard_fees_bypackage',
    { FeePackageId: packageId }
  );
  return rows ?? [];
}

async function getExceptionFees (packageId) {
  const conn = await connectToFeeMgmtDb();
  const rows = await executeStoreProcedure(
    conn,
    'sp_get_exception_fees_bypackage',
    { FeePackageId: packageId }
  );
  return rows ?? [];
}

function getDocumentUrl (id) {
  const urls = global.environment.scheduleUrls || {};
  const key  = ({ 1: 'intlPB3', 2: 'uSPBIndividual3', 3: 'uSPBCorporation3' })[id];
  return key ? urls[key] || '' : '';
}

/* ───────────── Helpers Mongo ───────────── */

async function getFeeStandard (filter) {
  return Fee.find({ $or: filter })
            .select({ feeType: 1, feeGroups: { name: 1, fields: 1, code: 1 } })
            .lean();
}

const feeCodeMap = {
  /* JHA */
  JH001: 1,      // Account Maintenance
  JH002: 2,      // Hold‑Mail
  JH010: 3,      // Incoming Wire
  JH008: 4,      // Outgoing Wire
  /* BPS – todos apontam para o field‑code 6 (custody) no Investment */
  BPS002: 6,     // Safekeeping
  BPS003: 6,     // SSL Acc. Maint.
  BPS004: 6,     // Equity Comm
  BPS005: 6      // Option Comm
};

const isNumeric = value => !isNaN(Number(value));

function findGroup (fee, name) {
  return fee?.feeGroups?.find(g => g.name === name);
}

/* ───────────── Aplicadores ───────────── */

function applyStandardAmounts (mongoFees, stdRows) {
  mongoFees.forEach(fee => {
    const stdGrp = findGroup(fee, 'Standard Fees');
    if (!stdGrp) return;

    stdGrp.fields.forEach(field => {
      const row = stdRows.find(r => parseInt(r.FeeType, 10) === field.code);
      if (!row) return;

      const rawVal = row.FeeAmount?.toString() ?? '';
      field.defaultValue = rawVal;
      field.labelValue   = isNumeric(rawVal)
        ? numberToCurrency(Number(rawVal))
        : row.FreqDescription?.trim() || rawVal;
    });
  });
}

function applyExceptionAmounts (mongoFees, excRows) {
  const byCode = excRows.reduce((acc, r) => {
    (acc[r.FeeCode] ??= []).push(r);
    return acc;
  }, {});

  mongoFees.forEach(fee => {
    const excGrp = findGroup(fee, 'Exception Request');
    if (!excGrp) return;

    excGrp.fields.forEach(field => {
      const code = Object.entries(feeCodeMap)
                         .find(([, c]) => c === field.code)?.[0];
      const rows = code ? byCode[code] : null;
      if (!rows?.length) return;

      field.exceptionOptions = rows.map(r => ({
        value  : r.Amount.toString(),
        text   : isNumeric(r.Amount)
                   ? numberToCurrency(Number(r.Amount))
                   : r.FreqDescription?.trim() || r.Amount,
        visible: true,
        retired: false
      }));

      field.defaultValue = '';
      field.labelValue   = '';
    });
  });
}

function syncExceptionLabels (feesArr) {
  feesArr.forEach(fee => {
    const excGrp = findGroup(fee, 'Exception Request');
    if (!excGrp) return;

    excGrp.fields.forEach(f => {
      if (!f.defaultValue) {
        f.labelValue = '$0.00';
        return;
      }

      f.labelValue = isNumeric(f.defaultValue)
        ? numberToCurrency(Number(f.defaultValue))
        : f.exceptionOptions.find(o => o.value === f.defaultValue)?.text
            || f.defaultValue;
    });
  });
}

/* ───────────── Use‑Case ───────────── */

export default class FeeGetByCifUseCase {
  async execute ({ customerAccount }) {
    /* 1. Carrega modelo Mongo */
    const fees = await getFeeStandard([
      { feeType: 'Customer Fees' },
      { feeType: 'Bank Account Fees' },
      { feeType: 'Investment Account Fees' }
    ]);

    /* 2. Dados do pacote */
    const pkgData   = await getPackageData(customerAccount[0].cifno);
    const packageId = pkgData.defaultFeePackageId;

    /* 3. SQL */
    const stdRows = await getStandardFees (packageId);
    const excRows = await getExceptionFees(packageId);

    /* 4. Aplica nos objetos Mongo */
    applyStandardAmounts (fees, stdRows);
    applyExceptionAmounts(fees, excRows);

    /* 5. Enriquecimento das contas */
    customerAccount.forEach(acc => {
      Object.assign(acc, pkgData);
      const exc = excRows.find(e => e.FeeCode === acc.feeCode);
      if (exc) acc.exceptionAmount = exc.Amount;
    });

    /* 6. Monta retorno */
    const result = { fees: [] };
    const [customer, bank, investment] = [
      new CustomerFees      (fees, customerAccount),
      new BankAccountFee    (fees, customerAccount),
      new InvestimentAccountFee(
        fees,
        customerAccount,
        await Field.findOne({ code: 7 })
      )
    ];

    [customer, bank, investment]
      .filter(f => f.fee && f.fee.feeGroups?.length)
      .forEach(f => result.fees.push(f.fee));

    /* Casos ativos */
    const actives = await FeeCase.find({
      cif       : customerAccount[0].cifno,
      status    : { $nin: ['DONE', 'REJECTED'] },
      caseNumber: { $exists: true }
    });
    result.feesActives = actives.map(({ caseNumber, id }) => ({ caseNumber, id }));

    /* Docs + contas */
    const docUrl = getDocumentUrl(packageId);
    result.accounts = customerAccount.map(acc => ({
      cifno              : acc.cifno,
      ddaNumber          : acc.ddaNumber,
      branchCity         : acc.branchCity,
      branchState        : acc.branchState,
      branchType         : acc.branchType,
      defaultPackageType : acc.defaultPackageType,
      feePackage         : acc.feePackage,
      defaultFeePackageId: acc.defaultFeePackageId,
      defaultFeePackage  : acc.defaultFeePackage,
      documentUrl        : docUrl,
      feeAmount          : acc.feeAmount,
      exceptionAmount    : acc.exceptionAmount ?? null
    }));
    result.documentUrl = docUrl;

    /* 7. Sincroniza labels */
    syncExceptionLabels(result.fees);

    return Result.ok(result);
  }
}
