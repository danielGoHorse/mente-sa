import { ChevronLeft, ChevronRight } from "lucide-react";
import { useRef } from "react";

export default function TimelineScrollWrapper({
  children,
}: {
  children: React.ReactNode;
}) {
  const scrollRef = useRef<HTMLDivElement>(null);

  const scrollLeft = () => {
    scrollRef.current?.scrollBy({ left: -300, behavior: "smooth" });
  };

  const scrollRight = () => {
    scrollRef.current?.scrollBy({ left: 300, behavior: "smooth" });
  };

  return (
    <div className="relative">
      <button
        onClick={scrollLeft}
        className="absolute left-2 top-1/2 -translate-y-1/2 z-[60] bg-white shadow rounded-full p-1"
      >
        <ChevronLeft size={20} className="left-0" />
      </button>
      <button
        onClick={scrollRight}
        className="absolute right-2 top-1/2 -translate-y-1/2 z-[60] bg-white shadow rounded-full p-1"
      >
        <ChevronRight size={20} />
      </button>

      <div
        ref={scrollRef}
        className="scroll-smooth no-scrollbar w-full overflow-hidden"
       >
        <div className="flex gap-6 min-w-fit px-8 py-2 items-stretch">
          {children}
        </div>
      </div>
    </div>

    
  );
}



"use client";

import { ChevronLeft, ChevronRight } from "lucide-react";
import { useRef } from "react";

export default function CardsRowScrollWrapper({
  children,
}: {
  children: React.ReactNode;
}) {
  const scrollRef = useRef<HTMLDivElement>(null);

  const scrollLeft = () => {
    scrollRef.current?.scrollBy({ left: -300, behavior: "smooth" });
  };

  const scrollRight = () => {
    scrollRef.current?.scrollBy({ left: 300, behavior: "smooth" });
  };

  return (
    <div className="relative">
      {/* Setas */}
      <button
        onClick={scrollLeft}
        className="absolute left-0 top-1/2 -translate-y-1/2 z-10 bg-white shadow-md rounded-full p-1"
      >
        <ChevronLeft size={20} />
      </button>

      <button
        onClick={scrollRight}
        className="absolute right-0 top-1/2 -translate-y-1/2 z-50 bg-white shadow-md rounded-full p-1"
      >
        <ChevronRight size={20} />
      </button>

      {/* Scroll horizontal com barra oculta */}
      <div
        ref={scrollRef}
        className="no-scrollbar scroll-smooth overflow-hidden "
      >
        <div className="flex gap-6 min-w-fit px-8">{children}</div>
      </div>
    </div>
  );
}


import React, { ReactNode, useRef } from "react";
import FlagIcon from "@/app/assets/svg/flag.svg";
import CheckIcon from "@/app/assets/svg/check.svg";
import FlagGreenIcon from "@/app/assets/svg/flag-green.svg";
import CloseGrayIcon from "@/app/assets/svg/close-gray.svg";
import CloseWhiteIcon from "@/app/assets/svg/close-white.svg";
import ChevronLeftLargeIcon from "@/app/assets/svg/chevron-left-large.svg";
import ChevronRightLargeIcon from "@/app/assets/svg/chevron-right-large.svg";
import WrapperIcon from "@/app/assets/svg/Wrapper.svg"; // novo ícone quadrado
import { StaticImageData } from "next/image";
import Image from "next/image";

type StatusType = "waiting" | "pending" | "completed" | "canceled" | "skipped";

interface TimelineProps {
  children?: ReactNode;
}

interface StepProps {
  status?: StatusType;
  progress?: boolean;
  children?: ReactNode;
}

//
// Root & Scroll
//
export const TimelineRoot: React.FC<TimelineProps> = ({ children }) => (
  <div className="flex">{children}</div>
);

export const TimelineScroll: React.FC<TimelineProps> = ({ children }) => {
  const scrollRef = useRef<HTMLDivElement>(null);
  const scroll = (delta: number) => {
    if (scrollRef.current) scrollRef.current.scrollLeft += delta;
  };
  return (
    <div className="flex items-center">
      <button
        onClick={() => scroll(-100)}
        className="w-[37px] h-[56px] flex items-center justify-center rounded border border-[#DBDBDB] bg-white"
      >
        <ChevronLeftLargeIcon />
      </button>
      <div
        ref={scrollRef}
        className="flex gap-[10px] w-full overflow-x-auto whitespace-nowrap transition-all duration-300 scrollbar-none"
      >
        {children}
      </div>
      <button
        onClick={() => scroll(100)}
        className="w-[37px] h-[56px] flex items-center justify-center rounded border border-[#DBDBDB] bg-white"
      >
        <ChevronRightLargeIcon />
      </button>
    </div>
  );
};

//
// Circle
//
export const TimelineCircle: React.FC<Pick<StepProps, "status">> = ({
  status = "waiting",
}) => {
  const IconMap: Record<StatusType, StaticImageData> = {
    waiting: FlagIcon,
    pending: FlagGreenIcon,
    completed: CheckIcon,
    canceled: CloseWhiteIcon,
    skipped: CloseGrayIcon,
  };
  const BorderColorMap: Record<StatusType, string> = {
    waiting: "#DBDBDB",
    pending: "#008056",
    completed: "#008056",
    canceled: "#CA303D",
    skipped: "#DBDBDB",
  };
  const BgColorMap: Record<StatusType, string> = {
    waiting: "#FFFFFF",
    pending: "#FFFFFF",
    completed: "#008056",
    canceled: "#CA303D",
    skipped: "#F7F7F8",
  };
  const Icon = IconMap[status];
  return (
    <div
      className="w-[56px] h-[56px] flex items-center justify-center rounded-full"
      style={{
        border: `1px solid ${BorderColorMap[status]}`,
        backgroundColor: BgColorMap[status],
      }}
    >
      <Image src={Icon} alt="icon" />
    </div>
  );
};

//
// Link (quadrado com hoverContent)
//
export interface TimelineLinkProps {
  status?: StatusType;
  hoverContent?: ReactNode;
}

export const TimelineLink: React.FC<TimelineLinkProps> = ({
  status = "waiting",
  hoverContent,
}) => {
  const BorderColorMap: Record<StatusType, string> = {
    waiting: "#DBDBDB",
    pending: "#008056",
    completed: "#008056",
    canceled: "#CA303D",
    skipped: "#DBDBDB",
  };

  return (
    <div className="relative inline-block group mt-[7px]">
      <div className="w-[28px] h-[28px] flex items-center rounded-[5px] justify-center bg-white">
        <Image src={WrapperIcon} alt="IconWrapper" />
      </div>
      {hoverContent && (
        <div
          className="
            absolute top-full left-1/2 -translate-x-1/2
            mt-2 w-48 p-2 bg-white rounded shadow-lg
            opacity-0 group-hover:opacity-100 transition-opacity
          "
        >
          {hoverContent}
        </div>
      )}
    </div>
  );
};

//
// Step & Text
//
export const TimelineStep: React.FC<StepProps> = ({
  status = "waiting",
  progress = false,
  children,
}) => {
  const BorderColorMap: Record<StatusType, string> = {
    waiting: "#DBDBDB",
    pending: "#008056",
    completed: "#008056",
    canceled: "#CA303D",
    skipped: "#DBDBDB",
  };
  const borderColor = BorderColorMap[status];

  return (
    <div
      className="relative flex-1 flex flex-col items-center"
      style={{ width: 150 }}
    >
      {progress && (
        <div
          className="absolute  border-b left-[calc(55%+25px)] top-[43%] -translate-y-1/2 w-[calc(100%+10px-56px)]"
          style={{ borderColor }}
        />
      )}
      <div className="relative flex flex-col items-center gap-2">
        {children}
      </div>
    </div>
  );
};

export const TimelineText: React.FC<TimelineProps> = ({ children }) => (
  <span className="text-[12px] font-normal leading-[18px] text-[#484A55] text-center font-figtree tracking-[0.12px]">
    {children}
  </span>
);

const Timeline = {
  Scroll: TimelineScroll,
  Root: TimelineRoot,
  Step: TimelineStep,
  Circle: TimelineCircle,
  Link: TimelineLink,
  Text: TimelineText,
};
export default Timeline;



import React from 'react'
import CardsRowScrollWrapper from '../cardsRowScrollWrapper'

export interface CardsRowProps extends React.HTMLAttributes<HTMLDivElement> {
  title?: string
  data: Array<{
    title: React.ReactNode
    value: string // altere para string, se necessário!
    level?: string // altere para string, se necessário!
  }>
}

const CardsRow: React.FC<CardsRowProps> = ({ title, data }) => {
  if (!data || !Array.isArray(data)) {
    return <div>Dados inválidos</div>
  } 

  return (
    <div>
      {title && (
        <h2
          className="
            font-semibold
            text-base
            leading-6
            tracking-[0.12px]
            text-[#484A55]
            mb-4
          "
        >
          {title}
        </h2>
      )}

      <CardsRowScrollWrapper>
        {data.map((item, index) => (
          <div
            key={index}
            className="
              flex
              flex-1
              bg-[#f0f0f0]
              rounded-lg
              py-3
              px-4
              gap-4
              justify-between
              w-[250px]
            "
          >
            {/* Coluna Esquerda */}
            <div
              className={`flex flex-col ${item.level ? 'font-semibold' : ''}`}
            >
              <h3
                className="
                  font-normal
                  text-[14px]
                  leading-[21px]
                  tracking-[0.12px]
                  text-[#636574]
                  m-0
                "
              >
                {item.title}
              </h3>
              <div
                className="
                  font-semibold
                  text-[14px]
                  leading-[21px]
                  tracking-[0.12px]
                  text-[#484A55]
                "
              >
                {/* Aqui faz o split do value */}
                {item.value
                  ? item.value.split('<br/>').map((line, idx) => (
                      <div key={idx}>{line}</div>
                    ))
                  : null}
              </div>
            </div>

            {/* Coluna Direita (apenas se tiver level) */}
            {item.level && (
              <div className="flex flex-col min-w-[42px]">
                <h3
                  className="
                    font-normal
                    text-[14px]
                    leading-[21px]
                    tracking-[0.12px]
                    text-[#636574]
                    m-0
                  "
                >
                  Level
                </h3>
                <div
                  className="
                    font-semibold
                    text-[14px]
                    leading-[21px]
                    tracking-[0.12px]
                    text-[#484A55]
                  "
                >
                  {item.level
                    ? item.level.split('<br/>').map((line, idx) => (
                        <div key={idx}>{line}</div>
                      ))
                    : null}
                </div>
              </div>
            )}
          </div>
        ))}
      </CardsRowScrollWrapper>
    </div>
  )
}

export default CardsRow
