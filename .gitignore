#mapFeesByCategory(feesData, exceptionData) {
    console.log("ðŸ“Œ Iniciando organizaÃ§Ã£o dos Fees...");

    const mappedFees = [];

    feesData.forEach(record => {
      const isException = record.StandardException === 'Exception';
      const isCurrentClient = record.FeeAmount > 0;

      const field = {
        code: record.FeeCode,
        name: record.FeeDescription,
        defaultValue: record['Default Fee Amount'] || '',
        isStandard: !isException,
        isException: isException,
        isCurrentClient: isCurrentClient,
        labelValue: record.FeeAmount ? `$${record.FeeAmount}.00` : '',
        frequency: record.Frequency || '',
        defaultFrequency: record['Default Frequency'] || '',
        amount: record.FeeAmount || record['Default Fee Amount'] || 0, // ðŸ”¥ Garante que Amount SEMPRE esteja presente!
        exceptionOptions: isException ? this.#parseExceptionOptions(exceptionData, record) : []
      };

      let feeGroup = mappedFees.find(f => f.feeType === record.FeeType);
      if (!feeGroup) {
        feeGroup = { feeType: record.FeeType, feeGroups: [] };
        mappedFees.push(feeGroup);
      }

      let targetGroup;
      if (isException) {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Exception Request');
        if (!targetGroup) {
          targetGroup = { name: 'Exception Request', fields: [] };
          feeGroup.feeGroups.push(targetGroup);
        }
      } else if (isCurrentClient) {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Client Current Fees');
        if (!targetGroup) {
          targetGroup = { name: 'Client Current Fees', fields: [] };
          feeGroup.feeGroups.push(targetGroup);
        }
      } else {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Standard Fees');
        if (!targetGroup) {
          targetGroup = { name: 'Standard Fees', fields: [] };
          feeGroup.feeGroups.push(targetGroup);
        }
      }

      targetGroup.fields.push(field);
    });

    return mappedFees;
  }
