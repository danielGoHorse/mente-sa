constructor(fees, accounts) {
  // Validar fees
  if (!fees || !Array.isArray(fees) || fees.length === 0) {
    throw new Error('Fees is empty or undefined');
  }

  // Encontrar Bank Account Fees
  this.#bank = fees.filter((x) => x.feeType === 'Bank Account Fees')[0];

  if (!this.#bank || !Array.isArray(this.#bank.feeGroups)) {
    throw new Error('Bank Account Fees or feeGroups are undefined');
  }

  // Processar feeGroups
  this.#bank.feeGroups.forEach((feeGroup) => {
    feeGroup.fields = feeGroup.fields.filter((x) => x.code <= accounts.reduce((acc, item) => {
      if (item.feeType > 2) return acc;
      acc = item.feeType;
      return acc;
    }, 0));

    feeGroup.fields?.forEach((item) => {
      item.exceptionOptions = item.exceptionOptions?.filter((x) => !x.retired) || [];
    });
  });

  this.#accounts = accounts.filter(
    (x) => x.feeGroup === this.#bank.feeGroups[0].code
  );

  this.#bank.feeGroups[0].kycMailingStatus =
    accounts.find((account) => account.feeType === 2)?.kycMailingStatus || null;

  this.#bank.feeGroups[0].fields.forEach((field) => {
    field.labelValue = numberToCurrency(field.defaultValue);
  });

  // Verificar grupos adicionais, se necess√°rio
}



console.log('Fees:', fees);
console.log('Customer Account:', customerAccount);
