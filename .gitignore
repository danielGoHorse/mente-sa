// Importa módulos e classes necessários
import Result from '#features/shared/result.js';
import CustomerFees from '#src/models/CustomerFees.js';
import BankAccountFee from '#src/models/BankAccountFee.js';
import InvestmentAccountFee from '#src/models/InvestimentAccountFee.js';
import { FeeCase } from '#src/models/entities/FeeCase.js';
import {
  connectToFeeMgmtDb,
  executeStoreProcedure,
} from '#core/data/mssql/index.js';

// Mapeamento de FeeCode (do banco) para código interno
const deParaFeeCodes = {
  JH001: 1,
  JH002: 2,
  JH006: 4,
  JH007: 8,
  BPS002: 6,
  BPS003: 5,
  BPS004: 9,
  BPS005: 7,
  JH010: 3,
};

// Conjunto de códigos a serem excluídos
const excludedCodes = new Set([8]);

/**
 * Converte o FeeType vindo do banco para o formato utilizado na aplicação.
 * Exemplo: "Client Fees" é mapeado para "Customer Fees".
 *
 * @param {string} feeTypeFromDb - O feeType retornado do banco.
 * @returns {string} - O feeType mapeado para a aplicação.
 */
function mapDbFeeTypeToApp(feeTypeFromDb) {
  switch (feeTypeFromDb) {
    case 'Client Fees':
      return 'Customer Fees';
    case 'Bank Account Fees':
      return 'Bank Account Fees';
    case 'Investment Account Fees':
      return 'Investment Account Fees';
    default:
      return feeTypeFromDb;
  }
}

/**
 * Converte o feeType (em string) para um valor numérico interno.
 *
 * @param {string} feeType - O feeType da aplicação.
 * @returns {number} - Valor numérico correspondente.
 */
function mapFeeTypeToNumber(feeType) {
  switch (feeType) {
    case 'Customer Fees':
      return 1;
    case 'Bank Account Fees':
      return 2;
    case 'Investment Account Fees':
      return 3;
    default:
      return 0;
  }
}

/**
 * Classe principal que processa a obtenção das fees com base no CIF do cliente.
 * Realiza as seguintes tarefas:
 *  - Executa stored procedures para recuperar os dados de fees e de exceptions.
 *  - Estrutura os dados em grupos (Standard Fees, Client Current Fees e Exceptions Request).
 *  - Instancia classes específicas para cada tipo de fee (CustomerFees, BankAccountFee e InvestmentAccountFee).
 *  - Monta o objeto final de resposta com as informações dos fees, contas e feesActives.
 */
export default class FeeGetByCifUseCase {
  /**
   * Método principal de execução.
   * Recebe o customerAccount, processa os dados e retorna o resultado final.
   *
   * @param {Object} customerAccount - Array com as informações da conta do cliente.
   * @returns {Promise<Object>} - Resultado com fees, contas e feesActives.
   */
  async execute({ customerAccount }) {
    const result = { fees: [] };

    // Recupera os dados estruturados (groupedFees e accounts) a partir do CIF
    const { groupedFees, accounts } = await this.#getFeesStructuredFromSQL(customerAccount);

    // Prepara os dados das contas para o retorno
    result.accounts = accounts.map((account) => ({
      cifno: account.cifno,
      ddaNumber: account.ddaNumber,
      branchCity: account.branchCity,
      branchState: account.branchState,
      branchType: account.branchType,
      documentUrl: account.documentUrl,
      defaultPackageType: account.defaultPackageType,
      feePackage: account.feePackage,
    }));

    // Instancia e processa as Customer Fees
    const customer = new CustomerFees(groupedFees, accounts);
    if (customer.fee) result.fees.push(customer.fee);

    // Instancia e processa as Bank Account Fees
    const bank = new BankAccountFee(groupedFees, accounts);
    if (bank.fee) result.fees.push(bank.fee);

    // Prepara um objeto equityField para ser passado à InvestmentAccountFee
    const equityField = { exceptionOptions: [] };

    // Instancia e processa as Investment Account Fees
    const investment = new InvestmentAccountFee(groupedFees, accounts, equityField);
    console.log("debug investment", JSON.stringify(investment, null, 2));
    if (investment.fee) {
      result.fees.push(investment.fee);
    }

    // Recupera os fees ativos (por exemplo, de um banco NoSQL)
    const feesActives = await FeeCase.find({
      cif: customerAccount[0].cifno,
      status: { $nin: ['DONE', 'REJECTED'] },
      caseNumber: { $exists: true },
    });

    result.feesActives = feesActives?.map((x) => ({
      caseNumber: x.caseNumber,
      id: x.id,
    }));

    return Result.ok(result);
  }

  /**
   * Recupera e estrutura os dados de fees a partir do banco.
   * Executa o stored procedure sp_get_fees_byCIF e organiza os dados em grupos por feeType.
   *
   * @param {Array} customerAccount - Array com informações da conta do cliente.
   * @returns {Promise<Object>} - Objeto contendo groupedFees e accounts.
   */
  async #getFeesStructuredFromSQL(customerAccount) {
    // Executa o stored procedure para obter os fees brutos
    const feesDataRaw = await this.#getFeesFromSQL(customerAccount[0].cifno);
    if (!feesDataRaw || feesDataRaw.length === 0) {
      return { groupedFees: [], accounts: [] };
    }

    // Opcional: Deduplica os registros utilizando uma chave composta (CIFNO, ACCTNO, FeeCode, FeeType)
    const feesData = Array.from(
      new Map(feesDataRaw.map(row => [
        `${row.CIFNO}-${row.ACCTNO}-${row.FeeCode}-${row.FeeType}`, row
      ])).values()
    );

    // Obtém o feePackageId da primeira linha
    const feePackageId = feesData[0]['Default Fee Package Id'];
    if (!feePackageId) {
      throw new Error('Default Fee Package Id not found in feesData');
    }

    // Obtém a URL do documento associada ao feePackageId
    const documentUrl = this.#getDocumentUrl(feePackageId);

    // Mapeia os dados de fees para um array de contas com os atributos necessários
    const accounts = feesData.map((fee) => ({
      cifno: fee.CIFNO,
      ddaNumber: fee.ACCTNO,
      branchCity: fee['Branch City'],
      branchState: fee['Branch State'],
      branchType: fee['Branch Type'],
      defaultPackageType: fee['Default Package Type'],
      feePackage: fee['Default Fee Package']?.trim() || '',
      defaultFeePackageId: fee['Default Fee Package Id'] || '',
      feeType: mapFeeTypeToNumber(mapDbFeeTypeToApp(fee.FeeType)),
      feeGroup: 1,
      kycMailingStatus: fee.StandardException === 'Standard' ? 'Standard' : 'Hold Mail',
      documentUrl
    }));

    // Inicializa o objeto de agrupamento dos fees por feeType
    const groupedFeesMap = {};
    const possibleFeeTypes = ['Customer Fees', 'Bank Account Fees', 'Investment Account Fees'];
    for (const ft of possibleFeeTypes) {
      groupedFeesMap[ft] = {
        feeType: ft,
        feeGroups: [
          { name: 'Standard Fees', code: 1, fields: [] },
          { name: 'Client Current Fees', code: 2, fields: [] },
          { name: 'Exceptions Request', code: 3, fields: [] },
        ],
      };
    }

    // Processa cada linha dos dados de fees
    for (const row of feesData) {
      const feeTypeDb = row.FeeType;
      const feeTypeApp = mapDbFeeTypeToApp(feeTypeDb);
      if (!groupedFeesMap[feeTypeApp]) continue;

      // Para colunas com espaços, usa a notação de colchetes
      const { FeeDescription, FeeCode, FeeAmount, Frequency } = row;
      const DefaultFeeAmount = row["Default Fee Amount"];
      const DefaultFrequency = row["Default Frequency"];

      const mappedCode = deParaFeeCodes[FeeCode] || FeeCode;
      if (excludedCodes.has(mappedCode)) continue;
      if (
        feeTypeApp === 'Customer Fees' && ![1, 2].includes(mappedCode) ||
        feeTypeApp === 'Bank Account Fees' && ![3, 4].includes(mappedCode) ||
        feeTypeApp === 'Investment Account Fees' && ![5, 7].includes(mappedCode)
      ) {
        continue;
      }

      const groupObj = groupedFeesMap[feeTypeApp];
      const standardGroup = groupObj.feeGroups.find((g) => g.name === 'Standard Fees');
      const clientCurrentGroup = groupObj.feeGroups.find((g) => g.name === 'Client Current Fees');

      // Preenche o grupo Standard Fees com os dados do banco (usando FeeDescription)
      standardGroup.fields.push({
        code: mappedCode,
        name: FeeDescription,
        defaultValue: FeeAmount ? FeeAmount.toString() : '',
        tooltip: Frequency || '',
        isException: false,
      });

      // Preenche o grupo Client Current Fees usando os valores "Default Fee Amount" e "Default Frequency"
      clientCurrentGroup.fields.push({
        code: mappedCode,
        name: FeeDescription,
        defaultValue: DefaultFeeAmount ? DefaultFeeAmount.toString() : '',
        tooltip: DefaultFrequency || '',
        isException: false,
      });
    }

    // Recupera as exceptions usando o stored procedure específico
    const exceptions = await this.#getExceptionFeesFromSQL(feePackageId);

    // Organiza as exceptions por feeType e código
    const exceptionsByFeeTypeAndCode = {};
    for (const exc of exceptions) {
      const feeTypeApp = exc.feeType;
      if (!exceptionsByFeeTypeAndCode[feeTypeApp]) {
        exceptionsByFeeTypeAndCode[feeTypeApp] = {};
      }
      const code = exc.code;
      if (!exceptionsByFeeTypeAndCode[feeTypeApp][code]) {
        exceptionsByFeeTypeAndCode[feeTypeApp][code] = [];
      }
      exceptionsByFeeTypeAndCode[feeTypeApp][code].push(exc);
    }

    // Para cada feeType, processa os campos do grupo Exceptions Request
    for (const ft of possibleFeeTypes) {
      const groupObj = groupedFeesMap[ft];
      if (!groupObj) continue;

      const exceptionGroup = groupObj.feeGroups.find((g) => g.name === 'Exceptions Request');
      if (!exceptionGroup) continue;

      const standardGroup = groupObj.feeGroups.find((g) => g.name === 'Standard Fees');
      const clientCurrentGroup = groupObj.feeGroups.find((g) => g.name === 'Client Current Fees');
      // Cria um conjunto de todos os códigos presentes nos grupos Standard e Client Current
      const standardCodes = standardGroup?.fields.map((f) => f.code) || [];
      const clientCodes = clientCurrentGroup?.fields.map((f) => f.code) || [];
      const allCodes = new Set([...standardCodes, ...clientCodes]);

      // Para cada código, garante que exista um field no grupo Exceptions Request,
      // utilizando o nome do Standard Fees se necessário.
      for (const code of allCodes) {
        let field = exceptionGroup.fields.find((f) => f.code === code);
        if (!field) {
          const stdField = standardGroup?.fields.find((f) => f.code === code);
          field = {
            code,
            name: stdField?.name || '',
            defaultValue: '0',
            tooltip: '',
            isException: true,
            exceptionOptions: []
          };
          exceptionGroup.fields.push(field);
        } else {
          if (!field.name || field.name.trim() === '') {
            const stdField = standardGroup?.fields.find((f) => f.code === code);
            field.name = stdField?.name || '';
          }
        }
      }

      // Atualiza os fields de Exceptions Request com as opções vindas das exceptions
      const codeMap = exceptionsByFeeTypeAndCode[ft] || {};
      for (const [codeStr, listExc] of Object.entries(codeMap)) {
        const code = Number(codeStr);
        let field = exceptionGroup.fields.find((f) => f.code === code);
        if (!field) {
          const stdField = standardGroup?.fields.find((f) => f.code === code);
          field = {
            code,
            name: stdField?.name || listExc[0].name || '',
            defaultValue: listExc[0].defaultValue || '0',
            tooltip: listExc[0].tooltip || '',
            isException: true,
            exceptionOptions: []
          };
          exceptionGroup.fields.push(field);
        } else {
          if (!field.name || field.name.trim() === '') {
            const stdField = standardGroup?.fields.find((f) => f.code === code);
            field.name = stdField?.name || listExc[0].name || '';
          }
        }
        // Adiciona as opções de exception ao field
        for (const exc of listExc) {
          const amountNumber = parseFloat(exc.defaultValue || '0');
          field.exceptionOptions.push({
            approvedByDoubleA: null,
            value: exc.defaultValue,
            text: `$${amountNumber.toFixed(2)}`,
            visible: true,
            retired: false,
            parameterOptionId: exc.parameterOptionId,
          });
        }
      }
    }

    // Converte o objeto de groupedFeesMap em um array para retornar
    const groupedFees = Object.values(groupedFeesMap);
    return { groupedFees, accounts };
  }

  /**
   * Retorna a URL do documento associada ao feePackageId, utilizando um mapeamento e a variável global.
   *
   * @param {number} feePackageId - O ID do pacote de fee.
   * @returns {string} - A URL do documento, ou string vazia se não encontrado.
   */
  #getDocumentUrl(feePackageId) {
    const scheduleUrls = global.environment.scheduleUrls;
    const packageMap = {
      1: 'intlPB3',
      2: 'uSPBIndividual3',
      3: 'uSPBCorporation3',
      4: 'efraPB3',
      5: 'eraPB3'
    };

    const scheduleType = packageMap[feePackageId] || '';
    return scheduleUrls[scheduleType] || '';
  }

  /**
   * Executa o stored procedure 'sp_get_fees_byCIF' para obter os dados de fees do banco.
   *
   * @param {string} cifno - O número CIF do cliente.
   * @returns {Promise<Array>} - Os dados retornados do banco.
   */
  async #getFeesFromSQL(cifno) {
    const connection = await connectToFeeMgmtDb();
    return executeStoreProcedure(connection, 'sp_get_fees_byCIF', { cifno });
  }

  /**
   * Executa o stored procedure 'sp_get_exception_fees_bypackage' para obter os dados de exceptions,
   * e os mapeia para o formato interno esperado.
   *
   * @param {number} feePackageId - O ID do pacote de fee.
   * @returns {Promise<Array>} - Os dados de exceptions mapeados.
   */
  async #getExceptionFeesFromSQL(feePackageId) {
    const connection = await connectToFeeMgmtDb();
    const data = await executeStoreProcedure(connection, 'sp_get_exception_fees_bypackage', { feePackageId });
    return data.map((exception) => {
      const feeTypeApp = mapDbFeeTypeToApp(exception.FeeType);
      return {
        feeType: feeTypeApp,
        code: deParaFeeCodes[exception.FeeCode] || exception.FeeCode,
        name: exception.FeeDescription, // Vem da coluna "FeeDescription" do banco
        defaultValue: exception.Amount?.toString() || '0',
        tooltip: exception.FreqDescription || '',
        isException: true,
        parameterOptionId: exception.FeeParameterOptionId,
      };
    });
  }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


import numberToCurrency from '../core/helpers/currency.js';

/**
 * Classe que processa as Customer Fees.
 * Ela organiza os dados em grupos: Standard Fees, Client Current Fees e Exceptions Request.
 * Além disso, aplica a regra "NOT APPLICABLE" para o campo de Hold Mail Fee (código 2)
 * quando o valor estiver vazio ou for "0" e o kycMailingStatus do grupo Standard for diferente de "Hold Mail".
 */
export default class CustomerFees {
  #feeName = 'Customer Fees';
  #customer = {};
  #accounts = [];
  #clientCurrent = [];

  constructor(fees, accounts) {
    if (!fees || !Array.isArray(fees) || fees.length === 0) {
      throw new Error('Fees is empty or undefined');
    }

    // Seleciona o objeto de Customer Fees
    this.#customer = fees.filter((x) => x.feeType === this.#feeName)[0];
    if (!this.#customer || !Array.isArray(this.#customer.feeGroups)) {
      throw new Error('Customer Fees or feeGroups are undefined');
    }

    // Para cada grupo, remove as exceptionOptions que estejam marcadas como "retired"
    this.#customer.feeGroups.forEach((feeGroup) => {
      feeGroup.fields?.forEach((item) => {
        item.exceptionOptions = item.exceptionOptions?.filter((x) => !x.retired) || [];
      });
    });

    // Filtra as contas relacionadas aos Customer Fees (baseado no feeGroup do primeiro grupo)
    this.#accounts = accounts.filter(
      (x) => x.feeGroup === this.#customer.feeGroups[0].code
    );

    // Define o kycMailingStatus do grupo Standard Fees com base em uma conta do tipo Bank Account Fees (feeType === 2)
    this.#customer.feeGroups[0].kycMailingStatus =
      accounts.find((account) => account.feeType === 2)?.kycMailingStatus || null;

    // Atualiza os labelValues do grupo Standard Fees utilizando a função de formatação
    this.#customer.feeGroups[0].fields.forEach((field) => {
      field.labelValue = numberToCurrency(field.defaultValue);
    });

    // Processa o grupo Client Current Fees
    if (this.#customer.feeGroups.length > 1) {
      this.#clientCurrent = this.#customer.feeGroups[1].fields;
      this.#configureCustomer();
    } else {
      console.warn('Client Current group is missing');
    }

    // Para o grupo Exceptions Request, copia os labelValues do grupo Client Current
    if (this.#customer.feeGroups.length > 2) {
      this.#customer.feeGroups[2].fields.forEach((field) => {
        field.labelValue =
          this.#customer.feeGroups[1]?.fields.find((f) => f.code === field.code)?.labelValue || '';
      });
    } else {
      console.warn('Exception group is missing');
    }
  }

  get fee() {
    return this.#customer;
  }

  /**
   * Configura os valores dos fields do grupo Client Current Fees,
   * aplicando a regra "NOT APPLICABLE" para o campo com código 2 (Hold Mail Fee).
   * Se o valor da conta (feeAmount) estiver vazio ou for "0" e o kycMailingStatus
   * do grupo Standard for diferente de "Hold Mail", o valor e label são definidos como "NOT APPLICABLE".
   */
  #configureCustomer() {
    if (this.#accounts.length < 1) {
      this.#customer = {};
      return;
    }

    for (const field of this.#clientCurrent) {
      for (const account of this.#accounts) {
        // Verifica se o field corresponde à conta, comparando o código do field com o feeType da conta
        if (field.code === account.feeType) {
          if (
            field.code === 2 &&
            (!account.feeAmount || account.feeAmount.toString() === '0') &&
            this.#customer.feeGroups[0].kycMailingStatus !== 'Hold Mail'
          ) {
            field.defaultValue = 'NOT APPLICABLE';
            field.labelValue = field.defaultValue;
            field.exceptionOptions = [
              {
                value: field.defaultValue,
                text: field.defaultValue
              }
            ];
          } else {
            field.defaultValue = account.feeAmount?.toString() || '';
            field.labelValue = numberToCurrency(field.defaultValue);
          }
        }
      }
    }

    // Atualiza as informações comuns de cada feeGroup com os dados da primeira conta
    for (const feeGroup of this.#customer.feeGroups) {
      feeGroup.cif = this.#accounts[0]?.cifno || null;
      feeGroup.accountNumber = this.#accounts[0]?.ddaNumber || null;
    }

    this.#clearMemory();
  }

  #clearMemory() {
    this.#accounts = [];
    this.#clientCurrent = [];
  }
}


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

import { FeeGroup } from './entities/FeeGroups.js'
import numberToCurrency from '../core/helpers/currency.js'

export default class BankAccountFee {
  #feeName = 'Bank Account Fees'
  #bank = {}
  #accounts = []
  #accountsDDA = []
  constructor(fees, accounts) {

    if (!fees || !Array.isArray(fees) || fees.length === 0) {
      throw new Error('Fees is empty or undefined');
    }
  
    this.#bank = fees.filter((x) => x.feeType === this.#feeName)[0];
    if (!this.#bank || !Array.isArray(this.#bank.feeGroups)) {
      throw new Error('Bank Account Fees or feeGroups are undefined');
    }
  
    if (!accounts || !Array.isArray(accounts) || accounts.length === 0) {
      throw new Error('Accounts is empty or undefined');
    }
  
    const feeGroupCode = this.#bank.feeGroups[0].code;
    this.#accounts = accounts.filter((x) => x.feeGroup === feeGroupCode);
    this.#accountsDDA = new Set(
      accounts
        .filter((x) => x.feeGroup === feeGroupCode)
        .map((x) => x.ddaNumber)
    );
  
    if (this.#accounts.length === 0) {
      throw new Error('No accounts matched with Bank Account Fees feeGroup');
    }
  
    this.#addMultiplesAccount(this.#accounts[0].cifno);
    this.#addCurrentClientValue();
  }
  
  #addMultiplesAccount(cif) {
    if (!this.#accounts || this.#accounts.length < 1) {
      this.#bank = {};
      return;
    }
  
    const result = {};
    for (const feeGroup of this.#bank.feeGroups) {
      if (!feeGroup.fields || !Array.isArray(feeGroup.fields)) {
        console.warn(`FeeGroup ${feeGroup.name} has no fields`);
        continue;
      }
  
      for (const numberAccount of this.#accountsDDA) {
        if (!result[numberAccount]) result[numberAccount] = [];
  
        feeGroup.fields.forEach((item) => {
          item.exceptionOptions = item.exceptionOptions?.filter(
            (x) => !x.retired
          ) || [];
        });
  
        const newFeeGroup = new FeeGroup({
          name: feeGroup.name,
          fields: feeGroup.fields,
          cif,
          accountNumber: numberAccount,
          visible: feeGroup.visible,
          code: feeGroup.code
        });
  
        result[numberAccount].push(newFeeGroup);
      }
    }
  
    const feeGroupsByAccount = Object.keys(result).map((item) => result[item]);
    this.#bank.feeGroups = [];
    for (const feeGroups of feeGroupsByAccount) {
      this.#bank.feeGroups.push(...feeGroups);
    }
  }
  
  
  #addCurrentClientValue() {
    if (!this.#accounts || this.#accounts.length < 1) {
      this.#bank = {};
      return;
    }
  
    for (const [feeGroupIndex, feeGroup] of this.#bank.feeGroups.entries()) {
      feeGroup.cif = this.#accounts[0]?.cifno || null;
      for (const [fieldIndex, field] of feeGroup.fields.entries()) {
        if (field.isException) {
          const previousGroup = this.#bank.feeGroups[feeGroupIndex - 1];
          if (previousGroup) {
            field.labelValue =
              previousGroup.fields[fieldIndex]?.labelValue || '';
          }
        } else {
          for (const account of this.#accounts) {
            if (
              field.code === account.feeType &&
              feeGroup.accountNumber === account.ddaNumber.toString()
            ) {
              if (field.isCurrentClient) {
                field.defaultValue = account.feeAmount?.toString() || '';
              }
              field.labelValue = numberToCurrency(field.defaultValue);
            }
          }
        }
      }
    }
  
    this.#clearMemory();
  }

  get fee() {
    return this.#bank
  }

 

  #clearMemory() {
    this.#accounts = []
    this.#accountsDDA = []
  }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


import { FeeGroup } from './entities/FeeGroups.js';
import numberToCurrency from '../core/helpers/currency.js';

export default class InvestmentAccountFee {
  #feeName = 'Investment Account Fees';
  #investiment = {};
  #accounts = [];
  #accountsDDA = [];
  #allExceptions = new Set();

  constructor(fees, accounts, equityField) {
    this.#investiment = fees.filter((x) => x.feeType === this.#feeName)[0];
    if (!this.#investiment || !Array.isArray(this.#investiment.feeGroups) || !this.#investiment.feeGroups.length) {
      this.#investiment = {};
      return;
    }
    const feeGroupCode = this.#investiment.feeGroups[0].code;

    this.#accounts = accounts.filter((x) => x.feeType === 3);

    if (this.#accounts.length < 1) {
      this.#investiment = {};
      return;
    }

    this.#accounts.forEach((acc) => {
      if (acc.ddaNumber) {
        this.#accountsDDA.push({
          number: acc.ddaNumber,
          code: 5,
          entity: acc.entity || null,
        });
        this.#accountsDDA.push({
          number: acc.ddaNumber,
          code: 7,
          entity: acc.entity || null,
        });
      }
    });
    
    this.#accountsDDA = Array.from(
      new Map(this.#accountsDDA.map(item => [`${item.number}-${item.code}`, item])).values()
    );

    this.#addMultiplesAccount(this.#accounts[0].cifno);
    this.#addCurrentClientValue(equityField);
  }

  get fee() {
    if (!this.#investiment || !this.#investiment.feeGroups) {
      return null;
    }
    return this.#investiment;
  }

  #addMultiplesAccount(cif) {
   
    const result = {};

    for (const feeGroup of this.#investiment.feeGroups) {
      for (const account of this.#accountsDDA) {
        if (!result[account.number]) {
          result[account.number] = {};
        }

        const fields = feeGroup.fields.filter((x) => x.code === account.code);
        if (fields.length === 0) continue;

        if (!result[account.number][feeGroup.name]) {
          result[account.number][feeGroup.name] = [];

          feeGroup.fields?.forEach((item) => {
            if(!item.exceptionOptions){
              item.exceptionOptions = []
            }

            item.exceptionOptions = item.exceptionOptions.filter((x) => !x.retired);
            item.exceptionOptions.forEach(this.#allExceptions.add, this.#allExceptions);
          });

          const newFeeGroup = new FeeGroup({
            name: feeGroup.name,
            fields,
            cif,
            accountNumber: account.number,
            visible: feeGroup.visible,
            code: feeGroup.code,
            entityCode: account.entity,
          });
          result[account.number][feeGroup.name].push(newFeeGroup);
          continue;
        }

        const feeGroupToAddFields = result[account.number][feeGroup.name][0];
        feeGroupToAddFields.fields = [...feeGroupToAddFields.fields, ...fields];
      }
    }

    const feeGroupsByAccount = Object.keys(result).reduce((acc, accountNumber) => {
      Object.keys(result[accountNumber]).forEach((groupName) => {
        acc.push(result[accountNumber][groupName]);
      });
      return acc;
    }, []);

    this.#investiment.feeGroups = [];
    for (const feeGroups of feeGroupsByAccount) {
      for (const feeGroup of feeGroups) {
        this.#investiment.feeGroups.push(feeGroup);
      }
    }
  }

  #addCurrentClientValue(equityField) {
    const exceptionsOptions = Array.from(this.#allExceptions);
    for (const [feeGroupIndex, feeGroup] of this.#investiment.feeGroups.entries()) {
      feeGroup.cif = this.#accounts[0]?.cifno || null;
      for (const [fieldIndex, field] of feeGroup.fields.entries()) {
        if (field.isException) {
          if (feeGroupIndex > 0 && this.#investiment.feeGroups[feeGroupIndex - 1].fields[fieldIndex]) {
            field.labelValue =
              this.#investiment.feeGroups[feeGroupIndex - 1].fields[fieldIndex].labelValue || '';
          }
        } else {
          for (const account of this.#accounts) {
            if (
              field.code === feeGroup.accountNumber &&  
              feeGroup.accountNumber === account.ddaNumber
            ) {
              if (field.code === 5) {
                field.defaultValue = field.isStandard
                  ? field.defaultValue
                  : account.feeAmount?.toString() || '';
                field.labelValue = numberToCurrency(field.defaultValue);
              } else {
                if (field.labelValue !== 'Other') {
                  if (field.isCurrentClient) {
                    field.defaultValue = account.feeCode?.toString() || '';
                  }
                  let exception = exceptionsOptions.find((x) => x.value === field.defaultValue);
                  if (!exception && equityField?.exceptionOptions) {
                    exception = equityField.exceptionOptions.find(
                      (e) => e.value === field.defaultValue
                    );
                  }
                  if (!exception) {
                    exception = { text: '' };
                  }
                  field.labelValue = exception.text;
                }
              }
            }
          }
        }
      }
    }
    this.#clearMemory();
  }

  #clearMemory() {
    this.#accounts = [];
    this.#accountsDDA = [];
    this.#allExceptions = new Set();
  }
}

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

{
    "code": 200,
    "data": {
        "customerName": "FRANCO JACK",
        "customerAddress": "JACK FRANCO 425 EAST 58TH STREET APT # 48 B NEW YORK NY 10022",
        "customerAccountOfficer": "036 Sigalit Levy-Shabi        BR 4",
        "cif": "F016583",
        "branchCity": "New York",
        "branchState": "NY",
        "branchType": "Domestic",
        "packageType": "Individual",
        "packageName": "Domestic Individual",
        "fees": [
            {
                "feeType": "Customer Fees",
                "feeGroups": [
                    {
                        "name": "Standard Fees",
                        "code": 1,
                        "fields": [
                            {
                                "code": 1,
                                "name": "Account Maintenance Fee",
                                "defaultValue": "25.00",
                                "tooltip": "Monthly - Charged Quarterly",
                                "isException": false,
                                "exceptionOptions": [],
                                "labelValue": "$25.00"
                            },
                            {
                                "code": 2,
                                "name": "Hold Mail Fee",
                                "defaultValue": "0.00",
                                "tooltip": "Annual - Charged Annual",
                                "isException": false,
                                "exceptionOptions": [],
                                "labelValue": "$0.00"
                            }
                        ],
                        "kycMailingStatus": "Standard",
                        "cif": "F016583",
                        "accountNumber": 7115342
                    },
                    {
                        "name": "Client Current Fees",
                        "code": 2,
                        "fields": [
                            {
                                "code": 1,
                                "name": "Account Maintenance Fee",
                                "defaultValue": "",
                                "tooltip": "Monthly - Charged Quarterly",
                                "isException": false,
                                "exceptionOptions": [],
                                "labelValue": "$0.00"
                            },
                            {
                                "code": 2,
                                "name": "Hold Mail Fee",
                                "defaultValue": "NOT APPLICABLE",
                                "tooltip": "Annual - Charged Annual",
                                "isException": false,
                                "exceptionOptions": [
                                    {
                                        "value": "NOT APPLICABLE",
                                        "text": "NOT APPLICABLE"
                                    }
                                ],
                                "labelValue": "NOT APPLICABLE"
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": 7115342
                    },
                    {
                        "name": "Exceptions Request",
                        "code": 3,
                        "fields": [
                            {
                                "code": 1,
                                "name": "Account Maintenance Fee",
                                "defaultValue": "0",
                                "tooltip": "",
                                "isException": true,
                                "exceptionOptions": [
                                    {
                                        "approvedByDoubleA": null,
                                        "value": "0",
                                        "text": "$0.00",
                                        "visible": true,
                                        "retired": false,
                                        "parameterOptionId": 94
                                    }
                                ],
                                "labelValue": "$0.00"
                            },
                            {
                                "code": 2,
                                "name": "Hold Mail Fee",
                                "defaultValue": "0",
                                "tooltip": "",
                                "isException": true,
                                "exceptionOptions": [],
                                "labelValue": "NOT APPLICABLE"
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": 7115342
                    }
                ]
            },
            {
                "feeType": "Bank Account Fees",
                "feeGroups": [
                    {
                        "name": "Standard Fees",
                        "code": 1,
                        "fields": [
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777e7"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "0.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777e8"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "0.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777e9"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777ea"
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": "7113617",
                        "visible": true,
                        "kycMailingStatus": null,
                        "_id": "67ad074f22dd97c1d41777e6"
                    },
                    {
                        "name": "Client Current Fees",
                        "code": 2,
                        "fields": [
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777fb"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777fc"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777fd"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777fe"
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": "7113617",
                        "visible": true,
                        "kycMailingStatus": null,
                        "_id": "67ad074f22dd97c1d41777fa"
                    },
                    {
                        "name": "Exceptions Request",
                        "code": 3,
                        "fields": [
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": true,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "0",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [
                                    {
                                        "value": "0",
                                        "text": "$0.00",
                                        "retired": false,
                                        "visible": true,
                                        "approvedByDoubleA": null,
                                        "_id": "67ad074f22dd97c1d4177810"
                                    }
                                ],
                                "_id": "67ad074f22dd97c1d417780f",
                                "labelValue": ""
                            },
                            {
                                "code": 8,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": true,
                                "name": "FX Outgoing Wire (SafraLink) Fee",
                                "defaultValue": "0",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [
                                    {
                                        "value": "0",
                                        "text": "$0.00",
                                        "retired": false,
                                        "visible": true,
                                        "approvedByDoubleA": null,
                                        "_id": "67ad074f22dd97c1d4177812"
                                    }
                                ],
                                "_id": "67ad074f22dd97c1d4177811",
                                "labelValue": ""
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": "7113617",
                        "visible": true,
                        "kycMailingStatus": null,
                        "_id": "67ad074f22dd97c1d417780e"
                    },
                    {
                        "name": "Standard Fees",
                        "code": 1,
                        "fields": [
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777dd"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "0.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777de"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "0.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777df"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777e0"
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": "7115342",
                        "visible": true,
                        "kycMailingStatus": null,
                        "_id": "67ad074f22dd97c1d41777dc"
                    },
                    {
                        "name": "Client Current Fees",
                        "code": 2,
                        "fields": [
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777f1"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777f2"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777f3"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777f4"
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": "7115342",
                        "visible": true,
                        "kycMailingStatus": null,
                        "_id": "67ad074f22dd97c1d41777f0"
                    },
                    {
                        "name": "Exceptions Request",
                        "code": 3,
                        "fields": [
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": true,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "0",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [
                                    {
                                        "value": "0",
                                        "text": "$0.00",
                                        "retired": false,
                                        "visible": true,
                                        "approvedByDoubleA": null,
                                        "_id": "67ad074f22dd97c1d4177806"
                                    }
                                ],
                                "_id": "67ad074f22dd97c1d4177805",
                                "labelValue": ""
                            },
                            {
                                "code": 8,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": true,
                                "name": "FX Outgoing Wire (SafraLink) Fee",
                                "defaultValue": "0",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [
                                    {
                                        "value": "0",
                                        "text": "$0.00",
                                        "retired": false,
                                        "visible": true,
                                        "approvedByDoubleA": null,
                                        "_id": "67ad074f22dd97c1d4177808"
                                    }
                                ],
                                "_id": "67ad074f22dd97c1d4177807",
                                "labelValue": ""
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": "7115342",
                        "visible": true,
                        "kycMailingStatus": null,
                        "_id": "67ad074f22dd97c1d4177804"
                    },
                    {
                        "name": "Standard Fees",
                        "code": 1,
                        "fields": [
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777ec"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "0.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777ed"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "0.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777ee"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777ef"
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": "7115431",
                        "visible": true,
                        "kycMailingStatus": null,
                        "_id": "67ad074f22dd97c1d41777eb"
                    },
                    {
                        "name": "Client Current Fees",
                        "code": 2,
                        "fields": [
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d4177800"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d4177801"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d4177802"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d4177803"
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": "7115431",
                        "visible": true,
                        "kycMailingStatus": null,
                        "_id": "67ad074f22dd97c1d41777ff"
                    },
                    {
                        "name": "Exceptions Request",
                        "code": 3,
                        "fields": [
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": true,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "0",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [
                                    {
                                        "value": "0",
                                        "text": "$0.00",
                                        "retired": false,
                                        "visible": true,
                                        "approvedByDoubleA": null,
                                        "_id": "67ad074f22dd97c1d4177815"
                                    }
                                ],
                                "_id": "67ad074f22dd97c1d4177814",
                                "labelValue": ""
                            },
                            {
                                "code": 8,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": true,
                                "name": "FX Outgoing Wire (SafraLink) Fee",
                                "defaultValue": "0",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [
                                    {
                                        "value": "0",
                                        "text": "$0.00",
                                        "retired": false,
                                        "visible": true,
                                        "approvedByDoubleA": null,
                                        "_id": "67ad074f22dd97c1d4177817"
                                    }
                                ],
                                "_id": "67ad074f22dd97c1d4177816",
                                "labelValue": ""
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": "7115431",
                        "visible": true,
                        "kycMailingStatus": null,
                        "_id": "67ad074f22dd97c1d4177813"
                    },
                    {
                        "name": "Standard Fees",
                        "code": 1,
                        "fields": [
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777e2"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "0.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777e3"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "0.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777e4"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25.00",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777e5"
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": "7115822",
                        "visible": true,
                        "kycMailingStatus": null,
                        "_id": "67ad074f22dd97c1d41777e1"
                    },
                    {
                        "name": "Client Current Fees",
                        "code": 2,
                        "fields": [
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777f6"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777f7"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777f8"
                            },
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": false,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "25",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [],
                                "_id": "67ad074f22dd97c1d41777f9"
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": "7115822",
                        "visible": true,
                        "kycMailingStatus": null,
                        "_id": "67ad074f22dd97c1d41777f5"
                    },
                    {
                        "name": "Exceptions Request",
                        "code": 3,
                        "fields": [
                            {
                                "code": 4,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": true,
                                "name": "FX Outgoing Wire Fee",
                                "defaultValue": "0",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [
                                    {
                                        "value": "0",
                                        "text": "$0.00",
                                        "retired": false,
                                        "visible": true,
                                        "approvedByDoubleA": null,
                                        "_id": "67ad074f22dd97c1d417780b"
                                    }
                                ],
                                "_id": "67ad074f22dd97c1d417780a",
                                "labelValue": ""
                            },
                            {
                                "code": 8,
                                "isStandard": false,
                                "isCurrentClient": false,
                                "isException": true,
                                "name": "FX Outgoing Wire (SafraLink) Fee",
                                "defaultValue": "0",
                                "hasChanged": false,
                                "tooltip": "",
                                "exceptionOptions": [
                                    {
                                        "value": "0",
                                        "text": "$0.00",
                                        "retired": false,
                                        "visible": true,
                                        "approvedByDoubleA": null,
                                        "_id": "67ad074f22dd97c1d417780d"
                                    }
                                ],
                                "_id": "67ad074f22dd97c1d417780c",
                                "labelValue": ""
                            }
                        ],
                        "cif": "F016583",
                        "accountNumber": "7115822",
                        "visible": true,
                        "kycMailingStatus": null,
                        "_id": "67ad074f22dd97c1d4177809"
                    }
                ]
            }
        ],
        "feesActives": [],
        "documentUrl": "https://minio-ui.dev.k8s.safra.int/api/v1/buckets/conductor-public/objects/download?preview=true&prefix=U2NoZWR1bGVvZkZlZXNVU1BCSW5kaXZpZHVhbDMucGRm&version_id=null",
        "currentFees": [
            {
                "feeDescription": "$0.00",
                "feeCode": " Personal Checking -D 7113617"
            },
            {
                "feeDescription": "Hold Mail Fee $0.00",
                "feeCode": " Personal Checking -D 7113617"
            },
            {
                "feeDescription": "SSL Account Maintanance Fee $375.00",
                "feeCode": " Personal Checking -D 7113617"
            },
            {
                "feeDescription": "USD/FX Outgoing Wire Fee $75.00",
                "feeCode": " Personal Checking -D 7113617"
            },
            {
                "feeDescription": "$0.00",
                "feeCode": " Personal Promise   D 7115431"
            },
            {
                "feeDescription": "SSL Account Maintanance Fee $375.00",
                "feeCode": " Personal Promise   D 7115431"
            },
            {
                "feeDescription": "USD/FX Outgoing Wire Fee $75.00",
                "feeCode": " Personal Promise   D 7115431"
            },
            {
                "feeDescription": "$0.00",
                "feeCode": " Personal Savings 7115822"
            },
            {
                "feeDescription": "Account Maintenance Fee $0.00",
                "feeCode": " Personal Savings 7115822"
            },
            {
                "feeDescription": "SSL Account Maintanance Fee $375.00",
                "feeCode": " Personal Savings 7115822"
            },
            {
                "feeDescription": "USD/FX Outgoing Wire Fee $75.00",
                "feeCode": " Personal Savings 7115822"
            }
        ]
    }
}
