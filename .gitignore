/* eslint-disable no-case-declarations */
import Result from '#features/shared/result.js'
import { FeeCase } from '#src/models/entities/FeeCase.js'

export default class FeeCaseGetEmailUseCase {
  #approval = 'approval-request.hbs'
  #completed = 'request-completed.hbs'
  #secops = 'secops-update.hbs'

  async execute({ feeCaseId }) {
    global.logger.info('FeeCaseGetEmailUseCase()')
    const feeCase = await FeeCase.findById(feeCaseId)
    if (!feeCase) {
      return Result.fail('Fee Case not found.')
    }

    const templateName = this.getTemplateName(feeCase.status)
    const subject = this.getSubject(feeCase)
    const payloads = this.getPayload(feeCase, templateName, subject)

    return Result.ok(payloads)
  }

  getTemplateName(status) {
    switch (status) {
      case 'DONE':
        return this.#completed
      case 'REJECTED':
        return this.#completed
      case 'PENDING_APPROVAL':
        return this.#approval
      case 'PENDING_EQUITY':
        return this.#secops
      case 'PENDING_SECOPS':
        return this.#secops
    }
  }

  getSubject(feeCase) {
    const env = process.env.NODE_ENV
    const description =
      env.toLowerCase() === 'production' ? '' : `[New Conductor ${env} Test] `
    return `${description}Fee Exception Request - ${feeCase.caseNumber}`
  }

  getPayload(feeCase, templateName, subject) {
    global.logger.info('getPayload()')

    let usersPayload = []
    switch (templateName) {
      case this.#completed:
        usersPayload.push(this.getRequestCompletedPayload(subject, feeCase))
        break
      case this.#approval:
        const signatures = [
          ...new Set(feeCase.usersApprovers.map((user) => user.signature))
        ]

        const hasAA = signatures.includes('PB AA')
        const hasAAA = signatures.includes('PB AAA')

        let targetSignature = 'ExCom AA'
        if (hasAA) {
          targetSignature = 'PB AA'
        } else if (hasAAA) {
          targetSignature = 'PB AAA'
        }
        usersPayload = feeCase.usersApprovers
          .filter(
            (approver) =>
              approver.signature && approver.signature === targetSignature
          )
          .map((approver) =>
            this.getApprovalRequestPayload(subject, feeCase, approver)
          )
        break
      case this.#secops:
        let userKey = ''
        switch (feeCase.status) {
          case 'PENDING_EQUITY':
            userKey = 'equityTeam'
            break
          case 'PENDING_SECOPS':
            userKey = 'secopsTeam'
            break
        }
        if (userKey !== '') {
          usersPayload = feeCase[userKey].map((approver) =>
            this.getSecopsUpdateRequestPayload(subject, feeCase, approver)
          )
        }
        break
    }

    if (process.env.NODE_ENV.toLowerCase() === 'staging') {
      usersPayload[0].to = ['maria.peixoto@safra.com']
      usersPayload[0].cc.push([
        'marcelo.cantero@safra.com',
        'otavio.bueno@safra.com',
        'bruno.aguiar@safra.com'
      ])
      usersPayload = [usersPayload[0]]
    }

    return { templateName, emailInfoArray: usersPayload }
  }

  getRequestCompletedPayload(subject, feeCase) {
    global.logger.info('getRequestCompletedPayload()')

    const requestNumbers = this.getRequestNumbers(feeCase)
    return {
      from: ['noreply+conductor@safra.com'],
      to: [feeCase.userOwnerEmail],
      cc: [],
      subject,
      data: {
        ...this.getCommonVariables(feeCase),
        approverName: feeCase.userOwnerName.split(' ')[0],
        numberOfRequests: requestNumbers.requestsAmount,
        numberOfRejectedRequests: requestNumbers.rejectedsAmount,
        numberOfApprovedRequests: requestNumbers.approvedsAmount,
        rejectedIcon: this.getVariableByEnv(
          'https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=cmVqZWN0ZWQtaWNvbi5wbmc=',
          'https://minio-ui.qa.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=cmVqZWN0ZWQtaWNvbi5wbmc=',
          'https://minio-ui.prd.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=cmVqZWN0ZWQtaWNvbi5wbmc='
        ),
        approvedIcon: this.getVariableByEnv(
          'https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=YXBwcm92ZWQtaWNvbi5wbmc=',
          'https://minio-ui.qa.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=YXBwcm92ZWQtaWNvbi5wbmc=',
          'https://minio-ui.prd.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=YXBwcm92ZWQtaWNvbi5wbmc='
        )
      }
    }
  }

  getApprovalRequestPayload(subject, feeCase, user) {
    return {
      from: ['noreply+conductor@safra.com'],
      to: [user.email],
      cc: [],
      subject,
      data: {
        approverName: user.userNameFull.split(' ')[0],
        ...this.getCommonVariables(feeCase)
      }
    }
  }

  getSecopsUpdateRequestPayload(subject, feeCase, user) {
    return {
      from: ['noreply+conductor@safra.com'],
      to: [user.email],
      cc: [],
      subject,
      data: {
        approverName: user.userNameFull.split(' ')[0],
        ...this.getCommonVariables(feeCase)
      }
    }
  }

  getRequestNumbers(feeCase) {
    let requestsAmount = 0
    let approvedsAmount = 0
    let rejectedsAmount = 0

    feeCase.fees.forEach((fee) => {
      fee.feeGroups.forEach((feeGroup) => {
        feeGroup.fields.forEach((field) => {
          if (!field.hasChanged) {
            return
          }

          requestsAmount += 1
          field.approved ? (approvedsAmount += 1) : (rejectedsAmount += 1)
        })
      })
    })

    return { requestsAmount, approvedsAmount, rejectedsAmount }
  }

  getVariableByEnv(devVariable, qaVariable, prodVariable) {
    switch (process.env.NODE_ENV.toLowerCase()) {
      case 'production':
        return prodVariable
      case 'staging':
        return qaVariable
      default:
        return devVariable
    }
  }

  getCommonImages() {
    return {
      safraLogo: this.getVariableByEnv(
        'https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=c2FmcmEtbmF0aW9uYWwtYmFuay1sb2dvLnBuZw==',
        'https://minio-ui.qa.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=c2FmcmEtbmF0aW9uYWwtYmFuay1sb2dvLnBuZw==',
        'https://minio-ui.prd.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=c2FmcmEtbmF0aW9uYWwtYmFuay1sb2dvLnBuZw=='
      ),
      divider: this.getVariableByEnv(
        'https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=ZGl2aWRlci5wbmc=',
        'https://minio-ui.qa.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=ZGl2aWRlci5wbmc=',
        'https://minio-ui.prd.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=ZGl2aWRlci5wbmc='
      ),
      approverIcon: this.getVariableByEnv(
        'https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=YXBwcm92ZXItaWNvbi5wbmc=',
        'https://minio-ui.qa.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=YXBwcm92ZXItaWNvbi5wbmc=',
        'https://minio-ui.prd.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=YXBwcm92ZXItaWNvbi5wbmc='
      ),
      arrowImage: this.getVariableByEnv(
        'https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=YXJyb3cucG5n',
        'https://minio-ui.qa.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=YXJyb3cucG5n',
        'https://minio-ui.prd.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=YXJyb3cucG5n'
      )
    }
  }

  getCommonVariables(feeCase) {
    return {
      requestNumber: feeCase.caseNumber,
      customerCif: feeCase.cif,
      customerFullName: feeCase.customerName,
      userOwnerFullName: feeCase.userOwnerName,
      ...this.getCommonImages(),
      buttonLink: this.getVariableByEnv(
        `https://feemanagement.dev.k8s.safra.int/app/feemanagement/${feeCase.cif}/${feeCase.id}`,
        `https://feemanagement.qa.k8s.safra.int/app/feemanagement/${feeCase.cif}/${feeCase.id}`,
        `https://feemanagement.prd.k8s.safra.int/app/feemanagement/${feeCase.cif}/${feeCase.id}`
      )
    }
  }
}
