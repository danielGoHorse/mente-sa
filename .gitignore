Chat, seguinte, 

Essa é a tela do principal de um sistema, onde possuo a aba Documents...

Dentro dessa tela eu faço um upload de imagem, e volto para a tela principal....
Ao fazer o submit, eu preciso entender se o documento esta indo no submit, guarde a informação por enqwuanto, pois vou passar as outras partes do sistema

/* eslint-disable @typescript-eslint/no-explicit-any */
"use client";
import React, { useEffect, useState } from "react";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/Tabs";
import CreationContent from "./content/CreationContent";
import ValidationContent from "./content/ValidationsContent";
import { Documents } from "@/components/Documents";
import { useAuthStore } from "@/app/store/auth/authStore";
import { useDocumentStore } from "@/app/store/documentsStore/documentStore";
import { Document } from "@/app/store/types";
import RequestConfigProvider from "@/app/providers/getRequestProvider";
import { TabsNavigation } from "@/components/TabsNavigation";
import Requests from "@/components/Requests";
import History from "@/components/history/History";
import { toHistoryData } from "@/app/utils/toHistoryData";
import { parseHistoryToData } from "@/app/utils/parseHistoryToData";
import InstructionEmail from "@/components/InstructionEmail";
import { Comments } from "@/components/Comments";
import { uuidv7 } from "uuidv7";
import { Button } from "@/components/Button";
import CancelRequestModal from "@/components/CancelRequestModal";
import RequestClarificationModal from "@/components/RequestClarificationModal";
import Image from "next/image";
import PrintIcon from "@/app/assets/svg/print-color.svg";
import { Dialog, DialogContent, DialogFooter } from "@/components/Modal";
import { Approvals } from "@/components/Approvals";
import AlertColorIcon from "@/app/assets/svg/alert-color.svg";
import CancelRequestIcon from "@/app/assets/svg/close.svg";
import { useCancelRequestProvider } from "@/app/providers/cancelRequestProvider";

type IPageTabsParams = {
  params: {
    requestName: string;
    requestId?: string;
  };
  tabTriggerType: string;
};

type CancelRequestWarningProps = {
  userThatCanceled: string;
  date: string;
  reason: string;
};

export default function PageTabs({ params, tabTriggerType }: IPageTabsParams) {
  const { getRequestConfig } = RequestConfigProvider(params.requestId);
  const { userData } = useAuthStore((state) => state);
  const { documentList, setDocumentList } = useDocumentStore((state) => state);
  const { data } = getRequestConfig;
  const [pendingComments, setPendingComments] = useState<string[]>([]);
  const requestId = data?.requestId ? data.requestId : uuidv7();
  const [requestQualificationIsOpen, setRequestQualificationIsOpen] =
    useState(false);
  const [cancelRequestIsOpen, setCancelRequestIsOpen] = useState(false);
  const [requestCanceled, setRequestCanceled] = useState(false);
  const [openErrorModal, setOpenErrorModal] = useState<boolean>(false);
  const { mutation } = useCancelRequestProvider();
  const [dataCancelRequest, setDataCancelRequest] =
    useState<CancelRequestWarningProps>();

  const validationStatus = data?.timeline
    ?.flat()
    ?.find((item: any) => item?.name?.includes("Validation"));

  useEffect(() => {
    setDocumentList([]);

    return () => {
      setDocumentList([]);
    };
  }, []);

  if (!data) {
    return;
  }
  const workflowData = toHistoryData(data);
  const historyData = parseHistoryToData(workflowData);
  const mockedApprovals = [
    {
      title: "Acceptance",
      userName: "GinaS",
      date: "2/12/2023",
      hour: "10:22 AM",
    },
    {
      title: "Compliance",
      userName: "MarceloH",
      date: "2/12/2023",
      hour: "11:47 AM",
    },
  ];

  const handleCancelRequest = (requestId: string, reason: string) => {
    mutation.mutate(
      { requestId },
      {
        onSuccess: (response) => {
          const data = response?.data;
          const formatted = {
            userThatCanceled: data.userName,
            date: data.date,
            reason: data.note || reason,
          };
          setDataCancelRequest(formatted);
          return formatted;
        },
      }
    );
  };

 

  return (
    <Tabs
      defaultValue={tabTriggerType}
      className="min-h-screen w-full py-7 px-6"
    >
      <TabsList>
        <TabsTrigger
          value="request"
          className="-mb-1 rounded-t-lg font-figtree flex h-[45px] cursor-pointer flex-row items-center justify-center bg-background-primary text-sm font-normal text-[#636574] aria-selected:!bg-white aria-selected:text-[#1e2347]"
        >
          {data.caseNumber ? (
            <>{`Request: ${data.caseNumber}`}</>
          ) : (
            "New Request"
          )}
        </TabsTrigger>
        <TabsTrigger
          value="documents"
          className="-mb-1 rounded-t-lg font-figtree flex h-[45px] cursor-pointer flex-row items-center justify-center bg-background-primary text-sm font-normal text-[#636574] aria-selected:!bg-white aria-selected:text-[#1e2347]"
        >
          Documents
        </TabsTrigger>
        <TabsTrigger
          value="history"
          className="-mb-1 rounded-t-lg font-figtree flex h-[45px] cursor-pointer flex-row items-center justify-center bg-background-primary text-sm font-normal text-[#636574] aria-selected:!bg-white aria-selected:text-[#1e2347]"
        >
          History
        </TabsTrigger>
      </TabsList>

      <TabsContent
        value="request"
        forceMount
        className="aria-selected:block data-[state=inactive]:hidden"
      >
        {validationStatus.status === "waiting" ? (
          <Requests data={data} />
        ) : (
          <div className="w-full flex">
            <div className="bg-white rounded-lg p-8">
              <div className="w-full flex">
                <div className="w-1/2 pr-4">
                  <TabsNavigation
                    tabs={[
                      {
                        label: "Creation",
                        content: <CreationContent data={data} />,
                      },
                      {
                        label: "Validations",
                        content: (
                          <ValidationContent
                            data={data}
                            cancelRequestWarning={dataCancelRequest}
                          />
                        ),
                      },
                    ]}
                    initialTab={0}
                  />
                </div>
                <div className="w-[6px] bg-[#F7F7F8] rounded-[15px] h-min-[605px] h-max-full"></div>
                <div className="w-1/2 pl-4">
                  <InstructionEmail></InstructionEmail>
                </div>
              </div>
              <div className="my-8">
                <Comments
                  userName={userData.userName || ""}
                  disabled={data ? true : false}
                  onOutput={(comments: string[]) =>
                    setPendingComments(comments)
                  }
                  requestId={requestId}
                />
              </div>
              {data && <Approvals approvalsList={mockedApprovals} />}

              <Dialog open={openErrorModal} onOpenChange={setOpenErrorModal}>
                <DialogContent className="w-[400px] h-[286px] pb-0">
                  <div className="flex flex-col justify-center items-center w-full">
                    <div className="flex justify-center">
                      <Image
                        src={AlertColorIcon}
                        alt="Alert Icon"
                        width={56}
                        height={56}
                      />
                    </div>
                    <p className="text-[#1E2347] my-6 font-semibold text-lg text-center">
                      Please fix the highlighted errors before submitting.
                    </p>
                    <DialogFooter className="w-full">
                      <Button
                        variant="modalError"
                        size="modalError"
                        onClick={() => setOpenErrorModal(false)}
                      >
                        Close
                      </Button>
                    </DialogFooter>
                  </div>
                </DialogContent>
              </Dialog>
              {!data ? (
                <div className="flex justify-between gap-4 mt-6">
                  <div className="flex gap-4">
                    <Button
                      variant="print"
                      size="print"
                      onClick={() => window.print()}
                    >
                      <Image
                        src={PrintIcon}
                        alt="print-icon"
                        width={24}
                        height={24}
                        className="mr-2"
                      />
                      Print
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="flex justify-between">
                  <div className="flex justify-end mt-14">
                    <Button
                      variant="cancelRequest"
                      size="cancelRequest"
                      className="mr-2"
                      onClick={() => setCancelRequestIsOpen(true)}
                    >
                      <Image
                        src={CancelRequestIcon}
                        alt="CancelRequest"
                      ></Image>
                      Cancel request
                    </Button>
                  </div>
                  <div className="flex justify-end mt-14">
                    <Button
                      variant="submit"
                      size="submit"
                      /* onClick={() => handleSubmit(onSubmit)()}*/
                    >
                      Submit
                    </Button>
                  </div>
                </div>
              )}
            </div>
            {requestQualificationIsOpen && (
              <RequestClarificationModal
                open={requestQualificationIsOpen}
                onOpenChange={setRequestQualificationIsOpen}
              />
            )}
            {cancelRequestIsOpen && (
              <CancelRequestModal
                open={cancelRequestIsOpen}
                onClose={() => setCancelRequestIsOpen(false)}
                onSubmit={(reason) => {
                  handleCancelRequest(data?.requestId, reason);
                  setRequestCanceled(true);
                }}
                requestId={data?.requestId}
              />
            )}
          </div>
        )}
      </TabsContent>

      <TabsContent
        value="documents"
        className="mt-0 rounded-b-lg rounded-r-lg bg-[white] aria-selected:block data-[state=inactive]:hidden rounded-lg p-6"
      >
        {
          <Documents
            baseUrl={process.env.NEXT_PUBLIC_BASE_URL ?? ""}
            bucketName="conductor-client"
            pathUrl="/v1/file"
            getListDocument={documentList ?? []}
            showUploader={true}
            userData={userData}
            onUploadDocuments={(documents: Document[]) =>
              setDocumentList(documents)
            }
          />
        }
      </TabsContent>
      <TabsContent
        value="history"
        className="mt-0 rounded-b-lg rounded-r-lg bg-white p-6"
      >
        <History
          status={historyData.status}
          data={historyData.data}
          cardRowData={historyData.cardRowData}
          dataDisplayData={historyData.dataDisplayData}
          selectedBank={historyData.selectedBank}
          approvalsSteps={historyData.approvalsSteps}
        />
      </TabsContent>

      <TabsContent value="history">{<p>History</p>}</TabsContent>
    </Tabs>
  );
}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Este é o codigo do Documents


"use client";
import Image from "next/image";
import React, { Fragment, useEffect, useState } from "react";
import DocumentIcon from "@/app/assets/svg/document-icon.svg";
import WarningIcon from "@/app/assets/svg/warning-color.svg";
import VisibilityOffIcon from "@/app/assets/svg/visibility-off.svg";
import DownloadIcon from "@/app/assets/svg/download.svg";
import DeleteIcon from "@/app/assets/svg/delete.svg";
import ErrorIcon from "@/app/assets/svg/error-circle-color.svg";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "./Tooltip";
import Uploader from "./Uploader";
import { formatDateTime } from "@/lib/utils";

interface DocumentUploadedProps {
  documentName: string;
  documentSize?: string;
  documentStatus?: string;
  documentUUID?: string;
  documentURL?: string;
  documentURLPreview?: string;
  uploadedBy: { fullName?: string; userId?: string };
  createdAt?: string | number | Date;
  itemRef?: string | undefined;
}

interface DocumentsProps {
  userData: any;
  showUploader: boolean;
  baseUrl: string;
  pathUrl: string;
  bucketName: string;
  messageOnUpload?: boolean;
  disabled?: boolean;
  itemRef?: string | undefined;
  getListDocument: DocumentUploadedProps[];
  onUploadDocuments: (documents: DocumentUploadedProps[]) => void;
}

export const Documents = ({
  showUploader = true,
  userData,
  baseUrl,
  pathUrl,
  bucketName,
  messageOnUpload = true,
  disabled = false,
  itemRef = undefined,
  getListDocument,
  onUploadDocuments,
}: DocumentsProps) => {
  const [uploadError, setUploadError] = useState<boolean>(false);
  const [notSupported, setNotSupported] = useState<boolean>(false);
  const [tooLarge, setTooLarge] = useState<boolean>(false);
  const [upload, setUpload] = useState<boolean>(false);
  const [documentList, setDocumentList] =
    useState<DocumentUploadedProps[]>(getListDocument);

  const documentListCondition = itemRef
    ? documentList.filter((item) => item.itemRef === itemRef)
    : documentList;

  useEffect(() => {
    onUploadDocuments(documentList);
  }, [documentList]);

  const handleSetError = (
    reason: "Large" | "UploadError" | "NotSupported" | "Upload" | "ResetError"
  ) => {
    if (reason === "Large") setTooLarge(true);
    if (reason === "UploadError") setUploadError(true);
    if (reason === "NotSupported") setNotSupported(true);
    if (reason === "Upload") setUpload(true);
    if (reason === "ResetError") {
      setTooLarge(false);
      setUploadError(false);
      setNotSupported(false);
    }
  };

  const handleDelete = (documentName: string) => {
    const updatedDocumentList = documentList.filter(
      (item) => item.documentName !== documentName
    );
    setDocumentList(updatedDocumentList);
  };

  const handleDownload = (documentName: string) => {
    const updatedDocumentList = documentList.filter(
      (item) => item.documentName === documentName
    );
    const link: HTMLAnchorElement = document.createElement("a");
    link.setAttribute("href", updatedDocumentList[0].documentURL ?? "");
    link.setAttribute("download", documentName);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleViewDocument = (documentName: string) => {
    const updatedDocumentList = documentList.filter(
      (item) => item.documentName === documentName
    );
    const link: HTMLAnchorElement = document.createElement("a");
    link.setAttribute("href", updatedDocumentList[0].documentURLPreview ?? "");
    link.setAttribute("target", "_blank");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="w-full">
      {showUploader && !disabled && (
        <Fragment>
          {uploadError && (
            <div className="py-2">
              <div className="gap-[16px] flex rounded-[4px] px-[15px] py-[12px] flex-col border border-solid border-transparent bg-[rgb(251,_234,_234)]">
                <div className="gap-[8px] flex items-center ">
                  <div>
                    <Image
                      src={ErrorIcon}
                      width={24}
                      height={24}
                      alt="error-icon"
                    />
                  </div>
                  <div>
                    <span className="font-[Figtree] not-italic font-normal text-[14px] leading-[21px] tracking-[0.12px] text-[rgb(72,_74,_85)]">
                      An error occurred when uploading your file. Please try
                      again
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}
          {notSupported && (
            <div className="py-2">
              <div className="gap-[16px] flex rounded-[4px] px-[15px] py-[12px] flex-col border border-solid border-transparent bg-[rgb(251,_234,_234)]">
                <div className="gap-[8px] flex items-center ">
                  <div>
                    <Image
                      src={ErrorIcon}
                      width={24}
                      height={24}
                      alt="error-icon"
                    />
                  </div>
                  <div>
                    <span className="font-[Figtree] not-italic font-normal text-[14px] leading-[21px] tracking-[0.12px] text-[rgb(72,_74,_85)]">
                      This document type is not supported.
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}

          {tooLarge && (
            <div className="py-2">
              <div className="gap-[16px] flex rounded-[4px] px-[15px] py-[12px] flex-col border border-solid border-transparent bg-[rgb(251,_234,_234)]">
                <div className="gap-[8px] flex items-center ">
                  <div>
                    <Image
                      src={ErrorIcon}
                      width={24}
                      height={24}
                      alt="error-icon"
                    />
                  </div>
                  <div>
                    <span className="font-[Figtree] not-italic font-normal text-[14px] leading-[21px] tracking-[0.12px] text-[rgb(72,_74,_85)]">
                      The document is larger than supported. Please upload a
                      file up to 10 MB.
                    </span>
                  </div>
                </div>
              </div>
            </div>
          )}

          <Uploader
            itemRef={itemRef}
            onError={handleSetError}
            userData={userData}
            setDocumentList={setDocumentList}
            documentList={documentList}
            baseUrl={baseUrl}
            pathUrl={pathUrl}
            bucketName={bucketName}
          />
        </Fragment>
      )}

      {documentList && documentList.length === 0 && !showUploader && (
        <div className="flex items-center justify-center content-center min-h-[296px]">
          <div className="flex flex-col items-center">
            <Image src={DocumentIcon} alt="document-icon" />
            <p className="font-[Figtree] not-italic font-normal text-[16px] leading-[21px] tracking-[0.12px] mt-[20px]">
              There are no documents attached to this request.
            </p>
          </div>
        </div>
      )}

      {upload && messageOnUpload && (
        <div className="py-[25px]">
          <div className="gap-[16px] flex rounded-[4px] px-[15px] py-[12px] flex-col border border-solid border-transparent bg-[rgb(254,_248,_232)]">
            <div className="gap-[8px] flex items-center ">
              <div>
                <Image
                  src={WarningIcon}
                  width={24}
                  height={24}
                  alt="warning-icon"
                />
              </div>
              <div>
                <span className="font-[Figtree] not-italic font-normal text-[14px] leading-[21px] tracking-[0.12px] text-[rgb(72,_74,_85)]">
                  The uploaded files will be saved only when submitting the
                  request from the &apos;New Request&apos; tab.
                </span>
              </div>
            </div>
          </div>
        </div>
      )}

      {documentListCondition.length > 0 && (
        <div className="flex flex-wrap justify-between  md:justify-start">
          <div className="w-full flex flex-wrap justify-between px-[8px] py-[12px]">
            <p
              className="font-[Figtree] not-italic font-semibold text-[14px] leading-[21px] tracking-[0.12px] text-[#484a55] w-[90px] justify-start"
              style={{ width: "55%" }}
            >
              File
            </p>
            <p className="font-[Figtree] not-italic font-semibold text-[14px] leading-[21px] tracking-[0.12px] text-[#484a55] w-[90px] justify-start">
              Uploaded By
            </p>
            <p className="font-[Figtree] not-italic font-semibold text-[14px] leading-[21px] tracking-[0.12px] text-[#484a55] w-[90px] justify-start">
              Upload Date
            </p>
            <p className="font-[Figtree] not-italic font-semibold text-[14px] leading-[21px] tracking-[0.12px] text-[#484a55] w-[90px] justify-start">
              Actions
            </p>
          </div>

          <div className="w-full border-b border-b-[1px_solid_rgb(219,_219,_219)]" />

          {documentListCondition.map((item) => (
            <Fragment key={item.documentName}>
              <div className="w-full flex flex-wrap justify-between px-[8px] py-[12px]">
                <a
                  style={{ width: "56%" }}
                  className="font-[Figtree] not-italic font-normal text-[14px] leading-[21px] tracking-[0.12px] text-[rgb(99,_101,_116)] flex-[0_0_auto] order-none justify-start whitespace-nowrap overflow-hidden overflow-ellipsis w-auto"
                >
                  {item.documentName}
                </a>
                <a className="font-[Figtree] not-italic font-normal text-[14px] leading-[21px] tracking-[0.12px] text-[rgb(99,_101,_116)] flex-[0_0_auto] order-none justify-start whitespace-nowrap overflow-hidden overflow-ellipsis w-auto">
                  {item.uploadedBy.fullName}
                </a>
                <a className="font-[Figtree] not-italic font-normal text-[14px] leading-[21px] tracking-[0.12px] text-[rgb(99,_101,_116)] flex-[0_0_auto] order-none justify-start whitespace-nowrap overflow-hidden overflow-ellipsis w-auto">
                  {item.createdAt ? formatDateTime(item.createdAt, true) : "-"}
                </a>
                <div className="flex">
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger>
                        <a
                          className="flex cursor-pointer mr-[8px]"
                          onClick={() => handleViewDocument(item.documentName)}
                        >
                          <Image
                            src={VisibilityOffIcon}
                            alt="visibility-icon"
                          />
                        </a>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Preview</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>

                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger>
                        <a
                          className="flex cursor-pointer mr-[8px]"
                          onClick={() => handleDownload(item.documentName)}
                        >
                          <Image src={DownloadIcon} alt="download-icon" />
                        </a>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Download</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger>
                        <a
                          className="flex cursor-pointer mr-[8px]"
                          onClick={() => handleDelete(item.documentName)}
                        >
                          <Image src={DeleteIcon} alt="delete-icon" />
                        </a>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>Delete</p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </div>
              </div>
              <div className="w-full border-b border-b-[1px_solid_rgba(0,_0,_0,_0.05)]"></div>
            </Fragment>
          ))}
        </div>
      )}
    </div>
  );
};



======================================================================================================================

Esse é o upload (que esta funcionando normal)



/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { useState, useRef, useEffect } from "react";
import axios from "axios";
import UploadDocumentIcon from "@/app/assets/svg/upload-document.svg";
import Image from "next/image";
import { useParams } from "next/navigation";

interface DocumentUpload {
  onError: (
    reason: "Large" | "UploadError" | "NotSupported" | "Upload" | "ResetError"
  ) => void;
  setDocumentList: (document: DocumentUploaded[]) => void;
  documentList: DocumentUploaded[];
  disabled?: boolean;
  userData: any;
  baseUrl: string;
  pathUrl: string;
  bucketName: string;
  itemRef?: string | undefined;
}
interface DocumentUploaded {
  documentName: string;
  documentSize?: string;
  documentStatus?: string;
  documentUUID?: string;
  documentURL?: string;
  documentURLPreview?: string;
  uploadedBy: { fullName?: string; userId?: string };
  createdAt?: string | number | Date;
}

const Uploader: React.FC<DocumentUpload> = (props) => {
  const [files, setFiles] = useState<File[]>([]);
  const [documentList, setDocumentList] = useState<DocumentUploaded[]>(
    props.documentList
  );
  const [uuid] = useState(crypto.randomUUID());
  const [uploadProgress, setUploadProgress] = useState<number | null>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [inputId] = useState(() => `file-input-${uuid}`);

  const params = useParams();

  useEffect(() => {
    const checkIfDocExists = documentList.filter(
      (item) => !props.documentList.includes(item)
    );

    if (checkIfDocExists.length === 0) {
      return;
    }

    setDocumentList(props.documentList);
  }, [props.documentList]);

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    const newFiles = Array.from(e.dataTransfer.files);

    const checkIfDocExists = documentList
      .map((doc) => {
        if (
          doc.documentName.replace(/\s/g, "_") ===
          newFiles[0].name.replace(/\s/g, "_")
        ) {
          return false;
        }
      })
      .filter((item) => item !== undefined);

    if (checkIfDocExists.length > 0) {
      return;
    }

    const getUUID = documentList.map((doc) => doc.documentUUID)[0];

    setFiles([...files, ...newFiles]);
    const uploadedDocuments: DocumentUploaded[] = newFiles.map(
      (document: any) => ({
        itemRef: props.itemRef,
        documentName: document.name,
        documentSize: document.size,
        documentStatus: document.status,
        documentUUID: getUUID ?? uuid,
        documentURL: URL.createObjectURL(document),
        documentURLPreview: URL.createObjectURL(document),
        uploadedBy: {
          fullName: props.userData.fullName,
          userId: props.userData.userName,
        },
        createdAt: new Date().toJSON(),
      })
    );
    if (e.dataTransfer.files) {
      if (handleFileValidation(e.dataTransfer.files[0])) {
        handleUpload(e.dataTransfer.files[0], uuid).then((response: any) => {
          if (response?.response?.status === 400) {
            return;
          }
          setDocumentList([...documentList, ...uploadedDocuments]);
          props.setDocumentList([...documentList, ...uploadedDocuments]);
          if (fileInputRef && fileInputRef.current) {
            fileInputRef.current.value = "";
          }
          props.onError("Upload");
        });
      }
    }
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const newFiles = Array.from(e.target.files!);

    const checkIfDocExists = documentList
      .map((doc) => {
        if (
          doc.documentName.replace(/\s/g, "_") ===
          newFiles[0].name.replace(/\s/g, "_")
        ) {
          return false;
        }
      })
      .filter((item) => item !== undefined);

    if (checkIfDocExists.length > 0) {
      return;
    }

    const getUUID = documentList.map((doc) => doc.documentUUID)[0];

    setFiles([...files, ...newFiles]);
    const uploadedDocuments: DocumentUploaded[] = newFiles.map(
      (document: any) => ({
        itemRef: props.itemRef,
        documentName: document.name,
        documentSize: document.size,
        documentStatus: document.status,
        documentUUID: getUUID ?? uuid,
        documentURL: URL.createObjectURL(document),
        documentURLPreview: URL.createObjectURL(document),
        uploadedBy: {
          fullName: props.userData.fullName,
          userId: props.userData.userName,
        },
        createdAt: new Date().toJSON(),
      })
    );
    if (e.target.files) {
      if (handleFileValidation(e.target.files[0])) {
        handleUpload(e.target.files[0], uuid).then((response: any) => {
          if (response?.response?.status === 400) {
            return;
          }
          setDocumentList([...documentList, ...uploadedDocuments]);
          props.setDocumentList([...documentList, ...uploadedDocuments]);
          if (fileInputRef && fileInputRef.current) {
            fileInputRef.current.value = "";
          }
          props.onError("Upload");
        });
      }
    }
  };

  const handleUpload = async (file: File, UUID: string) => {
    props.onError("ResetError");
    const formData = new FormData();

    formData.append("file", file);
    formData.append("application", props.bucketName);
    formData.append("randomUUID", UUID);

    try {
      await axios.post(`${props.baseUrl}${props.pathUrl}`, formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
        onUploadProgress: (progressEvent) => {
          const percent =
            Math.round(progressEvent.loaded * 100) / (progressEvent.total ?? 1);
          setUploadProgress(percent);
        },
      });
      props.onError("Upload");
      setUploadProgress(null);
    } catch (error) {
      props.onError("UploadError");
      setUploadProgress(null);

      return error;
    }
  };

  const isFileSupported = (file: File) => {
    const supportedExtensions = [
      ".PDF",
      ".EML",
      ".DOC",
      ".XLS",
      ".XLSX",
      ".SCV",
      ".PNG",
      ".JPG",
      ".DOCX",
      ".CSV",
    ];
    const fileExtension = file.name.split(".").pop()?.toUpperCase();
    return supportedExtensions.includes(`.${fileExtension}`);
  };

  const isFileSizeValid = (file: File) => {
    const maxSizeInBytes = 10 * 1024 * 1024; // 10 MB
    return file.size <= maxSizeInBytes;
  };

  const handleFileValidation = (file: File) => {
    if (file) {
      if (!isFileSupported(file)) {
        props.onError("NotSupported");
        return false;
      }
      if (!isFileSizeValid(file)) {
        props.onError("Large");
        return false;
      }
      return true;
    }
  };

  return (
    <div className={`${params.requestId && "cursor-not-allowed pointer-events-none"}`}>
      <div
        className="w-full flex"
        onDrop={handleDrop}
        onDragOver={handleDragOver}
      >
        <label
          htmlFor={inputId}
          className="box-border flex flex-col justify-center items-center p-[24px] gap-[16px] w-full h-[216px] bg-[#f7f7f8] border-[1px] border-dashed border-[#b8b8b8] rounded-[8px] flex-none order-1 self-stretch flex-grow-0 cursor-pointer"
        >
          {uploadProgress !== null ? (
            <div className="w-[30%] h-2 bg-gray-200 rounded mt-2">
              <div
                className="h-full bg-blue-500 rounded transition-all duration-300"
                style={{ width: `${uploadProgress}% ` }}
              />
            </div>
          ) : (
            <>
              <Image src={UploadDocumentIcon} alt="upload-document-icon" />
              <a className="font-[Figtree] not-italic font-normal text-[16px] leading-[24px] flex items-center text-center tracking-[0.12px] text-[#636574] flex-none order-1 flex-grow-0">
                Drag and drop your files here
              </a>
              <a className="font-[Figtree] not-italic font-normal text-[16px] leading-[24px] flex items-center text-center tracking-[0.12px] text-[#636574] flex-none order-1 flex-grow-0">
                {" "}
                Accepted file types: .pdf, .eml, .doc, .docx, .xls, .xlsx, .csv,
                .png, or .jpg (max 10 MB)
              </a>
            </>
          )}

          <input
            id={inputId}
            type="file"
            accept=".pdf, .eml, .doc, .docx, .xls, .xlsx, .csv, .png, .jpg"
            onChange={handleFileInputChange}
            multiple
            ref={fileInputRef}
            style={{ display: "none" }}
          />
        </label>
      </div>
    </div>
  );
};

export default Uploader;



============================================================================================================================================================

Aqui é o Payload do submit


{
    "code": 200,
    "data": {
        "responseId": "47cbba22-bc7c-4967-b80c-0f55cb757860",
        "transferType": {
            "content": "usd-domestic",
            "required": true
        },
        "initiator": {
            "content": "Maria Peixoto",
            "required": true
        },
        "cifAccountNumber": {
            "content": "NAA0010",
            "required": true
        },
        "accountNumber": {
            "content": "17226444-0",
            "required": true
        },
        "availableBalance": {
            "content": "0",
            "required": false
        },
        "amountUSD": {
            "content": "21",
            "required": true
        },
        "levelUrgency": {
            "content": "Normal",
            "required": false
        },
        "originSource": {
            "content": "email_ao",
            "required": true
        },
        "clientEmail": {
            "content": "",
            "required": false
        },
        "temporaryClientEmail": {
            "content": "",
            "required": false
        },
        "emailIsVerified": {
            "content": false,
            "required": false
        },
        "insufficientFunds": {
            "content": "yes",
            "required": false
        },
        "insufficientFundsComment": {
            "content": "",
            "required": false
        },
        "notificationContactAttempt": {
            "content": false,
            "required": false
        },
        "notificationProcesedPayPlus": {
            "content": false,
            "required": false
        },
        "notificationAdditionalUsers": {
            "content": false,
            "required": false
        },
        "notificationUsers": {
            "content": [],
            "required": false
        },
        "forceCallbackToggle": {
            "content": false,
            "required": false
        },
        "forceCallbackBestNumberCall": {
            "content": "",
            "required": false
        },
        "forceCallbackTemporaryPhoneNumber": {
            "content": "",
            "required": false
        },
        "emailAddress": {
            "content": [],
            "required": false
        },
        "documents": {
            "content": [
                "document.pdf"
            ],
            "required": false
        },
        "temporaryEmail": {
            "content": "",
            "required": false
        },
        "reasonTransaction": {
            "content": "sameBeneficialOwner",
            "required": true
        },
        "pleaseSpecify": {
            "content": "",
            "required": false
        },
        "bankAbaRoutingNumber": {
            "content": "",
            "required": false
        },
        "bankCountry": {
            "content": "US",
            "required": false
        },
        "beneficiaryCountry": {
            "content": "US",
            "required": false
        },
        "relationshipBeneficiary": {
            "content": "businessPartner",
            "required": true
        },
        "swiftBicBeneficiary": {
            "content": "",
            "required": false
        },
        "selectedBeneficiary": {
            "content": "",
            "required": false
        },
        "templateName": {
            "content": "",
            "required": false
        },
        "beneficiaryAccountNumber": {
            "content": "",
            "required": false
        },
        "beneficiaryBankCity": {
            "content": "",
            "required": false
        },
        "beneficiaryBankName": {
            "content": "",
            "required": false
        },
        "beneficiaryName": {
            "content": "",
            "required": false
        },
        "beneficiaryAddressLine1": {
            "content": "",
            "required": false
        },
        "beneficiaryAddressLine2": {
            "content": "",
            "required": false
        },
        "beneficiaryCity": {
            "content": "",
            "required": false
        },
        "beneficiaryState": {
            "content": "",
            "required": false
        },
        "beneficiaryZipCode": {
            "content": "",
            "required": false
        },
        "beneficiaryOBIToggle": {
            "content": false,
            "required": false
        },
        "beneficiaryOBIFFC1": {
            "content": "",
            "required": false
        },
        "beneficiaryOBIFFC2": {
            "content": "",
            "required": false
        },
        "beneficiaryOBIFFC3": {
            "content": "",
            "required": false
        },
        "beneficiaryOBIFFC4": {
            "content": "",
            "required": false
        },
        "beneficiaryToggle": {
            "content": false,
            "required": false
        },
        "accountOfficer": {
            "content": "Marcelo Fontanelli       BR 30 [571]",
            "required": false
        },
        "accountName": {
            "content": "NPK TRADING S.A.",
            "required": false
        },
        "workflow": [
            [
                {
                    "id": 1,
                    "name": "Initiator",
                    "creator": true,
                    "status": "pending",
                    "showHistory": true,
                    "successLabel": "Submitted",
                    "isClarification": false,
                    "templateNotify": {
                        "onFirstPending": null,
                        "onReturnPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Change requested",
                            "templateName": "wire-return-dep-approval.hbs"
                        },
                        "onApprovedRequest": null,
                        "OnCompletedRequest": null,
                        "OnClarificationRequest": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - More information Requested",
                            "templateName": "wire-return-dep-verification.hbs"
                        }
                    },
                    "permissions": {
                        "people": [
                            {
                                "userId": "MariaP",
                                "firstName": "Maria",
                                "lastName": "Peixoto",
                                "email": "Maria.Peixoto@safra.com"
                            }
                        ]
                    },
                    "implementation": null
                }
            ],
            [
                {
                    "id": 2,
                    "name": "Validation",
                    "status": "pending",
                    "showHistory": true,
                    "successLabel": "Submitted",
                    "templateNotify": {
                        "onFirstPending": null,
                        "onReturnPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Change requested",
                            "templateName": "wire-return-dep-approval.hbs"
                        },
                        "onApprovedRequest": null,
                        "OnCompletedRequest": null,
                        "OnClarificationRequest": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - More information Requested",
                            "templateName": "wire-return-dep-verification.hbs"
                        }
                    },
                    "permissions": {
                        "people": [
                            {
                                "userId": "Maria Peixoto"
                            }
                        ]
                    },
                    "implementation": null
                }
            ],
            [
                {
                    "id": 3,
                    "name": "Validate Workflow",
                    "type": "notification",
                    "status": "waiting",
                    "successLabel": "Notified",
                    "stepType": "netFlixWorkFlow",
                    "subWorkflowName": "WIRECLIENT_Setup_Workflow",
                    "subWorkflowInputs": {
                        "requestId": "${columns.Id}",
                        "caseId": "${columns.CaseId}"
                    },
                    "showApprovals": false,
                    "skipValidation": true,
                    "workflowSelection": {},
                    "templateNotify": {
                        "onFirstPending": null,
                        "onReturnPending": null,
                        "onApprovedRequest": null,
                        "OnCanceledRequest": null,
                        "OnClarificationRequest": null
                    },
                    "permissions": {
                        "groups": [],
                        "people": []
                    },
                    "implementation": null
                }
            ],
            [
                {
                    "id": 31,
                    "name": "Approvals and Restrictions: Acceptance",
                    "status": "waiting",
                    "requiredApprovals": "SignatureLevel",
                    "showHistory": true,
                    "showAll": true,
                    "conditionToShowStep": "",
                    "successLabel": "Approved",
                    "nextStepButton": "approve",
                    "setResult": true,
                    "templateNotify": {
                        "onFirstPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Pending your approval",
                            "templateName": "wire-manager-approval.hbs"
                        },
                        "onReturnPending": null,
                        "onApprovedRequest": null,
                        "OnCanceledRequest": null,
                        "OnClarificationRequest": null
                    },
                    "permissions": {
                        "groups": [],
                        "people": []
                    },
                    "implementation": null
                },
                {
                    "id": 32,
                    "name": "Approvals and Restrictions: Callback",
                    "status": "waiting",
                    "requiredApprovals": 2,
                    "showHistory": true,
                    "successLabel": "Approved",
                    "nextStepButton": "approve",
                    "setResult": true,
                    "conditionToShowStep": "restrictionCallback",
                    "autoApproveSameUser": false,
                    "templateNotify": {
                        "onFirstPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Pending your approval",
                            "templateName": "wire-manager-approval.hbs"
                        },
                        "onReturnPending": null,
                        "onApprovedRequest": null,
                        "OnCanceledRequest": null,
                        "OnClarificationRequest": null
                    },
                    "permissions": {
                        "groups": [],
                        "people": []
                    }
                },
                {
                    "id": 33,
                    "name": "Approvals and Restrictions: Accounting",
                    "status": "waiting",
                    "requiredApprovals": 2,
                    "showHistory": true,
                    "successLabel": "Approved",
                    "nextStepButton": "approve",
                    "setResult": true,
                    "conditionToShowStep": "restrictionAccounting",
                    "autoApproveSameUser": false,
                    "templateNotify": {
                        "onFirstPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Pending your approval",
                            "templateName": "wire-manager-approval.hbs"
                        },
                        "onReturnPending": null,
                        "onApprovedRequest": null,
                        "OnCanceledRequest": null,
                        "OnClarificationRequest": null
                    },
                    "permissions": {
                        "groups": [
                            "Accounting"
                        ],
                        "people": []
                    }
                },
                {
                    "id": 34,
                    "name": "Approvals and Restrictions: Compliance",
                    "status": "waiting",
                    "requiredApprovals": 2,
                    "showHistory": true,
                    "successLabel": "Approved",
                    "nextStepButton": "approve",
                    "setResult": true,
                    "conditionToShowStep": "restrictionCompliance",
                    "autoApproveSameUser": false,
                    "templateNotify": {
                        "onFirstPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Pending your approval",
                            "templateName": "wire-manager-approval.hbs"
                        },
                        "onReturnPending": null,
                        "onApprovedRequest": null,
                        "OnCanceledRequest": null,
                        "OnClarificationRequest": null
                    },
                    "permissions": {
                        "groups": [
                            "Compliance"
                        ],
                        "people": []
                    }
                },
                {
                    "id": 35,
                    "name": "Approvals and Restrictions: Compliance BSA",
                    "status": "waiting",
                    "requiredApprovals": 2,
                    "showHistory": true,
                    "successLabel": "Approved",
                    "nextStepButton": "approve",
                    "setResult": true,
                    "conditionToShowStep": "restrictionComplianceBsa",
                    "autoApproveSameUser": false,
                    "templateNotify": {
                        "onFirstPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Pending your approval",
                            "templateName": "wire-manager-approval.hbs"
                        },
                        "onReturnPending": null,
                        "onApprovedRequest": null,
                        "OnCanceledRequest": null,
                        "OnClarificationRequest": null
                    },
                    "permissions": {
                        "groups": [
                            "Compliance BSA"
                        ],
                        "people": []
                    }
                },
                {
                    "id": 36,
                    "name": "Approvals and Restrictions: Account Officer Approval",
                    "status": "waiting",
                    "requiredApprovals": 2,
                    "showHistory": true,
                    "successLabel": "Approved",
                    "nextStepButton": "approve",
                    "setResult": true,
                    "conditionToShowStep": "restrictionAccountOfficerApproval",
                    "autoApproveSameUser": false,
                    "templateNotify": {
                        "onFirstPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Pending your approval",
                            "templateName": "wire-manager-approval.hbs"
                        },
                        "onReturnPending": null,
                        "onApprovedRequest": null,
                        "OnCanceledRequest": null,
                        "OnClarificationRequest": null
                    },
                    "permissions": {
                        "groups": [
                            ""
                        ],
                        "people": []
                    }
                },
                {
                    "id": 37,
                    "name": "Approvals and Restrictions: Credit",
                    "status": "waiting",
                    "requiredApprovals": 2,
                    "showHistory": true,
                    "successLabel": "Approved",
                    "nextStepButton": "approve",
                    "setResult": true,
                    "conditionToShowStep": "restrictionCredit",
                    "autoApproveSameUser": false,
                    "templateNotify": {
                        "onFirstPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Pending your approval",
                            "templateName": "wire-manager-approval.hbs"
                        },
                        "onReturnPending": null,
                        "onApprovedRequest": null,
                        "OnCanceledRequest": null,
                        "OnClarificationRequest": null
                    },
                    "permissions": {
                        "groups": [
                            ""
                        ],
                        "people": []
                    }
                },
                {
                    "id": 38,
                    "name": "Approvals and Restrictions: Branch",
                    "status": "waiting",
                    "requiredApprovals": 2,
                    "showHistory": true,
                    "successLabel": "Approved",
                    "nextStepButton": "approve",
                    "setResult": true,
                    "conditionToShowStep": "restrictionBranch",
                    "autoApproveSameUser": false,
                    "templateNotify": {
                        "onFirstPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Pending your approval",
                            "templateName": "wire-manager-approval.hbs"
                        },
                        "onReturnPending": null,
                        "onApprovedRequest": null,
                        "OnCanceledRequest": null,
                        "OnClarificationRequest": null
                    },
                    "permissions": {
                        "groups": [
                            ""
                        ],
                        "people": []
                    }
                },
                {
                    "id": 39,
                    "name": "Approvals and Restrictions: Fraud",
                    "status": "waiting",
                    "requiredApprovals": 2,
                    "showHistory": true,
                    "successLabel": "Approved",
                    "nextStepButton": "approve",
                    "setResult": true,
                    "conditionToShowStep": "restrictionFraud",
                    "autoApproveSameUser": false,
                    "templateNotify": {
                        "onFirstPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Pending your approval",
                            "templateName": "wire-manager-approval.hbs"
                        },
                        "onReturnPending": null,
                        "onApprovedRequest": null,
                        "OnCanceledRequest": null,
                        "OnClarificationRequest": null
                    },
                    "permissions": {
                        "groups": [
                            ""
                        ],
                        "people": []
                    }
                }
            ],
            [
                {
                    "id": 4,
                    "name": "Restriction Removal",
                    "status": "waiting",
                    "showHistory": true,
                    "successLabel": "Submitted",
                    "templateNotify": {
                        "onFirstPending": null,
                        "onReturnPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Change requested",
                            "templateName": "wire-return-dep-approval.hbs"
                        },
                        "onApprovedRequest": null,
                        "OnCompletedRequest": null,
                        "OnClarificationRequest": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - More information Requested",
                            "templateName": "wire-return-dep-verification.hbs"
                        }
                    },
                    "permissions": {
                        "people": [
                            {
                                "userId": "Maria Peixoto"
                            }
                        ]
                    },
                    "implementation": null
                }
            ],
            [
                {
                    "id": 5,
                    "name": "Wire Repair",
                    "status": "waiting",
                    "showHistory": true,
                    "successLabel": "Submitted",
                    "templateNotify": {
                        "onFirstPending": null,
                        "onReturnPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Change requested",
                            "templateName": "wire-return-dep-approval.hbs"
                        },
                        "onApprovedRequest": null,
                        "OnCompletedRequest": null,
                        "OnClarificationRequest": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - More information Requested",
                            "templateName": "wire-return-dep-verification.hbs"
                        }
                    },
                    "permissions": {
                        "people": [
                            {
                                "userId": "Maria Peixoto"
                            }
                        ]
                    },
                    "implementation": null
                }
            ],
            [
                {
                    "id": 6,
                    "name": "OFAC",
                    "status": "waiting",
                    "successLabel": "Issued",
                    "nextStepButton": "issued",
                    "stepType": "netFlixWorkFlow",
                    "subWorkflowName": "WIRE_OFAC_Scan",
                    "subWorkflowInputs": {
                        "requestId": "${columns.Id}",
                        "caseId": "${columns.CaseId}",
                        "etlName": "ofac",
                        "caseNumber": "${columns.CaseNumber}"
                    },
                    "setResult": true,
                    "templateNotify": {
                        "onFirstPending": {
                            "subject": "Request $CASENUMBER$ - $REQUESTTYPE$ - Pending your approval",
                            "templateName": "tr_pending_to_process.hbs"
                        },
                        "onReturnPending": {
                            "subject": "Request $CASENUMBER$ - $REQUESTTYPE$ - Rescheculing Request",
                            "templateName": "tr_rescheduling_approve.hbs"
                        },
                        "onApprovedRequest": null,
                        "OnCanceledRequest": {
                            "subject": "Request $CASENUMBER$ - $REQUESTTYPE$ - Canceled",
                            "templateName": "tr_completed_canceled.hbs"
                        },
                        "OnRejectRequest": null
                    },
                    "permissions": {
                        "people": [
                            {
                                "userId": "ofac",
                                "firstName": "OFAC",
                                "lastName": "Check",
                                "email": "ofac"
                            }
                        ]
                    },
                    "idStepReturn": 1
                }
            ],
            [
                {
                    "id": 7,
                    "name": "Processing",
                    "status": "waiting",
                    "successLabel": "Submitted",
                    "stepType": "manualNetflix",
                    "nextStepButton": "approved",
                    "setResult": true,
                    "subWorkflowName": "WIRE_Payplus",
                    "subWorkflowInputs": {
                        "requestId": "${columns.Id}",
                        "caseId": "${columns.CaseId}"
                    },
                    "templateNotify": {
                        "onFirstPending": null,
                        "onReturnPending": null,
                        "onApprovedRequest": null,
                        "OnCanceledRequest": null,
                        "OnRejectRequest": null
                    },
                    "permissions": {
                        "canReturn": false,
                        "canCancel": true,
                        "canEdit": false,
                        "canComment": false,
                        "canSave": false,
                        "canSubmit": false,
                        "canHavePeopleAdded": false,
                        "canContingency": true,
                        "groups": [
                            "Wire Transfer"
                        ],
                        "people": []
                    },
                    "implementation": null
                }
            ],
            [
                {
                    "id": 8,
                    "name": "Initiator Notified",
                    "type": "notification",
                    "status": "waiting",
                    "successLabel": "Notified",
                    "stepType": "netFlixWorkFlow",
                    "subWorkflowName": "WIRECLIENT_Initiator_Notified",
                    "nextStepButton": "approved",
                    "subWorkflowInputs": {
                        "requestId": "${columns.Id}",
                        "caseId": "${columns.CaseId}"
                    },
                    "showApprovals": false,
                    "skipValidation": true,
                    "templateNotify": {
                        "onFirstPending": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Approved",
                            "templateName": "wire-approved-request.hbs"
                        },
                        "onReturnPending": null,
                        "onApprovedRequest": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Approved",
                            "templateName": "wire-approved-request.hbs"
                        },
                        "OnCanceledRequest": {
                            "subject": "Request DEPTWT$CASENUMBER$ - $REQUESTTYPE$ - Canceled",
                            "templateName": "wire-canceled-request.hbs"
                        },
                        "OnClarificationRequest": null
                    },
                    "permissions": {
                        "people": [
                            {
                                "userId": "Maria Peixoto"
                            }
                        ]
                    },
                    "implementation": null
                }
            ]
        ],
        "externalLoads": null,
        "caseStatus": "pending",
        "createdBy": "MariaP",
        "caseNumber": "WIRE233",
        "createdAt": "2025-07-22T02:53:27.777",
        "workflowConfigId": "b4ca0dd3-a233-4f9d-b9c5-88fc0cf17fbd",
        "conductorId": "b2268b5e-010d-4492-b01e-7c6170c58493"
    }
}


