type CardRow = {
  title: string;
  value: string;
  level: string;
  date?: string;
};

function groupCardRows(cardRows: CardRow[]): CardRow[] {
  const grouped: Record<string, CardRow[]> = {};

  cardRows.forEach((item) => {
    // Mantém “Request Status” como está
    if (item.title.trim() === "Request Status") {
      if (!grouped[item.title]) grouped[item.title] = [];
      grouped[item.title].push(item);
      return;
    }

    // Remove prefixo e número final (ex: “Approvals and Restrictions: Acceptance 1” -> “Acceptance”)
    let baseTitle = item.title
      .replace(/^Approvals and Restrictions:\s?/, "") // tira o prefixo
      .replace(/\s+\d+$/, "") // tira o número final
      .trim();

    if (!grouped[baseTitle]) grouped[baseTitle] = [];
    grouped[baseTitle].push(item);
  });

  // Agrupa: cada grupo vira um único card, valores/levels como linhas internas
  return Object.entries(grouped).map(([baseTitle, rows]) => ({
    title: baseTitle,
    value: rows.map((row) => row.value).join("<br/>"),
    level: rows.map((row) => row.level).join("<br/>"),
    date: rows.map((row) => row.date || "").join("<br/>"),
  }));
}
