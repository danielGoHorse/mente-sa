import { FeeCase } from '#src/models/entities/FeeCase.js'
import { Field } from '#src/models/entities/Fields.js'
import Result from '#features/shared/result.js'
import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js'

export default class FeeGetByCifUseCase {
  async execute({ customerAccount }) {
    global.logger.info('FeeGetByCifUseCase()')

    const result = {
      customerName: '', 
      customerAddress: '',
      customerAccountOfficer: '',
      cif: customerAccount[0].cifno,
      fees: [],
      feesActives: [],
      documentUrl: '',
      currentFees: []
    };

    // 📌 1️⃣ - Buscar os dados de Fees (Standard e Exception)
    const feesData = await this.#getFeesFromSQL(customerAccount[0].cifno);

    // 📌 2️⃣ - Organizar Fees por categoria (Standard, Current, Exception)
    result.fees = this.#mapFeesByCategory(feesData);

    // 📌 3️⃣ - Buscar Fees Ativos (Casos Pendentes)
    const feesActives = await FeeCase.find({
      cif: customerAccount[0].cifno,
      status: { $nin: ['DONE', 'REJECTED'] },
      caseNumber: { $exists: true }
    });

    result.feesActives = feesActives.map((x) => ({
      caseNumber: x.caseNumber,
      id: x.id
    }));

    // 📌 4️⃣ - URL do Documento (Schedule Type)
    result.documentUrl = `https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=U2NoZWR1bGVPZkZlZXMucGRm`;

    // 📌 5️⃣ - Mapear o "currentFees" baseado nos valores da procedure
    result.currentFees = this.#mapCurrentFees(feesData);

    return Result.ok(result);
  }

  /**
   * 📌 Buscar Fees (Standard + Exception) do SQL
   */
  async #getFeesFromSQL(cifno) {
    global.logger.info('getFeesFromSQL()')

    const connection = await connectToFeeMgmtDb();

    // 🚀 Buscar dados da procedure
    const recordset = await executeStoreProcedure(connection, 'sp_get_fees_byCIF', { cifno });

    return recordset;
  }

  /**
   * 📌 Organiza os Fees nos grupos (Standard, Current, Exception)
   */
  #mapFeesByCategory(feesData) {
    const mappedFees = [];

    feesData.forEach(record => {
      // Identificar se é Standard ou Exception
      const isException = record.StandardException === 'Exception';
      const isCurrentClient = record.FeeAmount > 0; // Se FeeAmount tem valor, então é Current

      const field = {
        code: record.FeeCode,
        name: record.FeeDescription,
        defaultValue: record.DefaultFeeAmount || '',
        isStandard: !isException,
        isException: isException,
        isCurrentClient: isCurrentClient,
        labelValue: record.FeeAmount ? `$${record.FeeAmount}.00` : '',
        exceptionOptions: isException ? this.#parseExceptionOptions(record) : [],
      };

      // Criar o grupo correto
      let feeGroup = mappedFees.find(f => f.feeType === record.FeeType);
      if (!feeGroup) {
        feeGroup = { feeType: record.FeeType, feeGroups: [] };
        mappedFees.push(feeGroup);
      }

      // Adicionar o campo ao grupo correto
      let targetGroup;
      if (isException) {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Exception Request');
        if (!targetGroup) {
          targetGroup = { name: 'Exception Request', fields: [] };
          feeGroup.feeGroups.push(targetGroup);
        }
      } else if (isCurrentClient) {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Client Current Fees');
        if (!targetGroup) {
          targetGroup = { name: 'Client Current Fees', fields: [] };
          feeGroup.feeGroups.push(targetGroup);
        }
      } else {
        targetGroup = feeGroup.feeGroups.find(g => g.name === 'Standard Fees');
        if (!targetGroup) {
          targetGroup = { name: 'Standard Fees', fields: [] };
          feeGroup.feeGroups.push(targetGroup);
        }
      }

      targetGroup.fields.push(field);
    });

    return mappedFees;
  }

  /**
   * 📌 Converte ExceptionOptions para o formato correto
   */
  #parseExceptionOptions(record) {
    return [
      {
        value: record.DefaultFeeAmount,
        text: `$${record.DefaultFeeAmount}.00`,
        visible: true,
        retired: false
      },
      {
        value: '0',
        text: '$0.00',
        visible: true,
        retired: false
      }
    ];
  }

  /**
   * 📌 Mapear os valores de "currentFees"
   */
  #mapCurrentFees(feesData) {
    return feesData
      .filter(record => record.FeeAmount > 0)
      .map(record => ({
        feeDescription: `${record.FeeDescription} - $${record.FeeAmount}.00`,
        feeCode: `${record.FeeType} ${record.ACCTNO}`
      }));
  }
}
