// FeeGetByCifUseCase.js
// —————————— ALTERAÇÕES PRINCIPAIS ——————————

// ▶ 1. NOVO método que traz *todos* os campos do SQL
async #getPackageDataFromSQL(cifno) {
  const conn = await connectToFeeMgmtDb();
  const [row] =
    await executeStoreProcedure(conn, 'sp_get_fees_byCIF', { cifno });

  if (!row) return {};

  return {
    defaultFeePackageId: row['Default Fee Package Id'] ?? null,
    branchCity:          row['Branch City']?.trim()         || '',
    branchState:         row['Branch State']?.trim()        || '',
    branchType:          row['Branch Type']?.trim()         || '',
    defaultPackageType:  row['Default Package Type']?.trim()|| '',
    feePackage:          row['Default Fee Package']?.trim() || ''
  };
}

// ▶ 2. NO execute() — logo depois de obter customerAccount
const pkgData = await this.#getPackageDataFromSQL(customerAccount[0].cifno);

// monta a URL do PDF
result.documentUrl = this.#getDocumentUrl(pkgData.defaultFeePackageId);

// injeta os novos campos em todas as contas recebidas
customerAccount.forEach(acc =>
  Object.assign(acc, pkgData)
);

// estes campos agora viajam para o conductor dentro de
//   responseFee.data.accounts[*]  — nada muda no código do conductor
