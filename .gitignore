import { FeeCase } from '#src/models/entities/FeeCase.js';
import Result from '#features/shared/result.js';
import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js';

export default class FeeGetByCifUseCase {
  async execute({ customerAccount }) {
    global.logger.info('FeeGetByCifUseCase()');

    const cifno = customerAccount[0].cifno;
    const feesData = await this.#getFeesFromSQL(cifno);

    if (!feesData.length) {
      return Result.fail({ message: "No data found for this CIF" });
    }

    const feePackageId = feesData[0]['Default Fee Package Id'] || null;
    const exceptionData = feePackageId ? await this.#getExceptionFeesFromSQL(feePackageId) : [];

    const result = {
      cif: feesData[0]?.CIFNO?.trim() || cifno,
      customerName: feesData[0]?.CustomerName?.trim() || '',
      customerShortName: feesData[0]?.CustomerShortName?.trim() || '',
      customerAddress: feesData[0]?.CustomerAddress?.trim() || '',
      customerAccountOfficer: feesData[0]?.Officer?.trim() || '',
      officerId: feesData[0]?.OfficerId?.trim() || '',
      branchCity: feesData[0]?.['Branch City']?.trim() || '',
      branchState: feesData[0]?.['Branch State']?.trim() || '',
      branchType: feesData[0]?.['Branch Type']?.trim() || '',
      defaultPackageType: feesData[0]?.['Default Package Type'] || '',
      feePackage: feesData[0]?.['Default Fee Package']?.trim() || '',
      defaultFeePackageId: feesData[0]?.['Default Fee Package Id'] || '',
      fees: this.#mapFeesByCategory(feesData, exceptionData),
      feesActives: await this.#getActiveFees(cifno),
      documentUrl: this.#getDocumentUrl(feePackageId),
      currentFees: this.#mapCurrentFees(feesData)
    };

    return Result.ok(result);
  }

  async #getFeesFromSQL(cifno) {
    const connection = await connectToFeeMgmtDb();
    return executeStoreProcedure(connection, 'sp_get_fees_byCIF', { cifno });
  }

  async #getExceptionFeesFromSQL(feePackageId) {
    const connection = await connectToFeeMgmtDb();
    return executeStoreProcedure(connection, 'sp_get_exception_fees_bypackage', { feePackageId });
  }

  async #getActiveFees(cifno) {
    const feesActives = await FeeCase.find({
      cif: cifno,
      status: { $nin: ['DONE', 'REJECTED'] },
      caseNumber: { $exists: true }
    });

    return feesActives.map(x => ({
      caseNumber: x.caseNumber,
      id: x.id
    }));
  }

  #mapFeesByCategory(feesData, exceptionData) {
    const allowedFeeTypes = ["Customer Fees", "Bank Account Fees", "Investment Account Fees"];
    
    return feesData
      .filter(record => allowedFeeTypes.includes(record.FeeType))
      .map(record => ({
        feeType: record.FeeType,
        feeGroups: [{
          name: record.StandardException === 'Exception' ? "Exception Request" : "Standard Fees",
          fields: [{
            code: record.FeeCode,
            name: record.FeeDescription,
            amount: record.FeeAmount || 0,
            labelValue: record.FeeAmount ? `$${record.FeeAmount}.00` : '',
            isException: record.StandardException === 'Exception',
            exceptionOptions: record.StandardException === 'Exception' ? this.#parseExceptionOptions(exceptionData, record) : []
          }]
        }]
      }));
  }

  #parseExceptionOptions(exceptionData, record) {
    return exceptionData
      .filter(exc => exc.FeeCode === record.FeeCode)
      .map(exc => ({
        value: exc.Amount,
        text: `$${exc.Amount}.00`
      }));
  }

  #getDocumentUrl(feePackageId) {
    return global.environment.scheduleUrls?.[feePackageId] || '';
  }

  #mapCurrentFees(feesData) {
    return feesData
      .filter(record => record.FeeAmount > 0)
      .map(record => ({
        feeDescription: `${record.FeeDescription} - $${record.FeeAmount}.00`,
        feeCode: record.FeeType
      }));
  }
}
