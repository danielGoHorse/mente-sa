return approvalsSteps.map((approvalStep: any, idx: number) => {
  /* ――― 1. Quantas aprovações são necessárias ――― */
  const required =
    typeof approvalStep.requiredApprovals === "number"
      ? approvalStep.requiredApprovals
      : approvalStep.permissions?.people?.length ?? 0;

  /* ――― 2. Quantas já foram feitas (type === "success") ――― */
  const completed =
    approvalStep.permissions?.people?.filter(
      (p: any) => p.action?.[0]?.type === "success"
    ).length ?? 0;

  /* ――― 3. Texto do título sem o prefixo grande + sufixo (0/2) ――― */
  const cleanedName = approvalStep.name
    .replace(/^Approvals and Restrictions:\s?/, "")
    .trim();
  const nameWithCount = `${cleanedName} (${completed}/${required})`;

  /* ――― 4. Render ――― */
  return (
    <Fragment key={`approval-${approvalStep.id || idx}`}>
      {/* --- Título da linha --- */}
      <TableStep.Title status={approvalStep.status as workflowStatus}>
        <span className="font-normal">
          {`${groupIdx + 1}.${idx + 1} `}
        </span>
        <span className="font-semibold ml-2">{nameWithCount}</span>
      </TableStep.Title>

      {/* --- Cabeçalho das colunas (permanece igual) --- */}
      <TableStep.Columns>
        <TableStep.Line>Participant</TableStep.Line>
        <TableStep.Line>Signature</TableStep.Line>
        <TableStep.Line>Completed</TableStep.Line>
        <TableStep.Line>Status</TableStep.Line>
        <TableStep.Line>Result</TableStep.Line>
        <TableStep.Line>Comments</TableStep.Line>
      </TableStep.Columns>

      {/* --- Participantes (mesmo código que você já tinha) --- */}
      {approvalStep.permissions?.people?.map(
        (people: any, pidx: number, arr: any[]) => (
          <Fragment key={`${approvalStep.id}-${people.userId}-${pidx}`}>
            <TableStep.Body>
              {/* ... resto do corpo, sem alterações ... */}
            </TableStep.Body>
            {pidx !== arr.length - 1 && (
              <div className="border-b border-[#EBEBEB] mx-10" />
            )}
          </Fragment>
        )
      )}
    </Fragment>
  );
});
