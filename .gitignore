#addCurrentClientValue(equityField) {
  for (const feeGroup of this.#investiment.feeGroups) {
    feeGroup.cif = this.#accounts[0]?.cifno || null;

    for (const field of feeGroup.fields) {
      if (field.isException) {
        // Continua a mesma regra de exceção
        field.labelValue = field.labelValue || '';
      } else {
        // 1) Se estivermos no grupo “Client Current Fees”, 
        // e o code for 6,7,9, etc. (caso exista), 
        // use a regra que você já tem para trocar defaultValue p/ tooltip se vazio
        if (
          feeGroup.name === "Client Current Fees" &&
          (field.code === 7 || field.code === 9 || field.code === 6) &&
          (!field.defaultValue || field.defaultValue.trim() === "")
        ) {
          field.defaultValue = field.tooltip || '';
          field.labelValue = field.defaultValue;
        } else {
          // 2) Se for code=7 => pular parseFloat e exibir o valor textual
          if (field.code === 7) {
            // Mantenha a string "Equity: ... ; Option: ..."
            field.labelValue = field.defaultValue;
          } 
          // 3) Se for code=5 => formata com "$" e duas casas
          else if (field.code === 5) {
            const numValue = parseFloat(field.defaultValue);
            field.labelValue = !isNaN(numValue) ? "$" + numValue.toFixed(2) : field.defaultValue;
          } 
          // 4) Se for Standard Fees com code=6 => exibe textual
          else if (feeGroup.name === "Standard Fees" && field.code === 6) {
            field.labelValue = field.defaultValue;
          } 
          // 5) Caso contrário => parse numérico normal
          else {
            const numValue = parseFloat(field.defaultValue);
            field.labelValue =
              !isNaN(numValue) ? "$" + numValue.toFixed(2) : field.defaultValue;
          }
        }
      }
    }
  }
  this.#clearMemory();
}
