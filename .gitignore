/* src/features/feeGetByCif/feeGetByCifUseCase.js
   — apenas Standard ajustado
------------------------------------------------------------------- */
import { Fee }               from '#src/models/entities/Fees.js';
import Result                from '#features/shared/result.js';
import CustomerFees          from '#src/models/CustomerFees.js';
import BankAccountFee        from '#src/models/BankAccountFee.js';
import InvestimentAccountFee from '#src/models/InvestimentAccountFee.js';
import { FeeCase }           from '#src/models/entities/FeeCase.js';
import { Field }             from '#src/models/entities/Fields.js';
import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js';

/* helpers SQL ---------------------------------------------------- */
async function getPackageData(cifno) {
  const conn = await connectToFeeMgmtDb();
  const [row] = await executeStoreProcedure(conn,'sp_get_fees_byCIF',{ cifno });
  return row ? {
    defaultFeePackageId: row['Default Fee Package Id'] ?? null,
    branchCity:          row['Branch City']?.trim()         || '',
    branchState:         row['Branch State']?.trim()        || '',
    branchType:          row['Branch Type']?.trim()         || '',
    defaultPackageType:  row['Default Package Type']?.trim()|| '',
    feePackage:          row['Default Fee Package']?.trim() || ''
  } : {};
}

const getStandardFees  = async id =>
  executeStoreProcedure(await connectToFeeMgmtDb(),
                        'sp_get_standard_fees_bypackage',
                        { FeePackageId:id });

const getExceptionFees = async id =>
  executeStoreProcedure(await connectToFeeMgmtDb(),
                        'sp_get_exception_fees_bypackage',
                        { FeePackageId:id });

/* aplica FeeAmount → defaultValue no grupo “Standard Fees” */
function applyStandardAmounts(fees, stdRows){
  const amountByType = new Map(
        stdRows.map(r => [ Number(r.FeeType), Number(r.FeeAmount) ]));

  fees.forEach(fee=>{
    const stdGrp = fee.feeGroups?.find(g => g.name === 'Standard Fees');
    if(!stdGrp) return;

    stdGrp.fields.forEach(field=>{
      const amt = amountByType.get(field.code);
      if(amt !== undefined) field.defaultValue = amt.toString();
    });
  });
}

const getDocumentUrl = id =>{
  const urls = global.environment.scheduleUrls || {};
  const key  = ({1:'intlPB3',2:'uSPBIndividual3',3:'uSPBCorporation3'})[id];
  return key ? urls[key]||'' : '';
};

const getFeeStandard = filter =>
  Fee.find({ $or:filter })
     .select({ feeType:1, feeGroups:{name:1,fields:1,code:1} })
     .lean();

/* ================================================================= */
export default class FeeGetByCifUseCase{
  async execute({ customerAccount }){
    /* 1. Mongo (estrutura) */
    const fees = await getFeeStandard([
      {feeType:'Customer Fees'},
      {feeType:'Bank Account Fees'},
      {feeType:'Investment Account Fees'}
    ]);

    /* 2. SQL: package + listas */
    const pkgData   = await getPackageData(customerAccount[0].cifno);
    const packageId = pkgData.defaultFeePackageId ?? 1;

    const [stdRows, excRows] = await Promise.all([
      getStandardFees (packageId),
      getExceptionFees(packageId)
    ]);
    /* ——> insere feeAmount padrão no objeto fees */
    applyStandardAmounts(fees, stdRows);

    /* 3. mescla dados de package + exceptions na lista de contas */
    customerAccount.forEach(acc=>{
      Object.assign(acc, pkgData);

      const exc = excRows.find(e => e.FeeCode === acc.feeCode);
      if(exc) acc.exceptionAmount = Number(exc.Amount);
    });

    /* 4. builders já existentes */
    const result = { fees:[] };
    const [cust,bank,inv] = [
      new CustomerFees(fees,customerAccount),
      new BankAccountFee(fees,customerAccount),
      new InvestimentAccountFee(
        fees,customerAccount, await Field.findOne({code:7}))
    ];
    [cust,bank,inv].filter(f=>f.fee?.feeGroups?.length)
                   .forEach(f=>result.fees.push(f.fee));

    /* casos ativos */
    const actives = await FeeCase.find({
      cif:customerAccount[0].cifno,
      status:{$nin:['DONE','REJECTED']},
      caseNumber:{$exists:true}
    });
    result.feesActives = actives.map(({caseNumber,id})=>({caseNumber,id}));

    /* contas detalhadas */
    const docUrl = getDocumentUrl(packageId);
    result.accounts = customerAccount.map(acc=>({
      cifno:               acc.cifno,
      ddaNumber:           acc.ddaNumber,
      branchCity:          acc.branchCity,
      branchState:         acc.branchState,
      branchType:          acc.branchType,
      defaultPackageType:  acc.defaultPackageType,
      feePackage:          acc.feePackage,
      defaultFeePackageId: acc.defaultFeePackageId,
      defaultFeePackage:   acc.defaultFeePackage,
      documentUrl:         docUrl,
      exceptionAmount:     acc.exceptionAmount ?? null
    }));
    result.documentUrl = docUrl;

    return Result.ok(result);
  }
}
