import numberToCurrency from '../core/helpers/currency.js'

export default class CustomerFees {
  #feeName = 'Customer Fees'
  #customer = {}
  #accounts = []
  #clientCurrent = []
  constructor(fees, accounts) {
    global.logger.info('CustomerFees()')

    const feeTypes = accounts.reduce((acc, item) => {
      if (item.feeType > 2) return acc
      acc = item.feeType
      return acc
    }, 0)

    this.#customer = fees.filter((x) => x.feeType === this.#feeName)[0]

    this.#customer.feeGroups.forEach((feeGroup) => {
      feeGroup.fields = feeGroup.fields.filter((x) => x.code <= feeTypes)
      feeGroup.fields?.forEach((item) => {
        item.exceptionOptions = item.exceptionOptions.filter((x) => !x.retired)
      })
    })

    this.#accounts = accounts.filter(
      (x) => x.feeGroup === this.#customer.feeGroups[0].code
    )

    this.#customer.feeGroups[0].kycMailingStatus =
      accounts.find((account) => account.feeType === 2)?.kycMailingStatus ||
      null
    this.#customer.feeGroups[0].fields.forEach((field) => {
      field.labelValue = numberToCurrency(field.defaultValue)
    })

    this.#clientCurrent = this.#customer.feeGroups[1].fields
    this.#configureCustomer()

    this.#customer.feeGroups[2].fields.forEach((field, fieldIndex) => {
      field.labelValue =
        this.#customer.feeGroups[1].fields[fieldIndex].labelValue
      if (
        field.code === 2 &&
        this.#customer.feeGroups[0].kycMailingStatus !== 'Hold Mail'
      ) {
        field.defaultValue = field.labelValue
        field.exceptionOptions = [
          {
            value: field.defaultValue,
            text: field.defaultValue
          }
        ]
      }
    })
  }

  get fee() {
    return this.#customer
  }

  #configureCustomer() {
    global.logger.info('configureCustomer()')

    if (this.#accounts && this.#accounts.length < 1) {
      this.#customer = {}
      return
    }

    for (const field of this.#clientCurrent) {
      for (const account of this.#accounts) {
        if (field.isCurrentClient && field.code === account.feeType) {
          if (
            field.code === 2 &&
            this.#customer.feeGroups[0].kycMailingStatus !== 'Hold Mail'
          ) {
            field.defaultValue = 'NOT APPLICABLE'
            field.labelValue = field.defaultValue
          } else {
            field.defaultValue = account.feeAmount.toString()
            field.labelValue = numberToCurrency(field.defaultValue)
          }
        }
      }
    }

    for (const feeGroup of this.#customer.feeGroups) {
      feeGroup.cif = this.#accounts[0].cifno
      feeGroup.accountNumber = this.#accounts[0].ddaNumber
    }

    this.#clearMemory()
  }

  #clearMemory() {
    this.#accounts = []
    this.#clientCurrent = []
  }
}



import { FeeGroup } from './entities/FeeGroups.js'
import numberToCurrency from '../core/helpers/currency.js'

export default class BankAccountFee {
  #feeName = 'Bank Account Fees'
  #bank = {}
  #accounts = []
  #accountsDDA = []
  constructor(fees, accounts) {
    global.logger.info('BankAccountFee()')

    this.#bank = fees.filter((x) => x.feeType === this.#feeName)[0]
    const feeGroupCode = this.#bank.feeGroups[0].code

    this.#accounts = accounts.filter(
      (x) => x.feeGroup === this.#bank.feeGroups[0].code
    )

    this.#accountsDDA = new Set(
      accounts
        .filter((x) => x.feeGroup === feeGroupCode)
        .map((x) => x.ddaNumber)
    )

    this.#addMultiplesAccount(this.#accounts[0].cifno)
    this.#addCurrentClientValue()
  }

  get fee() {
    return this.#bank
  }

  #addMultiplesAccount(cif) {
    global.logger.info('addMultiplesAccount()')

    if (this.#accounts && this.#accounts.length < 1) {
      this.#bank = {}
    }
    const result = {}
    for (const feeGroup of this.#bank.feeGroups) {
      for (const numberAccount of this.#accountsDDA) {
        if (!result[numberAccount]) result[numberAccount] = []

        feeGroup.fields?.forEach((item) => {
          item.exceptionOptions = item.exceptionOptions.filter(
            (x) => !x.retired
          )
        })

        const newFeeGroup = new FeeGroup({
          name: feeGroup.name,
          fields: feeGroup.fields,
          cif,
          accountNumber: numberAccount,
          visible: feeGroup.visible,
          code: feeGroup.code
        })

        result[numberAccount].push(newFeeGroup)
      }
    }
    const feeGroupsByAccount = Object.keys(result).map((item) => result[item])
    this.#bank.feeGroups = []
    for (const feeGroups of feeGroupsByAccount) {
      for (const feeGroup of feeGroups) {
        this.#bank.feeGroups.push(feeGroup)
      }
    }
  }

  #addCurrentClientValue() {
    global.logger.info('addCurrentClientValue()')

    if (this.#accounts && this.#accounts.length < 1) {
      this.#bank = {}
      return
    }

    for (const [feeGroupIndex, feeGroup] of this.#bank.feeGroups.entries()) {
      feeGroup.cif = this.#accounts[0].cifno
      for (const [fieldIndex, field] of feeGroup.fields.entries()) {
        if (field.isException) {
          field.labelValue =
            this.#bank.feeGroups[feeGroupIndex - 1].fields[
              fieldIndex
            ].labelValue
        } else {
          for (const account of this.#accounts) {
            if (
              field.code === account.feeType &&
              feeGroup.accountNumber === account.ddaNumber.toString()
            ) {
              if (field.isCurrentClient) {
                field.defaultValue = account.feeAmount.toString()
              }
              field.labelValue = numberToCurrency(field.defaultValue)
            }
          }
        }
      }
    }

    this.#clearMemory()
  }

  #clearMemory() {
    this.#accounts = []
    this.#accountsDDA = []
  }
}
