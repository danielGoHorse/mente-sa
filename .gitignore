Unhandled Promise Rejection: err:  Procedure or function 'sp_get_fees_byCIF' expects parameter '@cifno', which was not supplied.
apiServer.js:148
RequestError: Procedure or function 'sp_get_fees_byCIF' expects parameter '@cifno', which was not supplied.
    at handleError (H:\Documents\fee-management-backend\node_modules\mssql\lib\tedious.js:888:15)
    at Connection.emit (node:events:514:28)
    at Parser.<anonymous> (H:\Documents\fee-management-backend\node_modules\tedious\lib\connection.js:716:12)
    at Parser.emit (node:events:514:28)
    at Parser.<anonymous> (H:\Documents\fee-management-backend\node_modules\tedious\lib\token\token-stream-parser.js:27:14)
    at Parser.emit (node:events:514:28)
    at addChunk (H:\Documents\fee-management-backend\node_modules\tedious\node_modules\readable-stream\lib\_stream_readable.js:279:12)
    at readableAddChunk (H:\Documents\fee-management-backend\node_modules\tedious\node_modules\readable-stream\lib\_stream_readable.js:262:11)
    at Readable.push (H:\Documents\fee-management-backend\node_modules\tedious\node_modules\readable-stream\lib\_stream_readable.js:228:10)
    at Transform.push (H:\Documents\fee-management-backend\node_modules\tedious\node_modules\readable-stream\lib\_stream_transform.js:132:32)

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import { Fee } from '#src/models/entities/Fees.js'
import Result from '#features/shared/result.js'
import CustomerFees from '#src/models/CustomerFees.js'
import BankAccountFee from '#src/models/BankAccountFee.js'
import InvestimentAccountFee from '#src/models/InvestimentAccountFee.js'
import { FeeCase } from '#src/models/entities/FeeCase.js'
import { Field } from '#src/models/entities/Fields.js'
import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js'

export default class FeeGetByCifUseCase {
  // async execute({ customerAccount }) {
  //   // global.logger.info('FeeGetByCifUseCase()')

  //   const result = { fees: [] }
  //   const fees = await this.#getFeeStandard([
  //     {
  //       feeType: 'Customer Fees'
  //     },
  //     {
  //       feeType: 'Bank Account Fees'
  //     },
  //     {
  //       feeType: 'Investment Account Fees'
  //     }
  //   ])

  //   const customer = new CustomerFees(fees, customerAccount)
  //   if (customer.fee) result.fees.push(customer.fee)
  //   // global.logger.info('After Customer Fees')
  //   const bank = new BankAccountFee(fees, customerAccount)
  //   if (bank.fee) result.fees.push(bank.fee)
  //   // global.logger.info('After Bank Account Fees')
  //   const equityField = await Field.find({ code: 7 })
  //   const investiment = new InvestimentAccountFee(
  //     fees,
  //     customerAccount,
  //     equityField[0]
  //   )
  //   if (investiment.fee?.feeGroups) result.fees.push(investiment.fee)
  //   // global.logger.info('After Investment Account Fees')
  //   const feesActives = await FeeCase.find({
  //     cif: customerAccount[0].cifno,
  //     status: {
  //       $nin: ['DONE', 'REJECTED']
  //     },
  //     caseNumber: {
  //       $exists: true
  //     }
  //   })
  //   // global.logger.info('After Fees Actives')
  //   result.feesActives = feesActives?.map((x) => ({
  //     caseNumber: x.caseNumber,
  //     id: x.id
  //   }))

  //   result.documentUrl =
  //     'https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=U2NoZWR1bGVPZkZlZXMucGRm'

  //   // global.logger.info(`documentUrl= ${result.document}`)

  //   return Result.ok(result)
  // }

  async execute({ customerAccount }) {
    // global.logger.info('FeeGetByCifUseCase()');
  
    const result = { fees: [] };
  
    // =====================
    // Alteração para buscar Standard e Exception Fees do SQL
    const standardFees = await this.#getFeeStandardFromSQL();
    const exceptionFees = await this.#getFeeExceptionFromSQL();
    const fees = [...standardFees, ...exceptionFees];
    // =====================
  
    const customer = new CustomerFees(fees, customerAccount);
    if (customer.fee) result.fees.push(customer.fee);
    // global.logger.info('After Customer Fees');
  
    const bank = new BankAccountFee(fees, customerAccount);
    if (bank.fee) result.fees.push(bank.fee);
    // global.logger.info('After Bank Account Fees');
  
    const equityField = await Field.find({ code: 7 });
    const investiment = new InvestimentAccountFee(
      fees,
      customerAccount,
      equityField[0]
    );
    if (investiment.fee?.feeGroups) result.fees.push(investiment.fee);
    // global.logger.info('After Investment Account Fees');
  
    const feesActives = await FeeCase.find({
      cif: customerAccount[0].cifno,
      status: {
        $nin: ['DONE', 'REJECTED'],
      },
      caseNumber: {
        $exists: true,
      },
    });
    // global.logger.info('After Fees Actives');
  
    result.feesActives = feesActives?.map((x) => ({
      caseNumber: x.caseNumber,
      id: x.id,
    }));

    const scheduleUrls = global.environment.scheduleUrls;
  
    result.documentUrl =
      'https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=U2NoZWR1bGVPZkZlZXMucGRm';

  
    // global.logger.info(`documentUrl= ${result.document}`);
  
    return Result.ok(result);
  }
  
  async #getFeeExceptionFromSQL() {
    // global.logger.info('getFeeExceptionFromSQL()');
  
    const connection = await connectToFeeMgmtDb();
    const recordset = await executeStoreProcedure(connection, 'sp_get_fees_byCIF', { cifno: id });
  
    const feeResult = recordset.map((record) => {
      return {
        feeType: record.feeType,
        feeGroups: [
          {
            name: record.feeGroup,
            code: record.groupCode,
            fields: [
              {
                code: record.fieldCode,
                name: record.fieldName,
                defaultValue: record.defaultValue,
                isException: record.isException === 1,
                exceptionOptions: record.exceptionOptions
                  ? JSON.parse(record.exceptionOptions)
                  : [],
              },
            ],
          },
        ],
      };
    });
  
    return feeResult;
  }

  // async #getFeeStandard(filter) {
  //   // global.logger.info('getFeeStandard()')

  //   const feeResult = []

  //   for await (const fee of Fee.find({
  //     $or: filter
  //   }).select({
  //     feeType: 1,
  //     feeGroups: {
  //       name: 1,
  //       fields: 1,
  //       code: 1
  //     }
  //   })) {
  //     feeResult.push(fee.toObject())
  //   }

  //   return feeResult
  // }
  
  async #getFeeStandardFromSQL() {
    // global.logger.info('getFeeStandardFromSQL()');

    const connection = await connectToFeeMgmtDb();
    const recordset = await executeStoreProcedure(connection, 'sp_get_fees_byCIF', {});

    const feeResult = recordset.map((record) => {
      return {
        feeType: record.feeType,
        feeGroups: [
          {
            name: record.feeGroup,
            code: record.groupCode,
            fields: [
              {
                code: record.fieldCode,
                name: record.fieldName,
                defaultValue: record.defaultValue,
                isStandard: record.isStandard === 1,
              },
            ],
          },
        ],
      };
    });

    return feeResult;
  }
}



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


import { Router } from 'express'
import feeGetByCifEndpoint from './feeGetByCifEndpoint.js'

const feeGetByCifRouter = Router()

feeGetByCifRouter.get('/fee/:cif', feeGetByCifEndpoint)
export default feeGetByCifRouter



++++++++++++++++++++++++++++++++++++++++++++++++++++++

import FeeGetByCifUseCase from './feeGetByCifUseCase.js';
import ApiResponse from '#core/http/apiResponse.js';

export default async function feeGetByCifEndpoint(req, res) {
  // const useCase = new FeeGetByCifUseCase();
  // const result = await useCase.execute(req.body);

  // if (result.isFailure) {
  //   const badRequestResponse = ApiResponse.createBadRequestResponse({
  //     error: result.error,
  //   });
  //   return res.status(badRequestResponse.code).json(badRequestResponse);
  // }

  // const okResponse = ApiResponse.createOkResponse(result.value);

  // res.json(okResponse);
  const { cif } = req.params;

  if (!cif) {
    return res.status(400).json(ApiResponse.createBadRequestResponse({ error: "CIF is required" }));
  }

  const useCase = new FeeGetByCifUseCase();
  const result = await useCase.execute({ customerAccount: [{ cifno: cif }] });

  if (result.isFailure) {
    return res.status(400).json(ApiResponse.createBadRequestResponse({ error: result.error }));
  }

  res.json(ApiResponse.createOkResponse(result.value));
}


