#addCurrentClientValue(equityField) {
  const exceptionsOptions = Array.from(this.#allExceptions);
  for (const [feeGroupIndex, feeGroup] of this.#investiment.feeGroups.entries()) {
    feeGroup.cif = this.#accounts[0].cifno;

    for (const [fieldIndex, field] of feeGroup.fields.entries()) {
      if (field.isException) {
        field.labelValue =
          this.#investiment.feeGroups[feeGroupIndex - 1].fields[fieldIndex].labelValue;
      } else {
        for (const account of this.#accounts) {
          if (field.code === account.feeType && feeGroup.accountNumber === account.bpsAcctNumber) {
            if (field.code === 5) {
              field.defaultValue = field.isStandard
                ? field.defaultValue
                : account.feeAmount.toString();
              field.labelValue = numberToCurrency(field.defaultValue);
            } else if (field.code === 7) {
              const equityRow = exceptionsOptions.find(x => x.value === account.feeCode && x.text.includes('Equity'));
              if (equityRow) {
                field.defaultValue = equityRow.value;
                field.labelValue = equityRow.text;
              }
            } else {
              if (field.labelValue !== 'Other') {
                if (field.isCurrentClient) {
                  field.defaultValue = account.feeCode.toString();
                }
                let exception = exceptionsOptions.find(x => x.value === field.defaultValue);
                if (!exception) {
                  exception = equityField.exceptionOptions.find(e => e.value === field.defaultValue) || { text: '' };
                }
                field.labelValue = exception.text;
              }
            }
          }
        }
      }
    }
  }
  this.#clearMemory();
}
