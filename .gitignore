export function parseHistoryToData(history: RawHistory): HistoryData {
  if (!history || !Array.isArray(history.data)) {
    return {
      status: history?.status ?? "",
      data: [],
      cardRowData: [],
      dataDisplayData: [],
      selectedBank: "",
      approvalsSteps: [],
    };
  }

  // Filtra os steps agrupados (Approvals and Restrictions)
  const approvalsSteps = (history.data.flat()).filter(
    (s) => s.name && s.name.startsWith("Approvals and Restrictions")
  );

  // Filtra todos os outros steps (não approvals)
  const normalSteps = (history.data.flat()).filter(
    (s) => !(s.name && s.name.startsWith("Approvals and Restrictions"))
  );

  // Monta os steps da timeline principal:
  const timelineSteps = [];

  // 1. Initiator
  const initiatorStep = normalSteps.find((s) =>
    s.name?.toLowerCase().includes("initiator")
  );
  if (initiatorStep) timelineSteps.push(initiatorStep);

  // 2. Validation
  const validationStep = normalSteps.find((s) =>
    s.name?.toLowerCase().includes("validation")
  );
  if (validationStep) timelineSteps.push({
    ...validationStep,
    name: "Validations",
  });

  // 3. Approvals (Agrupado)
  if (approvalsSteps.length > 0) {
    // status geral: se algum pending -> pending, senão waiting, senão completed...
    const groupStatus =
      approvalsSteps.find((s) => s.status === "pending")?.status ||
      approvalsSteps[0].status ||
      "pending";
    timelineSteps.push({
      id: 999, // qualquer id fixo
      name: "Approvals and Restrictions",
      status: groupStatus,
      // outros campos que quiser exibir
    });
  }

  // 4. Restriction Removal
  const restrictionRemovalStep = normalSteps.find((s) =>
    s.name?.toLowerCase().includes("restriction removal")
  );
  if (restrictionRemovalStep) timelineSteps.push(restrictionRemovalStep);

  // 5. Wire Repair
  const wireRepairStep = normalSteps.find((s) =>
    s.name?.toLowerCase().includes("wire repair")
  );
  if (wireRepairStep) timelineSteps.push(wireRepairStep);

  // 6. OFAC
  const ofacStep = normalSteps.find((s) =>
    s.name?.toLowerCase().includes("ofac")
  );
  if (ofacStep) timelineSteps.push(ofacStep);

  // ...adicione outros steps como precisar

  // Finaliza
  return {
    status: history.status,
    data: timelineSteps.map((step) => [step]), // cada step dentro de um array
    cardRowData: history.cardRowData,
    dataDisplayData: history.dataDisplayData,
    selectedBank: history.selectedBank,
    approvalsSteps, // Passa o grupo pro modal
  };
}




{
  data
    .flatMap((subArray, subArrayIndex) =>
      subArray.map((item, itemIndex) => ({
        ...item,
        isFromMultiple: subArray.length > 1,
        subArrayIndex,
        key: `${subArrayIndex}-${itemIndex}`,
        originalStatus: item.status as workflowStatus,
      }))
    )
    .map((item: any, idx, flat) => {
      // ...
      const isApprovalsStep = item.name === "Approvals and Restrictions";
      return (
        <Fragment key={item.key}>
          <Timeline.Step progress={!isLast} status={statusValue}>
            <div className="relative flex flex-col items-center justify-center  overflow-visible min-h-[180px]">
              {isApprovalsStep ? (
                <>
                  <span
                    style={{ cursor: "pointer" }}
                    onClick={() => setShowApprovalsModal(true)}
                    title="Ver detalhes dos Approvals"
                  >
                    <Timeline.Circle status={statusValue} />
                    <Timeline.Text>
                      {item.name}
                      <span className="ml-1 text-xs text-blue-600 underline">
                        (detalhes)
                      </span>
                    </Timeline.Text>
                  </span>
                  <TimelineApprovalsModal
                    open={showApprovalsModal}
                    onClose={() => setShowApprovalsModal(false)}
                    data={approvalsSteps}
                  />
                </>
              ) : (
                <>
                  <Timeline.Circle status={statusValue} />
                  <Timeline.Text>{item.name}</Timeline.Text>
                </>
              )}
            </div>
          </Timeline.Step>
        </Fragment>
      );
    });
}
