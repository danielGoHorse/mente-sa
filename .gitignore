import FeeGroupGetAllUseCase  from './feeGroupGetAllUseCase.js' 
import ApiResponse from '#core/http/apiResponse.js'

export default async function feeGroupGetAllEndpoint(req, res) {
  const useCase = new FeeGroupGetAllUseCase()
  const result = await useCase.execute(req)

  if (result.isFailure) {
    const badRequestResponse = ApiResponse.createBadRequestResponse({ error: result.error })
    return res.status(badRequestResponse.code).json(badRequestResponse)
  }

  const okResponse = ApiResponse.createOkResponse(result.value)

  res.json(okResponse)
}


import { Router } from 'express'
import feeGroupGetAllEndpoint from './feeGroupGetAllEndpoint.js'

const feeGroupInfoGetAllRouter = Router()

feeGroupInfoGetAllRouter.get('/fee/group', feeGroupGetAllEndpoint)

export default feeGroupInfoGetAllRouter

import Result from '#features/shared/result.js'
import { getFeegroupAll } from '#src/models/FeePackage.js'

export default class FeeGroupGetAllUseCase {
  async execute(req) {

    const packages = await getFeegroupAll()

    return Result.ok(packages)
  }
}

import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js'

export async function getAllFeePackage() {
  const connection = await connectToFeeMgmtDb()
  const recordset = await executeStoreProcedure(connection, 'sp_get_feepackagedetails', {})

  const listPackages = recordset.map(record => {
    const id = record.FeePackageID
    const packageName = record.FeePackage
    const accountType = record.PackageType
    const feeType = record.PackageCoverage

    return {
      id,
      packageName,
      accountType,
      feeType
    }
  })

  return listPackages.filter((item, index, self) => index === self.findIndex(x => x.id === item.id))
}

export async function getFeegroupById(id) {
  const connection = await connectToFeeMgmtDb()
  const recordset = await executeStoreProcedure(connection, 'sp_get_feegroup_info', {GroupId: id})

  const listFeegroupInfo = recordset.map(record => {
    const groupId = record.GroupId
    const groupName = record.GroupName === undefined ? null : record.GroupName
    const businessPackageId = record.BusinessPackageId === undefined ? null : record.BusinessPackageId
    const businessPackage = record.BusinessPackage === undefined ? null : record.BusinessPackage
    const individualPackageId = record.IndividualPackageId 
    const individualPackage = record.IndividualPackage

    return {
      groupId,
      groupName,
      businessPackageId,
      businessPackage,
      individualPackageId,
      individualPackage
    }
  })

  return listFeegroupInfo
}

export async function getFeegroupAll() {
  const connection = await connectToFeeMgmtDb()
  const recordset = await executeStoreProcedure(connection, 'sp_get_feegroup_info', {})

  const listFeegroupInfo = recordset.map(record => {
    const groupId = record.GroupId
    const groupName = record.GroupName === undefined ? null : record.GroupName
    const businessPackageId = record.BusinessPackageId === undefined ? null : record.BusinessPackageId
    const businessPackage = record.BusinessPackage === undefined ? null : record.BusinessPackage
    const individualPackageId = record.IndividualPackageId 
    const individualPackage = record.IndividualPackage

    return {
      groupId,
      groupName,
      businessPackageId,
      businessPackage,
      individualPackageId,
      individualPackage
    }
  })

  return listFeegroupInfo
}

export async function getOfficerPackageByBranch(id) {
  const connection = await connectToFeeMgmtDb()

  const recordset = await executeStoreProcedure(connection, 'sp_get_officerpackage_bybranch', {branch_code: id})
  
  const listOfficerPackage = recordset.map(record => {
    const officerId = record.OfficerId
    const officerName = record.OfficerName
    const branchName = record.BranchName
    const officerPackage = record.OfficerPackage

    return {
      officerId,
      officerName,
      branchName,
      officerPackage
    }
  })

  return listOfficerPackage
}

export async function getOfficerPackageAll() {
  const connection = await connectToFeeMgmtDb()

  const recordset = await executeStoreProcedure(connection, 'sp_get_officerpackage_bybranch', {})
  
  const listOfficerPackage = recordset.map(record => {
    const officerId = record.OfficerId
    const officerName = record.OfficerName
    const branchName = record.BranchName
    const officerPackage = record.OfficerPackage

    return {
      officerId,
      officerName,
      branchName,
      officerPackage
    }
  })

  return listOfficerPackage
}


export async function getFeegroup() {
  const connection = await connectToFeeMgmtDb()

  const recordset = await executeStoreProcedure(connection, 'sp_get_feegroupinfo', {})
  
  const listOfficerPackage = recordset.map(record => {
    const officerId = record.OfficerId
    const officerName = record.OfficerName
    const branchName = record.BranchName
    const officerPackage = record.OfficerPackage

    return {
      officerId,
      officerName,
      branchName,
      officerPackage
    }
  })

  return listOfficerPackage
}

export async function getBranchPackageOfficeById(id) {
  const connection = await connectToFeeMgmtDb()
  const recordset = await executeStoreProcedure(connection, 'sp_get_branch_feepackage_info_offr', {branch_code: id})
  
  const listOfficerPackage = recordset.map(record => {
    const branchId = record.branch_id
    const branchType = record.branch_type
    const bussinessPackage = record.business_package
    const bussinessPackageDescription = record.business_package_description
    const city = record.city
    const director = record.director.trim()
    const individualPackage = record.individual_package
    const individualPackageDescription = record.individual_package_description
    const offPackage = record.off_package
    const officerName = record.state
    
    return {
       branchId, 
       branchType,
       bussinessPackage,
       bussinessPackageDescription,
       city,
       director,
       individualPackage,
       individualPackageDescription,
       offPackage,
       officerName
    }
  })

  return listOfficerPackage
}

export async function getBranchPackageOffice() {
  const connection = await connectToFeeMgmtDb()
  const recordset = await executeStoreProcedure(connection, 'sp_get_branch_feepackage_info_offr', {})

  const listOfficerPackage = recordset.map(record => {
    const branchId = record.branch_id
    const branchType = record.branch_type
    const bussinessPackage = record.business_package
    const bussinessPackageDescription = record.business_package_description
    const city = record.city
    const director = record.director.trim()
    const individualPackage = record.individual_package
    const individualPackageDescription = record.individual_package_description
    const offPackage = record.off_package
    const officerName = record.state
    
    return {
       branchId, 
       branchType,
       bussinessPackage,
       bussinessPackageDescription,
       city,
       director,
       individualPackage,
       individualPackageDescription,
       offPackage,
       officerName
    }
  })

  return listOfficerPackage
}

export async function getFeePackageById(id) {
  const connection = await connectToFeeMgmtDb()
  const recordset = await executeStoreProcedure(connection, 'sp_get_feepackagedetails', { FeePackageId: id })

  if (!recordset) {
    return undefined
  }

  if (recordset.length === 0) {
    return []
  }

  const groups = recordset.reduce((newList, current) => {
    const feeGroupExisting = newList.find(fee => fee.title === current.FeeGroup)

    if (feeGroupExisting) {
      feeGroupExisting.fees.push({
        key: current.FeeDescription,
        value: current.Amount,
        tooltip: current.Tooltip
      })
    } else {
      newList.push({
        id: current.FeeGroupId,
        title: current.FeeGroup,
        fees: [{
          key: current.FeeDescription,
          value: current.Amount,
          tooltip: current.Tooltip
        }]
      })
    }

    return newList
  }, [])

  const packageResult = {
    id: recordset[0]?.FeePackageID,
    packageName: recordset[0]?.FeePackage,
    accountType: recordset[0]?.PackageType,
    feeType: recordset[0]?.PackageCoverage,
    groups
  }

  return packageResult
}

