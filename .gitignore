import { Fragment, useState } from 'react';

import { Button } from '@snb/ds-button';
import Image from 'next/image';

import ApproveIcon from "@/assets/svg/check-white.svg";
import CloseIcon from "@/assets/svg/close-color.svg";
import EditIcon from "@/assets/svg/edit.svg";
import PrintIcon from "@/assets/svg/print-color.svg";
import ReturnIcon from "@/assets/svg/send-back-color.svg";

import { queryClient } from '@/providers';
import { useDocumentStore } from '@/store/documentsStore';
import { CircularProgress } from '@mui/material';
import { TextArea } from '@snb/ds-text-area';
import { useParams } from 'next/navigation';
import GenericModal from './GenericModal';

const IconMap: { [key: string]: string } = {
  submitButton: "",
  editButton: EditIcon,
  printButton: PrintIcon,
  cancelButton: CloseIcon,
  returnButton: ReturnIcon,
  approveButton: ApproveIcon,
};

type ButtonModalProps = {
  loading: boolean;
  button: any;
  onSubmit: (button: any, text: any, bindButton: any) => Promise<void>;
};

export default function ButtonModal({ loading, button, onSubmit }: ButtonModalProps) {
  const data: any = queryClient.getQueryData(["getRequest"]);

  const [text, setText] = useState("");
  const [openModal, setOpenModal] = useState(false);

  const { documentList } = useDocumentStore((state) => state);
  const { requestId } = useParams();

  const getDocuments = () => {
    return documentList.length > 0
      ? documentList.map((document) => ({
          documentName: document.documentName,
          documentUUID: document.documentUUID,
          uploadedBy: {
            fullName: document.uploadedBy.fullName,
            userId: document.uploadedBy.userId,
          },
          createdAt: document.createdAt,
        }))
      : [];
  };

  /**
   * Aqui definimos as configs de cada botão que abre modal.
   * Se surgir um novo "button.name" no futuro, precisamos adicioná-lo aqui,
   * ou teremos um fallback.
   */
  const buttonLiterals: Record<string, Record<string, any>> = {
    saveButton: {
      title: '',
      subtitle: 'Do you want to save your progress to continue later?',
      submit: 'Save',
      cancel: 'Cancel',
      hasTextArea: false,
      route: '',
      payload: {
        ...data,
        documents: getDocuments(),
      },
    },
    savereturnButtonButton: {
      title: 'Do you want to save your progress to continue later?',
      subtitle: '',
      label: '',
      submit: 'Save',
      cancel: 'Cancel',
      hasTextArea: false,
      route: '',
      payload: {
        ...data,
        documents: getDocuments(),
      },
    },
    returnButton: {
      title: 'Comment to the Initiator',
      subtitle: '',
      label: 'Comment:',
      submit: 'Submit',
      cancel: 'Cancel',
      hasTextArea: true,
      route: '/approve-request/success',
      payload: {
        ...data,
        documents: getDocuments(),
      },
    },
    returnClarificationButton: {
      title: 'Comment to the Initiator',
      subtitle: '',
      label: 'Comment:',
      submit: 'Submit',
      cancel: 'Cancel',
      hasTextArea: true,
      route: '/approve-request/success',
      payload: {
        ...data,
        documents: getDocuments(),
      },
    },
    cancelButton: {
      title: 'Cancel Request Reason',
      subtitle: '',
      label: 'Please provide information to support your decision.',
      submit: 'Submit',
      cancel: 'Cancel',
      hasTextArea: true,
      route: '/approve-request/canceled',
      payload: {
        ...data,
        documents: getDocuments(),
      },
    },
    // Exemplo adicional, caso precise de algo para "submitButton":
    submitButton: {
      title: 'Submit Request',
      subtitle: 'Are you sure you want to proceed?',
      label: '',
      submit: 'Submit',
      cancel: 'Cancel',
      hasTextArea: false,
      route: '/approve-request/success',
      payload: {
        ...data,
        documents: getDocuments(),
      },
    },
  };

  // Se button.name não estiver em buttonLiterals, bindButton fica undefined.
  // Podemos criar um fallback vazio ou com texto genérico:
  const bindButton = buttonLiterals[button.name] || {
    title: 'Confirmation',
    subtitle: '',
    label: '',
    submit: 'Ok',
    cancel: 'Cancel',
    hasTextArea: false,
    route: '/',
    payload: { ...data },
  };

  return (
    <Fragment>
      {/* BOTÃO QUE ABRE O MODAL */}
      <Button
        id={`button-${button.name}`}
        data-test={`button-${button.name}`}
        size="lg"
        iconSize={15}
        icon={IconMap[button.name]}
        variant={button.theme as "text" | "primary" | "outline" | undefined}
        onClick={() => {
          setOpenModal(true);
        }}
      >
        {button.label}
      </Button>

      {/* MODAL DE CONFIRMAÇÃO */}
      <GenericModal open={openModal} onClose={() => {}}>
        <div className='absolute top-1/2 left-1/2 bg-white min-w-[500px] p-[20px] rounded-lg -translate-x-1/2 -translate-y-1/2 shadow-lg shadow-[rgba(37,37,39,0.08)] focus:outline-none focus:border-e-[1px] focus:shadow-[rgba(5,145,255,0.1)]'>
          <div className='flex justify-between items-center'>
            {/* TÍTULO */}
            <p className='flex justify-center font-figtree font-semibold text-lg leading-7 align-middle text-center tracking-normal text-[#1e2347]'>
              {bindButton.title}
            </p>

            {/* BOTÃO DE CLOSE */}
            <button
              disabled={loading}
              onClick={() => setOpenModal(false)}
              className='font-Figtree flex align-middle text-center justify-center bg-none border-none m-0 p-0 cursor-pointer focus:shadow-[0_0_0_2px_#4289f5]'
            >
              <Image src={CloseIcon} width={24} height={24} alt='close-icon' />
            </button>
          </div>

          <div className='flex gap-4 flex-col'>
            {/* SUBTÍTULO */}
            {bindButton.subtitle && (
              <div className='flex gap-3 flex-col pt-5 pb-5'>
                <p className='flex justify-center font-figtree font-semibold text-lg leading-7 align-middle text-center tracking-normal text-[#1e2347]'>
                  {bindButton.subtitle}
                </p>
              </div>
            )}

            {/* TEXTAREA OPCIONAL */}
            {bindButton.hasTextArea && (
              <TextArea
                id='submitModalTextArea'
                maxLength={500}
                enableDigitalCount={true}
                label={bindButton.label}
                onChangeText={(e) => setText(e)}
              />
            )}

            {/* BOTÕES */}
            <div className='flex gap-3 justify-between'>
              {/* CANCEL */}
              <Button
                disabled={loading}
                id='cancelButtonModal'
                data-test={`button-${button.name}`}
                variant='text'
                width='140px'
                onClick={() => setOpenModal(false)}
              >
                {bindButton.cancel}
              </Button>

              {/* SUBMIT */}
              <Button
                disabled={loading}
                id='submitButtonModal'
                data-test={`button-${button.name}`}
                variant='primary'
                width='140px'
                onClick={() => {
                  onSubmit(button, text, bindButton).finally(() =>
                    setOpenModal(false)
                  );
                }}
              >
                {loading ? (
                  <div className='flex justify-center items-center'>
                    <CircularProgress size={20} color='inherit' />
                  </div>
                ) : (
                  bindButton.submit
                )}
              </Butto
