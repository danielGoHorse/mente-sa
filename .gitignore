import Result from '#features/shared/result.js';

export default class FeeCaseGetByCifUseCase {
  async execute({ cif }, feeManagementModel) {
    global.logger.info(`Buscando dados do cliente para CIF: ${cif}`);

    // Buscar taxas do SQL
    const [errFees, responseFees] = await feeManagementModel.getFeesFromSQL(cif);
    if (errFees) {
      return Result.fail({ message: "Erro ao buscar taxas do banco" });
    }

    const feesData = responseFees?.data || [];

    // Organizar os dados básicos do cliente (extraindo do primeiro registro)
    const firstFee = feesData.length > 0 ? feesData[0] : {};

    const customerInfo = {
      customerName: firstFee.CustomerName || "Nome Padrão",
      customerShortName: firstFee.CustomerShortName || "",
      customerAddress: firstFee.CustomerAddress || "",
      customerAccountOfficer: firstFee.Officer || "",
      cif: cif,
      officerId: firstFee.OfficerId?.trim() || "",
      branchCity: firstFee["Branch City"] || "",
      branchState: firstFee["Branch State"] || "",
      branchType: firstFee["Branch Type"] || "",
    };

    // Criar estrutura de `fees`
    const fees = this.#organizeFees(feesData);

    // Buscar as taxas de exceção pelo `feePackageId`
    const feePackageId = firstFee["Default Fee Package Id"] || null;
    let exceptionFees = [];
    if (feePackageId) {
      const [errExceptionFees, responseExceptionFees] =
        await feeManagementModel.getExceptionFeesFromSQL(feePackageId);
      if (!errExceptionFees) {
        exceptionFees = responseExceptionFees?.data || [];
      }
    }

    // Criar estrutura de `feesActives` (mockado por enquanto)
    const feesActives = [
      { caseNumber: "12345", id: "mocked-active-fee-1" },
      { caseNumber: "67890", id: "mocked-active-fee-2" },
    ];

    // Criar estrutura de `currentFees`
    const currentFees = feesData.map(fee => ({
      feeDescription: `${fee.FeeDescription} - $${fee.FeeAmount || "0.00"}`,
      feeCode: `Conta ${fee.ACCTNO}`,
    }));

    // Gerar `documentUrl` baseado no `feePackageId`
    const documentUrl = this.#getDocumentUrl(feePackageId);

    const result = {
      ...customerInfo,
      fees,
      feesActives,
      documentUrl,
      currentFees,
    };

    global.logger.info("Processamento finalizado com sucesso");
    return Result.ok(result);
  }

  /**
   * Organiza os dados das taxas em `feeType` e `feeGroups`
   */
  #organizeFees(feesData) {
    const groupedFees = {};

    feesData.forEach(fee => {
      const feeType = fee.FeeType || "Unknown Fees";
      if (!groupedFees[feeType]) {
        groupedFees[feeType] = {
          feeType,
          feeGroups: [],
          id: `fee-type-${feeType.replace(/\s/g, "-").toLowerCase()}`,
        };
      }

      let feeGroup = groupedFees[feeType].feeGroups.find(
        group => group.accountNumber === fee.ACCTNO
      );

      if (!feeGroup) {
        feeGroup = {
          name: "Standard Fees",
          code: fee.ACCTNO, 
          fields: [],
          cif: fee.CIFNO,
          accountNumber: fee.ACCTNO,
          visible: true,
          kycMailingStatus: null,
          id: `fee-group-${fee.ACCTNO}`,
        };
        groupedFees[feeType].feeGroups.push(feeGroup);
      }

      feeGroup.fields.push({
        code: fee.FeeCode,
        name: fee.FeeDescription,
        isStandard: fee.StandardException === "Standard",
        isCurrentClient: fee.StandardException === "Client",
        isException: fee.StandardException === "Exception",
        defaultValue: fee.FeeAmount?.toString() || "0",
        hasChanged: false,
        tooltip: `Charged: ${fee.Frequency || "N/A"}`,
        exceptionOptions: [],
        id: `fee-field-${fee.FeeCode}`,
        labelValue: `$${fee.FeeAmount || "0.00"}`,
      });
    });

    return Object.values(groupedFees);
  }

  /**
   * Retorna a URL do documento baseado no `feePackageId`
   */
  #getDocumentUrl(feePackageId) {
    const scheduleUrls = global.environment.scheduleUrls;
    const packageMap = {
      1: "intlPB3",
      2: "uSPBIndividual3",
      3: "uSPBCorporation3",
      4: "efraPB3",
      5: "eraPB3",
    };

    const scheduleType = packageMap[feePackageId] || "";
    return scheduleUrls[scheduleType] || "";
  }
}
