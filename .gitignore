function applyExceptionAmounts(mongoFees, excRows) {
  const byCode = excRows.reduce((acc, r) => {
    (acc[r.FeeCode] ??= []).push(r);
    return acc;
  }, {});

  mongoFees.forEach(fee => {
    const excGrp = fee.feeGroups?.find(g => g.name === 'Exception Request');
    if (excGrp) excGrp.fields.forEach(f => applyEquityOptionException(f, excRows));
    if (!excGrp) return;

    excGrp.fields.forEach(field => {
      /* ---------- Equity / Options (7) ---------- */
      if (field.code === 7) {
        field.exceptionOptions = mergeEquityOptionAll(excRows);   // já traz retired correto
        field.defaultValue = '';
        field.labelValue   = '';
        return;
      }

      /* ---------- Demais códigos ---------------- */
      const codes = Object.entries(feeCodeMap)
        .filter(([, c]) => c === field.code)
        .map(([k]) => k);
      const rows = codes.flatMap(c => byCode[c] || []);
      if (!rows.length) return;

      if (field.code === 6) {                   // Custody
        field.exceptionOptions = rows
          .filter(r => r.Amount && r.FreqDescription)
          .map(r => ({
            value  : r.Amount,
            text   : `${r.Amount} - ${r.FreqDescription.trim()}`,
            visible: !!r.Visible,
            retired: false,                     // Custody nunca filtrado
          }));
      } else {
        const nums  = rows.filter(r => !Number.isNaN(Number(r.Amount)))
                          .sort((a,b)=>Number(a.Amount)-Number(b.Amount));
        const alpha = rows.filter(r =>  Number.isNaN(Number(r.Amount)))
                          .sort((a,b)=>a.Amount.localeCompare(b.Amount));

        field.exceptionOptions = [...nums, ...alpha].map(r => ({
          value  : r.Amount,
          text   : Number.isNaN(Number(r.Amount))
            ? (r.FreqDescription?.trim() || r.Amount)
            : numberToCurrency(Number(r.Amount)),
          visible: !!r.Visible,
          retired: false,                       // outros nunca filtrados
        }));
      }
      field.defaultValue = '';
      field.labelValue   = '';
    });
  });
}
