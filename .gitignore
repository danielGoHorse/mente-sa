import numberToCurrency from '../core/helpers/currency.js';

export default class CustomerFees {
  #feeName = 'Customer Fees';
  #customer = {};
  #accounts = [];
  #clientCurrent = [];

  constructor(fees, accounts) {
    if (!fees || !Array.isArray(fees) || fees.length === 0) {
      throw new Error('Fees is empty or undefined');
    }

    this.#customer = fees.filter((x) => x.feeType === this.#feeName)[0];
    if (!this.#customer || !Array.isArray(this.#customer.feeGroups)) {
      throw new Error('Customer Fees or feeGroups are undefined');
    }

    // Filtra exceptionsOptions que não foram "retiradas"
    this.#customer.feeGroups.forEach((feeGroup) => {
      feeGroup.fields?.forEach((item) => {
        item.exceptionOptions = item.exceptionOptions?.filter((x) => !x.retired) || [];
      });
    });

    // Filtra contas relacionadas ao Customer Fees (feeGroup code === 1)
    this.#accounts = accounts.filter(
      (x) => x.feeGroup === this.#customer.feeGroups[0].code
    );

    // Pega kycMailingStatus do "Bank Account Fees" (feeType === 2)
    this.#customer.feeGroups[0].kycMailingStatus =
      accounts.find((account) => account.feeType === 2)?.kycMailingStatus || null;

    // Ajusta labelValue no primeiro grupo
    this.#customer.feeGroups[0].fields.forEach((field) => {
      field.labelValue = numberToCurrency(field.defaultValue);
    });

    // Verifica Client Current no segundo grupo
    if (this.#customer.feeGroups.length > 1) {
      this.#clientCurrent = this.#customer.feeGroups[1].fields;
      this.#configureCustomer();
    } else {
      console.warn('Client Current group is missing');
    }

    // Verifica Exceptions no terceiro grupo
    if (this.#customer.feeGroups.length > 2) {
      this.#customer.feeGroups[2].fields.forEach((field) => {
        // Copia labelValue do grupo "Client Current" (que é o [1])
        field.labelValue =
          this.#customer.feeGroups[1]?.fields.find((f) => f.code === field.code)?.labelValue || '';
      });
    } else {
      console.warn('Exception group is missing');
    }
  }

  get fee() {
    return this.#customer;
  }

  #configureCustomer() {
    if (this.#accounts.length < 1) {
      this.#customer = {};
      return;
    }

    // AQUI é onde mexemos nos valores do grupo "Client Current"
    for (const field of this.#clientCurrent) {
      for (const account of this.#accounts) {
        if (field.isCurrentClient && field.code === account.feeType) {

          // -----------------------------
          // INÍCIO DA REGRA "NOT APPLICABLE"
          // -----------------------------
          if (
            field.code === 2 &&  // Exemplo: code=2 => "Mailing" ou "Maintenance"
            this.#customer.feeGroups[0].kycMailingStatus !== 'Hold Mail'
          ) {
            field.defaultValue = 'NOT APPLICABLE';
            field.labelValue = field.defaultValue;

            // Se quiser mexer em exceptionOptions, faça também:
            field.exceptionOptions = [
              {
                value: field.defaultValue,
                text: field.defaultValue
              }
            ];
          }
          // -----------------------------
          // FIM DA REGRA "NOT APPLICABLE"
          // -----------------------------
          else {
            // Mantém a lógica padrão
            field.defaultValue = account.feeAmount?.toString() || '';
            field.labelValue = numberToCurrency(field.defaultValue);
          }

        }
      }
    }

    // Preenche cif/accountNumber
    for (const feeGroup of this.#customer.feeGroups) {
      feeGroup.cif = this.#accounts[0]?.cifno || null;
      feeGroup.accountNumber = this.#accounts[0]?.ddaNumber || null;
    }

    this.#clearMemory();
  }

  #clearMemory() {
    this.#accounts = [];
    this.#clientCurrent = [];
  }
}
