/* eslint-disable @typescript-eslint/no-explicit-any */
import React, { Fragment, useEffect, useState } from "react";
import AlertErrorIcon from "./assets/alert-color.svg";
import * as S from "./styles";

export interface RadioButtonProps {
  children?: React.ReactNode;
  disabled?: boolean;
  value?: string;
  styleType?: string;
  options?: any[];
  error?: boolean;
  errorText?: string;
  name?: string;
  onChange?: (value: any) => void;
}

const RadioButton: React.FC<RadioButtonProps> = ({
  children,
  disabled,
  value: externalValue,
  styleType = "normal",
  options,
  error,
  errorText,
  name,
  onChange,
}) => {
  const [initialRender, setInitialRender] = useState(true);
  
  const [value, setValue] = useState(externalValue);

  const onChangeEvent = (event: React.ChangeEvent<HTMLInputElement>) => {
    const currentTarget = event.currentTarget.value;
    
    setValue(currentTarget);
    onChange?.(currentTarget);
  };

  useEffect(() => {
    if (!initialRender) {
      return;
    }

    setValue(externalValue);
    onChange?.(externalValue);

    setInitialRender(false);
  }, [disabled, externalValue]);

  return (
    <Fragment>
      {styleType === "normal" && (
        <S.RadioButtonWrapper isDisabled={disabled}>
          <input
            id={name}
            name={name}
            type="radio"
            value={value}
            disabled={disabled}
            onChange={(e) => onChangeEvent(e)}
          />
          <S.Text isDisabled={disabled}>{children}</S.Text>
        </S.RadioButtonWrapper>
      )}
      {styleType === "square" && (
        <Fragment>
          {options?.map((item, index) => (
            <S.RadioButtonWrapper isDisabled={disabled} key={index}>
              <S.TextSquare
                isDisabled={disabled}
                checked={item.value === value}
                isFirstItem={index === 0}
                isLastItem={index === options.length - 1}
                error={error}
              >
                <input
                  id={item.label}
                  type="radio"
                  value={item.value}
                  disabled={disabled}
                  onChange={(e) => onChangeEvent(e)}
                  hidden
                />
                {item.label}
              </S.TextSquare>
            </S.RadioButtonWrapper>
          ))}
          {error && (
            <S.IconError>
              <S.IconDiv>
                <AlertErrorIcon /> <S.ErrorText>{errorText}</S.ErrorText>
              </S.IconDiv>
            </S.IconError>
          )}
        </Fragment>
      )}
      {styleType === "with-options" && (
        <Fragment>
          {options?.map((item, index) => (
            <S.RadioButtonWrapper isDisabled={disabled} key={index}>
              <input
                id={item.value}
                name={name}
                type="radio"
                value={item.value}
                checked={item.value === value}
                disabled={disabled}
                onChange={(e) => onChangeEvent(e)}
              />
              <S.TextWithOptions isDisabled={disabled}>
                {item.label}
              </S.TextWithOptions>
            </S.RadioButtonWrapper>
          ))}
        </Fragment>
      )}
    </Fragment>
  );
};

export default RadioButton;
