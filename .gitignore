import { HistoryData } from "../store/types";

type RawHistory = {
  status?: string;
  data?: any[][];
  workflow?: any[][];
  cardRowData?: any[];
  dataDisplayData?: any[];
  selectedBank?: string;
};

export function parseHistoryToData(history: RawHistory): HistoryData {
  if (!history || !Array.isArray(history.data)) {
    return {
      status: history?.status ?? "",
      data: [],
      cardRowData: [],
      dataDisplayData: [],
      selectedBank: "",
    };
  }

  const allSteps = history.data.flat();

  // Filtra todos os steps "Approvals and Restrictions:"
  const approvalsSteps = allSteps.filter(s =>
    s.name && s.name.startsWith("Approvals and Restrictions")
  );
  // Mantém só os steps que NÃO são "Approvals and Restrictions:"
  const otherSteps = allSteps.filter(
    s => !s.name?.startsWith("Approvals and Restrictions")
  );

  // Monta o step agrupado
  let stepsFinal: any[] = [];
  if (approvalsSteps.length > 0) {
    // Descobre o status geral
    const status =
      approvalsSteps.find(s => s.status === "pending")?.status ||
      approvalsSteps.find(s => s.status === "waiting")?.status ||
      approvalsSteps[0]?.status ||
      "pending";
    const approvalsStep = {
      id: 9999,
      name: "Approvals and Restrictions",
      status,
      successLabel: "Approved",
      permissions: { people: [] },
      internalSteps: approvalsSteps,
    };

    // Insere o agrupado NA MESMA POSIÇÃO do PRIMEIRO step "Approvals and Restrictions"
    // (ou após "Validate Workflow", se quiser fixo)
    const firstApprovalsIdx = allSteps.findIndex(s =>
      s.name?.startsWith("Approvals and Restrictions")
    );

    // Pega todos os steps até o primeiro approvalsStep
    const stepsBefore = allSteps.slice(0, firstApprovalsIdx);
    // Todos os steps depois dos approvalsSteps
    const stepsAfter = allSteps.slice(firstApprovalsIdx + approvalsSteps.length);

    // Junta tudo, só UM step agrupador
    stepsFinal = [
      ...stepsBefore,
      approvalsStep,
      ...stepsAfter
    ];
  } else {
    // Não tem approvals agrupado, só mostra todos os steps
    stepsFinal = allSteps;
  }

  // Monta o array igual ao seu mock (cada step em um array)
  const mockData = stepsFinal.map(item => [item]);

  return {
    status: history.status ?? "",
    data: mockData,
    cardRowData: history.cardRowData ?? [],
    dataDisplayData: history.dataDisplayData ?? [],
    selectedBank: history.selectedBank ?? "",
  };
}
