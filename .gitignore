async #getFeeStandard(filter) {
    logger.info('getFeeStandard()');

    // Aqui usamos uma procedure fictícia `sp_get_standard_fees`
    const connection = await connectToFeeMgmtDb(); // Conexão com SQL Server
    const recordset = await executeStoreProcedure(connection, 'sp_get_standard_fees', {});

    const feeResult = recordset.map((record) => {
      return {
        feeType: record.feeType,
        feeGroups: [
          {
            name: record.feeGroup,
            code: record.groupCode,
            fields: [
              {
                code: record.fieldCode,
                name: record.fieldName,
                defaultValue: record.defaultValue,
                isStandard: record.isStandard === 1,
              },
            ],
          },
        ],
      };
    });

    return feeResult;
  }


  const useCase = new FeeGetByCifUseCase();
  const result = await useCase.execute(req.body);

  if (result.isFailure) {
    const badRequestResponse = ApiResponse.createBadRequestResponse({
      error: result.error,
    });
    return res.status(badRequestResponse.code).json(badRequestResponse);
  }

  const okResponse = ApiResponse.createOkResponse(result.value);

  res.json(okResponse);


import Result from '#features/shared/result.js';
import { getStandardFeesFromSQL, getExceptionFeesFromSQL } from '#src/models/FeeQueries.js';
import { FeeCase } from '#src/models/entities/FeeCase.js';
import { Field } from '#src/models/entities/Fields.js';

export default class FeeGetByCifUseCase {
  async execute({ customerAccount }) {
    global.logger.info('FeeGetByCifUseCase()');

    const result = { fees: [] };

    // Fetch Standard Fees from SQL Server
    const standardFees = await getStandardFeesFromSQL();
    result.fees.push({
      feeType: 'Standard Fees',
      feeGroups: standardFees,
    });

    // Fetch Exception Fees from SQL Server
    const exceptionFees = await getExceptionFeesFromSQL();
    result.fees.push({
      feeType: 'Exception Request',
      feeGroups: exceptionFees,
    });

    // Fetch Active Fees from MongoDB
    const feesActives = await FeeCase.find({
      cif: customerAccount[0].cifno,
      status: {
        $nin: ['DONE', 'REJECTED'],
      },
      caseNumber: {
        $exists: true,
      },
    });

    global.logger.info('After Fees Actives');
    result.feesActives = feesActives?.map((x) => ({
      caseNumber: x.caseNumber,
      id: x.id,
    }));

    // Include Document URL
    result.documentUrl =
      'https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=U2NoZWR1bGVPZkZlZXMucGRm';

    return Result.ok(result);
  }
}


Cannot redeclare block-scoped variable 'feesActives'.ts(2451)
const feesActives: (Document<unknown, {}, {
    createdAt: NativeDate;
    updatedAt: NativeDate;
} & {
    fees: Types.DocumentArray<any> | any[] | {
        [x: string]: any;
    }[] | any[];
    usersApprovers: Types.DocumentArray<any> | any[] | {
        [x: string]: any;
    }[] | any[];
    ... 17 more ...;
    userOwnerEmail?: unknown;
}> & Omit<...>)[]
