import { Router } from 'express'
import feeGetByPackageEndpoint from './feeGetByPackageEndpoint.js'

const feeGetByPackageRouter = Router()

// Nova rota para buscar Exception Fees por Fee Package ID
feeGetByPackageRouter.get('/fee/exceptions/:feePackageId', feeGetByPackageEndpoint)

export default feeGetByPackageRouter

import { Fee } from '#src/models/entities/Fees.js'
import Result from '#features/shared/result.js'
import CustomerFees from '#src/models/CustomerFees.js'
import BankAccountFee from '#src/models/BankAccountFee.js'
import InvestimentAccountFee from '#src/models/InvestimentAccountFee.js'
import { FeeCase } from '#src/models/entities/FeeCase.js'
import { Field } from '#src/models/entities/Fields.js'
import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js'

export default class FeeGetByCifUseCase {
  async execute({ customerAccount }) {
    const result = { fees: [] };

    // =====================
    // Agora busca apenas os Standard Fees do SQL
    const standardFees = await this.#getFeeStandardFromSQL(customerAccount[0].cifno);
    const fees = [...standardFees];
    // =====================

    const customer = new CustomerFees(fees, customerAccount);
    if (customer.fee) result.fees.push(customer.fee);

    const bank = new BankAccountFee(fees, customerAccount);
    if (bank.fee) result.fees.push(bank.fee);

    const equityField = await Field.find({ code: 7 });
    const investiment = new InvestimentAccountFee(
      fees,
      customerAccount,
      equityField[0]
    );
    if (investiment.fee?.feeGroups) result.fees.push(investiment.fee);

    const feesActives = await FeeCase.find({
      cif: customerAccount[0].cifno,
      status: {
        $nin: ['DONE', 'REJECTED'],
      },
      caseNumber: {
        $exists: true,
      },
    });

    result.feesActives = feesActives?.map((x) => ({
      caseNumber: x.caseNumber,
      id: x.id,
    }));

    const scheduleUrls = global.environment.scheduleUrls;

    result.documentUrl =
      'https://minio-ui.dev.k8s.safra.int/api/v1/buckets/jarvis-public/objects/download?preview=true&prefix=U2NoZWR1bGVPZkZlZXMucGRm';

    return Result.ok(result);
  }
  
  async #getFeeStandardFromSQL(cifno) {
    const connection = await connectToFeeMgmtDb();
    const recordset = await executeStoreProcedure(connection, 'sp_get_standard_fees', { cifno });

    const feeResult = recordset.map((record) => ({
      feeType: record.feeType,
      feeGroups: [
        {
          name: record.feeGroup,
          code: record.groupCode,
          fields: [
            {
              code: record.fieldCode,
              name: record.fieldName,
              defaultValue: record.defaultValue,
              isStandard: record.isStandard === 1,
            },
          ],
        },
      ],
    }));

    return feeResult;
  }
}






import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js'

export default class FeeGetByPackageUseCase {
  async execute({ feePackageId }) {
    const connection = await connectToFeeMgmtDb();
    const recordset = await executeStoreProcedure(connection, 'sp_get_exception_fees', { feePackageId });

    const feeResult = recordset.map((record) => ({
      feeType: record.feeType,
      feeGroups: [
        {
          name: record.feeGroup,
          code: record.groupCode,
          fields: [
            {
              code: record.fieldCode,
              name: record.fieldName,
              defaultValue: record.defaultValue,
              isException: record.isException === 1,
              exceptionOptions: record.exceptionOptions ? JSON.parse(record.exceptionOptions) : [],
            },
          ],
        },
      ],
    }));

    return feeResult;
  }
}



import FeeGetByPackageUseCase from './feeGetByPackageUseCase.js'
import ApiResponse from '#core/http/apiResponse.js'

export default async function feeGetByPackageEndpoint(req, res) {
  const { feePackageId } = req.params;

  if (!feePackageId) {
    return res.status(400).json(ApiResponse.createBadRequestResponse({ error: "feePackageId is required" }));
  }

  const useCase = new FeeGetByPackageUseCase();
  const result = await useCase.execute({ feePackageId });

  if (result.isFailure) {
    return res.status(400).json(ApiResponse.createBadRequestResponse({ error: result.error }));
  }

  res.json(ApiResponse.createOkResponse(result.value));
}




import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js'

export default class FeeGetByPackageUseCase {
  async execute({ feePackageId }) {
    const connection = await connectToFeeMgmtDb();
    const recordset = await executeStoreProcedure(connection, 'sp_get_exception_fees', { feePackageId });

    const feeResult = recordset.map((record) => ({
      feeType: record.feeType,
      feeGroups: [
        {
          name: record.feeGroup,
          code: record.groupCode,
          fields: [
            {
              code: record.fieldCode,
              name: record.fieldName,
              defaultValue: record.defaultValue,
              isException: record.isException === 1,
              exceptionOptions: record.exceptionOptions ? JSON.parse(record.exceptionOptions) : [],
            },
          ],
        },
      ],
    }));

    return feeResult;
  }
}
