'use client';

import React, { useState } from 'react';
import { useForm, FormProvider, useFormContext } from 'react-hook-form';
import { IData } from '@/store/types';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/Tabs';
import FormFactory from './FormFactory';
import { Email } from "@snb/ds-email";
import Buttons from './Buttons';
import { ProgressAlert } from '@snb/ds-progress-alert';
import { DataDisplay } from "@snb/ds-data-display";
import { tranformBackEntriesOnValues } from '@/utils';

/* =======================================
   1) Componente CustomRadio (customizado)
   ======================================= */
interface CustomRadioProps {
  name: string;
  value: string;
  checked?: boolean;
  label?: string;
  disabled?: boolean;
  onChange?: (value: string) => void;
  className?: string;
}

function CustomRadio({
  name,
  value,
  checked = false,
  label,
  disabled = false,
  onChange,
  className = '',
}: CustomRadioProps) {
  console.log('[CustomRadio] Render:', { name, value, checked });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    onChange?.(e.target.value);
  };

  return (
    <label className={`flex items-center cursor-pointer select-none ${className}`}>
      {/* input "invisível", mas mantém acessibilidade */}
      <input
        type="radio"
        name={name}
        value={value}
        checked={checked}
        disabled={disabled}
        onChange={handleChange}
        className="sr-only peer"
      />

      {/* Círculo externo */}
      <div
        className={`
          h-5 w-5 
          rounded-full 
          border-2 border-gray-300 
          flex items-center justify-center
          peer-checked:border-black
          ${disabled ? 'opacity-50' : ''}
        `}
      >
        {/* Bolinha interna (aparece somente se checked=true) */}
        <div
          className="
            hidden
            peer-checked:block 
            w-2 
            h-2 
            rounded-full 
            bg-black
          "
        />
      </div>

      {/* Label textual */}
      {label && (
        <span className="ml-2 text-[#484A55] font-Figtree text-lg font-semibold leading-5 tracking-tighter">
          {label}
        </span>
      )}
    </label>
  );
}

/* ============================================
   2) Aba DomesticInternacionalTab (exemplo)
   ============================================ */
function DomesticInternacionalTab(data: IData) {
  const { watch, setValue } = useFormContext();
  
  // Observa o valor do campo 'bank' no form
  const selectedBank = watch('bank') || '';

  console.log('[DomesticInternacionalTab] Selected Bank:', selectedBank);

  if (!data.requestId) {
    return null;
  }

  return (
    <TabsContent value="processing-bank-of-america" className="data-[state=inactive]:hidden">
      <div className="grid grid-cols-2 gap-8 p-6">
        <div>
          {data.messageCutoffTime && (
            <ProgressAlert
              isLayoutInLine={true}
              cardColor="Yellow"
              height="56px"
              cardIcon="WarningCircle"
            >
              {data.messageCutoffTime}
            </ProgressAlert>
          )}

          <h1 className="my-6 text-[#484A55] font-Figtree text-lg font-semibold leading-5 tracking-tighter">
            Select Bank
          </h1>

          <div className="flex flex-grow gap-4">
            {/* ========== PAYPLUS ========== */}
            <div className="flex items-center w-1/3 space-x-2 px-4 py-6 border border-[#D9D9D9] rounded-md flex-grow">
              <CustomRadio
                name="bank"
                value="payplus"
                checked={selectedBank === 'payplus'}
                onChange={(newValue) => {
                  console.log('Payplus clicked ->', newValue);
                  setValue('bank', newValue);
                }}
              />
              <label className="text-[#484A55] font-Figtree text-lg font-semibold leading-5 tracking-tighter">
                Payplus
              </label>

              <div className="bg-[#008056] text-white font-Figtree text-xs font-semibold py-1 px-2 ml-4 rounded-full">
                Default
              </div>
            </div>

            {/* ==== BANK OF AMERICA ==== */}
            <div className="flex items-center w-1/3 space-x-2 px-4 py-6 border border-[#D9D9D9] rounded-md flex-grow">
              <CustomRadio
                name="bank"
                value="bank-of-america"
                checked={selectedBank === 'bank-of-america'}
                onChange={(newValue) => {
                  console.log('Bank of America clicked ->', newValue);
                  setValue('bank', newValue);
                }}
              />
              <label className="text-[#484A55] font-Figtree text-lg font-semibold leading-5 tracking-tighter">
                Bank of America
              </label>

              <div className="bg-[#C75300] text-white font-Figtree text-xs font-semibold py-1 px-2 ml-4 rounded-full">
                Contingency
              </div>
            </div>
          </div>

          {/* Área para debug do valor selecionado */}
          <div className="mt-2 text-sm text-gray-500">
            Selected bank: <strong>{selectedBank || 'None'}</strong>
          </div>

          <div className="mt-10">
            {data.processIntegration && data.processIntegration.length > 0 && (
              <DataDisplay
                title="Process Integration: Bank of America"
                data={[
                  {
                    Id: '320923457#-983242|239',
                    Status: 'processed',
                    Date: '2025-11-01T11:49:30.2098749-05:00'
                  }
                ]}
              />
            )}
          </div>
        </div>

        <div>
          <Email senderName="" subjectName="" attachments={[]} message="" />
        </div>
      </div>

      {/* Botões */}
      <Buttons
        requestId={data.requestId}
        initialRequestData={data}
        data={data.buttons}
      />
    </TabsContent>
  );
}

/* ========================================
   3) Aba ForeignCurrenciesTab (exemplo)
   ======================================== */
function ForeignCurrenciesTab(data: IData) {
  return (
    <TabsContent value="processing-bank-of-america" className="data-[state=inactive]:hidden">
      {/* Preencha se necessário */}
    </TabsContent>
  );
}

/* =====================================
   4) TabsFactory principal
   ===================================== */
export default function TabsFactory({ data }: { data: IData }) {
  const [selectedTab, setSelectedTab] = useState('wire-transfer-form');

  // Prepara o objeto do react-hook-form
  const useFormObject = useForm({
    defaultValues: {
      ...tranformBackEntriesOnValues(data.backEntries),
      bank: '', // valor inicial do radio
    },
  });

  if (!data) return null;

  // Lê o "transfer-type" para decidir qual aba abrir
  const transferType = data.backEntries['transfer-type']?.value;

  // Mapeia as possíveis abas:
  const TranferTypeTabs = {
    'usd-domestic': <DomesticInternacionalTab {...data} />,
    'usd-internacional': <DomesticInternacionalTab {...data} />,
    'foreign-currencies': <ForeignCurrenciesTab {...data} />,
  };

  return (
    <Tabs className="min-h-screen w-full p-6">
      <TabsList className="m-0 p-0 pb-4 w-1/2 list-none border-b border-[#DBDBDB] rounded-none justify-start">
        <TabsTrigger
          value="wire-transfer-form"
          className={`p-4 font-body font-Figtree text-base font-normal tracking-tighter underline-from-font decoration-skip-ink-none ${
            selectedTab === 'wire-transfer-form' ? 'border-b-2 border-blue-500' : ''
          }`}
          style={{ color: 'var(--text-light-text-secondary, #636574)' }}
          onClick={() => setSelectedTab('wire-transfer-form')}
        >
          Wire Transfer Form
        </TabsTrigger>

        <TabsTrigger
          value="processing-bank-of-america"
          className={`p-4 font-body font-Figtree text-base font-normal tracking-tighter underline-from-font decoration-skip-ink-none ${
            selectedTab === 'processing-bank-of-america' ? 'border-b-2 border-blue-500' : ''
          }`}
          style={{ color: 'var(--text-light-text-secondary, #636574)' }}
          onClick={() => setSelectedTab('processing-bank-of-america')}
        >
          {transferType === 'usd-domestic' || transferType === 'usd-internacional'
            ? 'Processing'
            : 'Processing: Bank of America'}
        </TabsTrigger>
      </TabsList>

      {/* ABA 1: Wire Transfer Form */}
      <TabsContent forceMount={true} value="wire-transfer-form" className="data-[state=inactive]:hidden">
        <FormFactory data={data} />
      </TabsContent>

      {/* ABA 2: com FormProvider para usar react-hook-form nas abas */}
      <FormProvider {...useFormObject}>
        {transferType && TranferTypeTabs[transferType as keyof typeof TranferTypeTabs]}
      </FormProvider>
    </Tabs>
  );
}
