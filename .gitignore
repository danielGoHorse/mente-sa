function applyExceptionAmounts(mongoFees, excRows) {
  const map = {
    JH001: 1, JH002: 2, JH010: 3,
    JH008: 4, JH006: 4, JH007: 4, JH009: 4
  };

  const byCode = excRows.reduce((acc, r) => {
    (acc[r.FeeCode] ??= []).push(r);
    return acc;
  }, {});

  mongoFees.forEach(fee => {
    const excGrp = findGroup(fee, 'Exception Request');
    if (!excGrp) return;

    excGrp.fields.forEach(field => {
      const code = Object.entries(map).find(([, c]) => c === field.code)?.[0];
      const rows = code ? byCode[code] : null;
      if (!rows?.length) return;

      field.exceptionOptions = rows.map(r => ({
        value:   Number(r.Amount).toString(),
        text:    numberToCurrency(r.Amount),
        visible: true,
        retired: false
      }));

-     /* não mexíamos no labelValue — ele ficava com o valor antigo */
+     // ajuste de exibição:
+     //   • se quiser começar “em branco”, use ''
+     //   • se quiser mostrar o menor Amount disponível, use o Math.min…
+     const min = Math.min(...rows.map(r => Number(r.Amount)));
+     field.labelValue = numberToCurrency(min);   // fica “$0.00” para JH001
+
+     // se não quiser pré‑selecionar nada:
+     // field.labelValue = '';
    });
  });
}
