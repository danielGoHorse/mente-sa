import { Fee }                     from '#src/models/entities/Fees.js';
import Result                      from '#features/shared/result.js';
import CustomerFees                from '#src/models/CustomerFees.js';
import BankAccountFee              from '#src/models/BankAccountFee.js';
import InvestimentAccountFee       from '#src/models/InvestimentAccountFee.js';
import { FeeCase }                 from '#src/models/entities/FeeCase.js';
import { Field }                   from '#src/models/entities/Fields.js';
import numberToCurrency            from '#core/helpers/currency.js';
import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js';



  /* …imports inalterados … */

/* ───────────────────────── helpers SQL ─────────────────────────── */

async function getPackageData(cifno) {
  const conn  = await connectToFeeMgmtDb();
  const [row] = await executeStoreProcedure(conn, 'sp_get_fees_byCIF', { cifno });
  if (!row) return {};                         // ← não achou nada? devolve objeto vazio

  return {
    defaultFeePackageId : row['Default Fee Package Id'] ?? null,
    branchCity          : row['Branch City']?.trim()          || '',
    branchState         : row['Branch State']?.trim()         || '',
    branchType          : row['Branch Type']?.trim()          || '',
    defaultPackageType  : row['Default Package Type']?.trim() || '',
    feePackage          : row['Default Fee Package']?.trim()  || '',
  };
}

/*  …getStandardFees / getExceptionFees idem…  */

function getDocumentUrl(id){
  const urls = global.environment.scheduleUrls || {};
  const key  = ({ 1:'intlPB3', 2:'uSPBIndividual3', 3:'uSPBCorporation3' })[id];
  return key ? urls[key] || '' : '';
}

/* …Mongo helpers e mapeamentos inalterados … */

/* ================================================================= */
export default class FeeGetByCifUseCase {

  async execute({ customerAccount }) {

    /* 1) modelo‑padrão Mongo */
    const fees = await getFeeStandard([
      { feeType:'Customer Fees' },
      { feeType:'Bank Account Fees' },
      { feeType:'Investment Account Fees' }
    ]);

    /* 2) dados de Package — usa 1 como fallback se vier null           */
    const pkgData   = await getPackageData(customerAccount[0].cifno);
    const packageId = pkgData.defaultFeePackageId ?? 1;      //  ← ajuste #1

    /* 3) Standard / Exception – sequencial para não colidir conexões  */
    const stdRows = await getStandardFees (packageId);       //  ← ajuste #2
    const excRows = await getExceptionFees(packageId);

    applyStandardAmounts (fees, stdRows);   // preenche ONLY “Standard Fees”
    applyExceptionAmounts(fees, excRows);   // preenche ONLY “Exception Request”

    /* 4) enriquece contas                                          */
    customerAccount.forEach(acc => {
      Object.assign(acc, pkgData);          // cidade, estado, etc.

      /* só grava exceptionAmount – current fee vem do próprio SELECT */
      const exc = excRows.find(e => e.FeeCode === acc.feeCode);
      if (exc) acc.exceptionAmount = Number(exc.Amount);
    });

    /* 5) construtores existentes                                    */
    const result = { fees: [] };
    const [customer, bank, investment] = [
      new CustomerFees      (fees, customerAccount),
      new BankAccountFee    (fees, customerAccount),
      new InvestimentAccountFee(
        fees, customerAccount, await Field.findOne({ code:7 }))
    ];

    [customer, bank, investment]
      .filter(f => f.fee && f.fee.feeGroups?.length)
      .forEach(f => result.fees.push(f.fee));

    /* 6) casos ativos                                               */
    const actives = await FeeCase.find({
      cif: customerAccount[0].cifno,
      status: { $nin:['DONE','REJECTED'] },
      caseNumber: { $exists:true }
    });
    result.feesActives = actives.map(({caseNumber,id})=>({caseNumber,id}));

    /* 7) contas + schedule PDF link                                */
    const docUrl = getDocumentUrl(packageId);
    result.accounts = customerAccount.map(acc => ({
      cifno               : acc.cifno,
      ddaNumber           : acc.ddaNumber,
      branchCity          : acc.branchCity,
      branchState         : acc.branchState,
      branchType          : acc.branchType,
      defaultPackageType  : acc.defaultPackageType,
      feePackage          : acc.feePackage,
      defaultFeePackageId : acc.defaultFeePackageId,
      defaultFeePackage   : acc.defaultFeePackage,
      documentUrl         : docUrl,
      feeAmount           : acc.feeAmount,         // do SELECT original
      exceptionAmount     : acc.exceptionAmount ?? null
    }));
    result.documentUrl = docUrl;

    /* 8) formata labelValue dos Exception (vazio = $0.00)           */
    syncExceptionLabels(result.fees);

    return Result.ok(result);
  }
}
