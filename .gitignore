for (const code of allCodes) {
  let field = exceptionGroup.fields.find((f) => f.code === code);
  if (!field) {
    // Busca o grupo "Standard Fees" para o mesmo FeeType
    const standardGroup = groupedFeesMap[ft]?.feeGroups.find((g) => g.name === 'Standard Fees');
    // Procura o field com o mesmo código no Standard Fees
    const stdField = standardGroup?.fields.find((f) => f.code === code);
    field = {
      code,
      name: stdField?.name || '',  // se existir, usa o nome do Standard Fees
      defaultValue: '0',
      tooltip: '',
      isException: true,
      exceptionOptions: []
    };
    exceptionGroup.fields.push(field);
  }
}



const codeMap = exceptionsByFeeTypeAndCode[ft] || {};
for (const [codeStr, listExc] of Object.entries(codeMap)) {
  const code = Number(codeStr);
  let field = exceptionGroup.fields.find((f) => f.code === code);
  if (!field) {
    // Se não existir, crie o field (já estamos tratando isso no loop acima)
    const standardGroup = groupedFeesMap[ft]?.feeGroups.find((g) => g.name === 'Standard Fees');
    const stdField = standardGroup?.fields.find((f) => f.code === code);
    field = {
      code,
      name: stdField?.name || '', 
      defaultValue: listExc[0].defaultValue || '0',
      tooltip: listExc[0].tooltip || '',
      isException: true,
      exceptionOptions: []
    };
    exceptionGroup.fields.push(field);
  } else {
    // Se o field já existe mas o name está vazio, atualize-o
    if (!field.name || field.name.trim() === '') {
      const standardGroup = groupedFeesMap[ft]?.feeGroups.find((g) => g.name === 'Standard Fees');
      const stdField = standardGroup?.fields.find((f) => f.code === code);
      field.name = stdField?.name || listExc[0].name || '';
    }
  }
  for (const exc of listExc) {
    const amountNumber = parseFloat(exc.defaultValue || '0');
    field.exceptionOptions.push({
      approvedByDoubleA: null,
      value: exc.defaultValue,
      text: `$${amountNumber.toFixed(2)}`,
      visible: true,
      retired: false,
      parameterOptionId: exc.parameterOptionId,
    });
  }
}





const standardGroup = groupedFeesMap[ft]?.feeGroups.find((g) => g.name === 'Standard Fees');
const stdField = standardGroup?.fields.find((f) => f.code === code);
name: stdField?.name || '',
