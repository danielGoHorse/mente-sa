'use client';

import { useState } from 'react';
import { useForm, FormProvider, useFormContext } from 'react-hook-form';
import { IData } from '@/store/types';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/Tabs';
import FormFactory from './FormFactory';
import { Email } from "@snb/ds-email";
import Buttons from './Buttons';
import { ProgressAlert } from '@snb/ds-progress-alert';
import { DataDisplay } from "@snb/ds-data-display";
import RadioButton from '@snb/ds-radio-button'; // <-- importe seu RadioButton daqui
import { tranformBackEntriesOnValues } from '@/utils';

/**
 * ABA para USD Domestic / USD Internacional
 * Faz a seleção do Banco (Payplus ou Bank of America).
 */
const DomesticInternacionalTab = (data: IData) => {
  // Precisamos do Hook Form para manipular o campo 'bank':
  const { watch, setValue } = useFormContext();

  // "selectedBank" será o valor atual do campo 'bank' no formulário
  const selectedBank = watch('bank') || '';

  if (!data.requestId) {
    return null;
  }

  return (
    <TabsContent value="processing-bank-of-america" className="data-[state=inactive]:hidden">
      {/*
        O <FormProvider> já estará lá em cima no seu TabsFactory (ou aqui, se preferir).
        Caso você use-o aqui, lembre de passar o `useFormObject` do pai.
      */}
      <div className="grid grid-cols-2 gap-8 p-6">
        <div>
          {data.messageCutoffTime && (
            <ProgressAlert
              isLayoutInLine={true}
              cardColor='Yellow'
              height='56px'
              cardIcon='WarningCircle'
            >
              {data.messageCutoffTime}
            </ProgressAlert>
          )}

          <h1 className='my-6 text-[#484A55] font-Figtree text-lg font-semibold leading-5 tracking-tighter'>
            Select Bank
          </h1>

          <div className="flex flex-grow gap-4">
            {/* =========== PAYPLUS =========== */}
            <div className='flex items-center w-1/3 space-x-2 px-4 py-6 border border-[#D9D9D9] rounded-md flex-grow'>
              <RadioButton
                /* Valor que esse radio "representa" */
                value="payplus"

                /* Valor atual do campo no formulário */
                externalValue={selectedBank}

                /* name igual nos dois radios */
                name="bank"

                /* Ao mudar, atualiza o Hook Form */
                onChange={(newValue) => setValue('bank', newValue)}

                styleType="normal"
              >
                {/* children será o label que você quiser */}
                <label className="text-[#484A55] font-Figtree text-lg font-semibold leading-5 tracking-tighter">
                  Payplus
                </label>
              </RadioButton>

              {/* Exemplo de "badge" do lado */}
              <div className='bg-[#008056] text-white font-Figtree text-xs font-semibold py-1 px-2 ml-4 rounded-full'>
                Default
              </div>
            </div>

            {/* =========== BANK OF AMERICA =========== */}
            <div className='flex items-center w-1/3 space-x-2 px-4 py-6 border border-[#D9D9D9] rounded-md flex-grow'>
              <RadioButton
                value="bank-of-america"
                externalValue={selectedBank}
                name="bank"
                onChange={(newValue) => setValue('bank', newValue)}
                styleType="normal"
              >
                <label className="text-[#484A55] font-Figtree text-lg font-semibold leading-5 tracking-tighter">
                  Bank of America
                </label>
              </RadioButton>

              <div className='bg-[#C75300] text-white font-Figtree text-xs font-semibold py-1 px-2 ml-4 rounded-full'>
                Contingency
              </div>
            </div>
          </div>

          <div className='mt-10'>
            {data.processIntegration && data.processIntegration.length > 0 && (
              <DataDisplay
                title='Process Integration: Bank of America'
                data={[{
                  Id: "320923457#-983242|239",
                  Status: "processed",
                  Date: "2025-11-01T11:49:30.2098749-05:00"
                }]}
              />
            )}
          </div>
        </div>

        <div>
          <Email
            senderName={""}
            subjectName={""}
            attachments={[]}
            message={""}
          />
        </div>
      </div>

      <Buttons
        requestId={data.requestId}
        initialRequestData={data}
        data={data.buttons}
      />
    </TabsContent>
  );
};


/**
 * ABA para Foreign Currencies (exemplo simplificado)
 */
const ForeignCurrenciesTab = (data: IData) => {
  // ...
  return (
    <TabsContent value="processing-bank-of-america" className="data-[state=inactive]:hidden">
      {/* ... */}
    </TabsContent>
  );
};


/**
 * TabsFactory principal que decide qual aba renderizar
 * e fornece o FormProvider.
 */
export default function TabsFactory({ data }: { data: IData }) {
  const [selectedTab, setSelectedTab] = useState('wire-transfer-form');

  // Monta o form:
  const useFormObject = useForm({
    defaultValues: {
      ...tranformBackEntriesOnValues(data.backEntries),
      // Você pode iniciar o "bank" com algo (payplus ou bank-of-america) se quiser
      bank: ''
    },
  });

  if (!data) return null;

  // Lê o transfer type do backEntries
  const transferType = data.backEntries['transfer-type']?.value;

  // Deixa pronto para trocar a aba certa:
  const TranferTypeTabs = {
    'usd-domestic': <DomesticInternacionalTab {...data} />,
    'usd-internacional': <DomesticInternacionalTab {...data} />,
    'foreign-currencies': <ForeignCurrenciesTab {...data} />,
  };

  return (
    <Tabs className="min-h-screen w-full p-6">
      <TabsList className='m-0 p-0 pb-4 w-1/2 list-none border-b border-[#DBDBDB] rounded-none justify-start'>
        <TabsTrigger
          value="wire-transfer-form"
          onClick={() => setSelectedTab('wire-transfer-form')}
        >
          Wire Transfer Form
        </TabsTrigger>

        <TabsTrigger
          value="processing-bank-of-america"
          onClick={() => setSelectedTab('processing-bank-of-america')}
        >
          {/* Muda o texto da aba conforme o tipo */}
          {(transferType === 'usd-domestic' || transferType === 'usd-internacional')
            ? 'Processing'
            : 'Processing: Bank of America'
          }
        </TabsTrigger>
      </TabsList>

      {/* ABA 1 */}
      <TabsContent forceMount={true} value="wire-transfer-form" className="data-[state=inactive]:hidden">
        <FormFactory data={data} />
      </TabsContent>

      {/* ABA 2 - Envolvemos em <FormProvider> para que o Hook Form seja válido */}
      <FormProvider {...useFormObject}>
        {transferType && TranferTypeTabs[transferType as keyof typeof TranferTypeTabs]}
      </FormProvider>
    </Tabs>
  );
}
