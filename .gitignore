// …imports mantidos…

type StatusType =
  | "waiting"
  | "pending"
  | "completed"
  | "canceled"
  | "skipped"
  | "done";               // ← opcional: se quiser manter a tipagem exata

// util simples (pode colocar no topo do arquivo)
const normalizeStatus = (s: StatusType | undefined): StatusType =>
  s === "done" ? "completed" : (s ?? "waiting");

/* ------------------------------------------------------------------ */
/* CÍRCULO ----------------------------------------------------------- */
/* ------------------------------------------------------------------ */
export const TimelineCircle: React.FC<Pick<StepProps, "status">> = ({
  status,
}) => {
  const safeStatus = normalizeStatus(status);

  const IconMap: Record<Exclude<StatusType, "done">, StaticImageData> = {
    waiting: FlagIcon,
    pending: FlagGreenIcon,
    completed: CheckIcon,
    canceled: CloseWhiteIcon,
    skipped: CloseGrayIcon,
  };

  const BorderColorMap: Record<typeof safeStatus, string> = {
    waiting: "#DBDBDB",
    pending: "#008056",
    completed: "#008056",
    canceled: "#CA303D",
    skipped: "#DBDBDB",
  };

  const BgColorMap: Record<typeof safeStatus, string> = {
    waiting: "#FFFFFF",
    pending: "#FFFFFF",
    completed: "#008056",
    canceled: "#CA303D",
    skipped: "#F7F7F8",
  };

  const Icon = IconMap[safeStatus as keyof typeof IconMap];

  return (
    <div
      className="w-[56px] h-[56px] flex items-center justify-center rounded-full"
      style={{
        border: `1px solid ${BorderColorMap[safeStatus]}`,
        backgroundColor: BgColorMap[safeStatus],
      }}
    >
      <Image src={Icon} alt="icon" />
    </div>
  );
};

/* ------------------------------------------------------------------ */
/* STEP (barrinha de progresso usa o status para cor) ---------------- */
/* ------------------------------------------------------------------ */
export const TimelineStep: React.FC<StepProps> = ({
  status,
  progress = false,
  children,
}) => {
  const safeStatus = normalizeStatus(status);

  const BorderColorMap: Record<Exclude<StatusType, "done">, string> = {
    waiting: "#DBDBDB",
    pending: "#008056",
    completed: "#008056",
    canceled: "#CA303D",
    skipped: "#DBDBDB",
  };

  return (
    <div className="relative flex-none flex flex-col items-center" style={{ width: 150 }}>
      {progress && (
        <div
          className="absolute border-b left-[calc(55%+20px)] top-[46%] -translate-y-1/2 w-[calc(100%+10px-41px)]"
          style={{ borderColor: BorderColorMap[safeStatus as keyof typeof BorderColorMap] }}
        />
      )}
      <div className="relative flex flex-col items-center gap-2">{children}</div>
    </div>
  );
};

/* ------------------------------------------------------------------ */
/* OS OUTROS COMPONENTES (Link, Text, etc.) permanecem iguais -------- */
/* ------------------------------------------------------------------ */
