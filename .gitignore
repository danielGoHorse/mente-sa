import { Fee } from '#src/models/entities/Fees.js';
import Result from '#features/shared/result.js';
import CustomerFees from '#src/models/CustomerFees.js';
import BankAccountFee from '#src/models/BankAccountFee.js';
import InvestimentAccountFee from '#src/models/InvestimentAccountFee.js';
import { FeeCase } from '#src/models/entities/FeeCase.js';
import { Field } from '#src/models/entities/Fields.js';
import {
  connectToFeeMgmtDb,
  executeStoreProcedure,
} from '#core/data/mssql/index.js';

export default class FeeGetByCifUseCase {
  /* ------------------------------------------------------------- *
   * 1.  Endpoint entry‑point                                       *
   * ------------------------------------------------------------- */
  async execute({ customerAccount }) {
    global.logger.info('FeeGetByCifUseCase()');

    /* ---------- 1.1 Mongo‑fees (static tables) ------------------ */
    const fees = await this.#getFeeStandard([
      { feeType: 'Customer Fees' },
      { feeType: 'Bank Account Fees' },
      { feeType: 'Investment Account Fees' },
    ]);

    /* ---------- 1.2 Build fee trees ----------------------------- */
    const result = { fees: [] };

    const customer   = new CustomerFees(fees, customerAccount);
    const bank       = new BankAccountFee(fees, customerAccount);
    const investment = new InvestimentAccountFee(
      fees,
      customerAccount,
      (await Field.find({ code: 7 }))[0],
    );

    [customer, bank, investment]
      .filter(f => f.fee && f.fee.feeGroups?.length)
      .forEach(f => result.fees.push(f.fee));

    /* ---------- 1.3  Active cases (Mongo) ----------------------- */
    const feesActives = await FeeCase.find({
      cif: customerAccount[0].cifno,
      status: { $nin: ['DONE', 'REJECTED'] },
      caseNumber: { $exists: true },
    });

    result.feesActives = feesActives.map(x => ({
      caseNumber: x.caseNumber,
      id:         x.id,
    }));

    /* ---------- 1.4  Package / branch info (SQL) --------------- */
    const pkgData   = await this.#getPackageDataFromSQL(customerAccount[0].cifno);
    const docUrl    = this.#getDocumentUrl(pkgData.defaultFeePackageId);
    result.documentUrl = docUrl;

    /* injeta campos em cada conta vinda do front */
    customerAccount.forEach(acc => Object.assign(acc, pkgData));

    /* devolve lista completa de contas para o Conductor */
    result.accounts = customerAccount.map(acc => ({
      cifno:               acc.cifno,
      ddaNumber:           acc.ddaNumber,            // se existir
      branchCity:          acc.branchCity,
      branchState:         acc.branchState,
      branchType:          acc.branchType,
      defaultPackageType:  acc.defaultPackageType,
      feePackage:          acc.feePackage,
      defaultFeePackageId: acc.defaultFeePackageId,
      documentUrl:         docUrl,
    }));

    global.logger.info(`documentUrl = ${docUrl}`);
    return Result.ok(result);
  }

  /* ------------------------------------------------------------- *
   * 2.  Helpers                                                   *
   * ------------------------------------------------------------- */

  /**   Busca dados de pacote/branch em SQL */
  async #getPackageDataFromSQL(cifno) {
    const conn = await connectToFeeMgmtDb();
    const [row] = await executeStoreProcedure(conn, 'sp_get_fees_byCIF', { cifno });

    if (!row) return {};

    return {
      defaultFeePackageId: row['Default Fee Package Id'] ?? null,
      branchCity:          row['Branch City']?.trim()      || '',
      branchState:         row['Branch State']?.trim()     || '',
      branchType:          row['Branch Type']?.trim()      || '',
      defaultPackageType:  row['Default Package Type']?.trim() || '',
      feePackage:          row['Default Fee Package']?.trim()  || '',
    };
  }

  /**   Mapeia Id‑>URL (3 pacotes hoje, fácil de estender) */
  #getDocumentUrl(feePackageId) {
    const urls = global.environment.scheduleUrls || {};
    const key  = ({ 1: 'intlPB3', 2: 'uSPBIndividual3', 3: 'uSPBCorporation3' })[feePackageId];
    return key ? urls[key] || '' : '';
  }

  /**   Lê parâmetros padrão de Mongo (`Fee` collection) */
  async #getFeeStandard(filter) {
    const feeResult = [];
    for await (const fee of Fee.find({ $or: filter }).select({
      feeType: 1,
      feeGroups: { name: 1, fields: 1, code: 1 },
    })) {
      feeResult.push(fee.toObject());
    }
    return feeResult;
  }
}
