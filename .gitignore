import Result from '#features/shared/result.js'
import numberToCurrency from '#core/helpers/currency.js'
import { FeeCase } from '#src/models/entities/FeeCase.js'
import { Field } from '#src/models/entities/Fields.js'
import { Fee } from '#src/models/entities/Fees.js'
const { logger } = global

export default class FeeCaseCreateUseCase {
  async execute(feeTicketRequest) {
    logger.info('FeeCaseCreateUseCase()')
    const feeTicket = new FeeCase(feeTicketRequest)

    const fieldsDataBase = await this.#getFeeStandard([
      {
        feeType: 'Customer Fees'
      },
      {
        feeType: 'Bank Account Fees'
      },
      {
        feeType: 'Investment Account Fees'
      }
    ])

    const allExceptions = this.#returnAllExceptions(fieldsDataBase)

    logger.info('validateSync()')
    const validate = feeTicket.validateSync()

    if (validate && validate?.errors) {
      return Result.fail(validate.errors)
    }
    let hasAnyChange = false
    for (const fee of feeTicket.fees) {
      for (const [groupIndex, group] of fee.feeGroups.entries()) {
        for (const [fieldIndex, field] of group.fields.entries()) {
          if (field.isException) {
            // se for uma exception, verifica se é uma alteração
            const newValue =
              field.defaultValue !==
              fee.feeGroups[groupIndex - 1].fields[fieldIndex].defaultValue
            const validValue =
              !!field.defaultValue && field.defaultValue !== 'NOT APPLICABLE'
            field.hasChanged = newValue && validValue

            if (field.hasChanged) {
              hasAnyChange = true
              fee.hasAnyChange = true
              group.hasAnyChange = true
              fee.feeGroups[groupIndex - 1].hasAnyChange = true
              fee.feeGroups[groupIndex - 2].hasAnyChange = true
            }

            if (!field.hasChanged) {
              field.defaultValue =
                fee.feeGroups[groupIndex - 1].fields[fieldIndex].defaultValue
            }
          }

          if (/^\d+$/.test(field.defaultValue)) {
            // se o defaultvalue tiver apenas digitos
            field.labelValue = numberToCurrency(field.defaultValue)
            continue
          }

          // safekeeping ou equity
          if (field.labelValue === 'Other') {
            const other = field.exceptionOptions.filter(
              (x) => x.text === 'Other'
            )[0]
            const fieldEquities = (
              await Field.find({
                code: 7,
                isException: true
              })
            )[0]

            field.exceptionOptions = [...fieldEquities.exceptionOptions, other]
          } else if (
            !field.labelValue ||
            !field.labelValue.includes(field.defaultValue)
          ) {
            let exception = allExceptions.find(
              (e) => e.value === field.defaultValue
            )

            if (!exception) {
              exception = { text: '' }
            }

            field.labelValue = exception.text
          }
        }
      }
    }

    if (!hasAnyChange) {
      return Result.fail('Cannot create Fee Case without any change.')
    }

    feeTicket.fees = feeTicket.fees.filter((x) => x.hasAnyChange)
    feeTicket.fees?.forEach((item) => {
      item.feeGroups = item.feeGroups.filter((x) => x.hasAnyChange)
    })

    try {
      const model = await feeTicket.save()
      return Result.ok(model.toObject())
    } catch (err) {
      logger.error(err)
      return Result.fail('Error when try to save Fee Case')
    }
  }

  async #getFeeStandard(filter) {
    logger.info('getFeeStandard()')
    const feeResult = []

    for await (const fee of Fee.find({
      $or: filter
    }).select({
      feeGroups: {
        fields: 1,
        code: 1
      }
    })) {
      feeResult.push(fee.toObject())
    }

    return feeResult
  }

  #returnAllExceptions(fees) {
    logger.info('returnAllExceptions()')
    const allExceptions = new Set()
    fees.forEach((fee) => {
      fee.feeGroups.forEach((feeGroup) => {
        feeGroup.fields.forEach((field) => {
          if (field.isException) {
            field.exceptionOptions.forEach(allExceptions.add, allExceptions)
          }
        })
      })
    })
    return Array.from(allExceptions)
  }
}
