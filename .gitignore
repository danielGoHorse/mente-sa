constructor(fees, accounts) {
  // Validar fees
  if (!fees || !Array.isArray(fees) || fees.length === 0) {
    throw new Error('Fees is empty or undefined');
  }

  // Encontrar Customer Fees
  this.#customer = fees.filter((x) => x.feeType === this.#feeName)[0];

  if (!this.#customer || !Array.isArray(this.#customer.feeGroups)) {
    throw new Error('Customer Fees or feeGroups are undefined');
  }

  // Processar feeGroups
  this.#customer.feeGroups.forEach((feeGroup) => {
    feeGroup.fields = feeGroup.fields.filter((x) => x.code <= accounts.reduce((acc, item) => {
      if (item.feeType > 2) return acc;
      acc = item.feeType;
      return acc;
    }, 0));

    feeGroup.fields?.forEach((item) => {
      item.exceptionOptions = item.exceptionOptions?.filter((x) => !x.retired) || [];
    });
  });

  this.#accounts = accounts.filter(
    (x) => x.feeGroup === this.#customer.feeGroups[0].code
  );

  this.#customer.feeGroups[0].kycMailingStatus =
    accounts.find((account) => account.feeType === 2)?.kycMailingStatus || null;

  this.#customer.feeGroups[0].fields.forEach((field) => {
    field.labelValue = numberToCurrency(field.defaultValue);
  });

  // Verificar Client Current
  if (this.#customer.feeGroups.length > 1) {
    this.#clientCurrent = this.#customer.feeGroups[1].fields;
    this.#configureCustomer();
  } else {
    console.warn('Client Current group is missing');
  }

  // Verificar Exceptions
  if (this.#customer.feeGroups.length > 2) {
    this.#customer.feeGroups[2].fields.forEach((field, fieldIndex) => {
      field.labelValue =
        this.#customer.feeGroups[1]?.fields[fieldIndex]?.labelValue || '';
      if (
        field.code === 2 &&
        this.#customer.feeGroups[0].kycMailingStatus !== 'Hold Mail'
      ) {
        field.defaultValue = field.labelValue;
        field.exceptionOptions = [
          {
            value: field.defaultValue,
            text: field.defaultValue
          }
        ];
      }
    });
  } else {
    console.warn('Exception group is missing');
  }
}
