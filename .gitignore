/* ---------- NOVO utilitário p/ localizar grupo ------------------------- */
function findGroup(fee, groupName) {
  return fee.feeGroups?.find(g => g.name === groupName);
}

/* ---------- (1) injeta Standard no “Client Current Fees” --------------- */
function applyStandardAmounts(mongoFees, stdRows) {
  mongoFees.forEach(fee => {
    const curGrp = findGroup(fee, 'Client Current Fees');
    if (!curGrp) return;

    curGrp.fields.forEach(field => {
      const row = stdRows.find(r => Number(r.FeeType) === field.code);
      if (!row) return;
      field.defaultValue = Number(row.FeeAmount).toString();
      field.labelValue   = numberToCurrency(row.FeeAmount);
    });
  });
}

/* ---------- (2) injeta Exceptions no “Exception Request” ---------------- */
function applyExceptionAmounts(mongoFees, excRows) {
  /* FeeCode ↔ field.code  (adicione se aparecerem novos) */
  const map = { JH001:1, JH002:2, JH010:3, JH008:4 };

  /* indexa por FeeCode para lookup rápido */
  const byCode = excRows.reduce((acc,r)=>{
    (acc[r.FeeCode] ??= []).push(r); return acc;
  },{});

  mongoFees.forEach(fee => {
    const excGrp = findGroup(fee, 'Exception Request');
    if (!excGrp) return;

    excGrp.fields.forEach(field => {
      const code = Object.entries(map)
                         .find(([,c])=>c===field.code)?.[0];
      const rows = code ? byCode[code] : null;
      if (!rows?.length) return;

      field.exceptionOptions = rows.map(r => ({
        value:   Number(r.Amount).toString(),
        text:    numberToCurrency(r.Amount),
        visible: true,
        retired: false
      }));
      /* não altera defaultValue aqui – ele continua vazio/“Other”
         até o usuário escolher uma opção                      */
    });
  });
}
