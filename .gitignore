import Result from '#features/shared/result.js';

export default class FeeCaseGetByCifUseCase {
  async execute({ cif }, feeManagementModel, customerModel) {
    const [errCustomer, responseCustomer] = await customerModel.getCustomerDetailsByCif(cif);
    if (errCustomer) {
      return Result.fail({ message: "It's not possible to get address cif" });
    }

    const customerData = responseCustomer?.data?.customer || {};
    const [errFee, responseFee] = await feeManagementModel.getFeeByAccount(customerData);
    if (errFee) {
      return Result.fail({ message: "It's not possible to get fee values" });
    }

    // Normalização de texto
    function normalizeFeeName(text) {
      return text
        .replace(/([a-z])([A-Z])/g, '$1 $2')
        .replace(/[_-]/g, ' ')
        .trim();
    }

    const feesData = responseFee?.data || {};
    const timestamp = new Date().toISOString();

    const packageName = feesData.feePackage || "N/A";
    const packageType = feesData.defaultPackageType || "N/A";
    const branchType = feesData.branchType || "N/A";

    const currentFees = [
      ...(customerData?.customerCurrentFees?.map(x => ({
        feeDescription: x.feeDescription || '',
        feeCode: x.feeCode || ''
      })) || []),
      ...(feesData?.currentFees || [])
    ];

    // Mapas
    const feeTypeMap = {
      1: "Customer Fees",
      2: "Bank Account Fees",
      3: "Investment Account Fees"
    };
    const feeCodeMap = {
      "Account Maintenance": 1,
      "Hold Mail": 2,
      "Incoming Wire": 3,
      "Outgoing Wire": 4,
      "Safekeeping Custody": 6,
      "SSL Account Maintenance": 5,
      "Equity and Options Commission": 7,
      "FX Outgoing Wire Fee": 8,
      "US Equities Commission": 10,
      "Options Commission": 11
    };

    // Filtrar só FeeTypes relevantes
    const rawCustomerAccounts = customerData?.customerAccount || [];
    const filteredCustomerAccounts = rawCustomerAccounts.filter(fee => {
      const feeTypeString = feeTypeMap[fee.feeType] || "";
      return [
        "Customer Fees",
        "Bank Account Fees",
        "Investment Account Fees"
      ].includes(feeTypeString);
    });

    // Construção de formattedFees (dados do customer)
    const formattedFees = filteredCustomerAccounts.map(fee => {
      const normalizedFeeName = normalizeFeeName(fee.feeDescription);
      return {
        feeType: feeTypeMap[fee.feeType] || "",
        feeGroups: [
          {
            // Ajuste se tiver outra regra para decidir se é Standard ou Client Current
            name: fee.feeGroup === 1 ? "Client Current Fees" : "Standard Fees",
            visible: true,
            kycMailingStatus: fee.kycMailingStatus || null,
            code: fee.feeCode || "",
            accountNumber: fee.ddaNumber || "",
            cif: fee.cifno || "",
            id: "",
            fields: [
              {
                hasChanged: false,
                code: feeCodeMap[normalizedFeeName] || fee.feeCode || "",
                name: normalizedFeeName,
                defaultValue: fee.feeAmount?.toString() || "",
                isStandard: fee.isFeesStandard === "Yes",
                isException: fee.isFeesStandard === "No",
                isCurrentClient: false,
                labelValue: fee.feeAmount ? `$${fee.feeAmount.toFixed(2)}` : "",
                tooltip: fee.source ? `Source: ${fee.source}` : "",
                exceptionOptions: [],
                createdAt: timestamp,
                updatedAt: timestamp,
                id: fee.ddaNumber?.toString() || ""
              }
            ]
          }
        ],
        id: ""
      };
    });

    // Construção de formattedFeeGroups (dados vindos do feesData)
    const formattedFeeGroups =
      feesData?.fees
        ?.filter(fg =>
          ["Customer Fees", "Bank Account Fees", "Investment Account Fees"].includes(fg.feeType)
        )
        .map(fg => ({
          feeType: fg.feeType,
          id: "",
          feeGroups: fg.feeGroups.map(group => ({
            ...group,
            id: group.id || "",
            cif: group.cif || "",
            accountNumber: group.accountNumber || "",
            fields: group.fields.map(field => ({
              ...field,
              hasChanged: field.hasChanged || false,
              createdAt: field.createdAt || timestamp,
              updatedAt: field.updatedAt || timestamp,
              id: field._id || field.id || "",
              exceptionOptions:
                field.exceptionOptions?.map(opt => ({
                  ...opt,
                  parameterOptionId: opt.parameterOptionId || ""
                })) || []
            }))
          }))
        })) || [];

    // Juntar ambos
    const allFees = [...formattedFees, ...formattedFeeGroups];

    // FeeTypes finais
    const feeTypesToGroup = [
      "Customer Fees",
      "Bank Account Fees",
      "Investment Account Fees"
    ];

    // Nomes que queremos (pode ajustar conforme necessidade)
    const groupNames = ["Standard Fees", "Client Current Fees", "Exception Request"];

    // Agrupamento final
    const groupedFees = feeTypesToGroup.map(type => {
      // 1) filtra todos com esse feeType
      const itemsOfThisType = allFees.filter(item => item.feeType === type);

      // 2) unimos todos os feeGroups num array
      const combinedFeeGroups = itemsOfThisType.flatMap(item => item.feeGroups || []);

      // 3) Precisamos criar um map => groupName => array de fields
      const mapByName = {
        "Standard Fees": [],
        "Client Current Fees": [],
        "Exception Request": []
      };

      // Distribuir os fields de cada sub-grupo para o array certo
      for (const group of combinedFeeGroups) {
        let groupName = group.name;
        // Se não for um nome reconhecido, cai em "Exception Request"
        if (!groupNames.includes(groupName)) {
          groupName = "Exception Request";
        }

        // Concatena os fields
        if (Array.isArray(group.fields)) {
          // Aqui você pode também extrair `visible`, `code`, etc. se precisar,
          // mas parece que sua tela só precisa dos `fields`.
          mapByName[groupName].push(...group.fields);
        }
      }

      // 4) Monta o array feeGroups final
      //    Filtra os vazios caso não queira mandar grupos sem fields
      const feeGroups = Object.entries(mapByName)
        .map(([name, fields]) => ({
          name,
          fields
        }))
        .filter(gr => gr.fields.length > 0); // remove groups sem fields

      return {
        feeType: type,
        feeGroups
      };
    });

    // Monta o result
    const result = {
      customerName: customerData?.customerAddress?.name || feesData?.customerName || '',
      customerShortName: feesData?.customerShortName || '',
      customerAddress: customerData?.customerAddress?.address || '',
      customerAccountOfficer: customerData?.customerAddress?.officer || '',
      cif: customerData?.customerAddress?.cif || cif,
      officerId: feesData?.officerId || '',
      branchCity: feesData?.branchCity || '',
      branchState: feesData?.branchState || '',
      branchType,
      feePackage: feesData?.feePackage || '',
      defaultFeePackageId: feesData?.defaultFeePackageId || '',
      defaultPackageType: feesData?.defaultPackageType || '',
      packageName,
      packageType,
      fees: groupedFees,
      feesActives: feesData?.feesActives || [],
      documentUrl: feesData?.documentUrl || '',
      currentFees
    };

    global.logger.info('End process');
    return Result.ok(result);
  }
}
