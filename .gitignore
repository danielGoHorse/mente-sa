import React, { useEffect } from "react";
import Paper from "@/@core/components/Paper";
import Tabs from "./components/Tab";
import CifRequest from "./components/cifRequest";
import BankIcon from "@/assets/svg/bank-icon.svg";
import ClientIcon from "@/assets/svg/client-icon.svg";
import LocationIcon from "@/assets/svg/location-icon.svg";
import OfficerIcon from "@/assets/svg/officer-icon.svg";
import { MainContainer } from "./styles";
import { useFeeManagementStore } from "@/@core/store/feeManagementStore";
import Text from "@/@core/components/Text";
import Animation from "@/@core/components/Animation";
import animationData from "../../../assets/animation/bank-search.json";
import { CircularProgress } from "@mui/material";
import { useLoadingStore } from "@/@core/store/loadingStore";
import { useParams } from "react-router-dom";
import { FeeManagenmetProvider } from "@/services/feeManagementProvider";
import { useNavigate } from "react-router-dom";
import { useCustomerSearchStore } from "@/@core/store";
import { CIFProvider } from "@/services/cifProvider";
import { useRouter } from "next/router";

import GenericErrorMsgModal from "./components/GenericErrorMsgModal";
import { useErrorStore } from "@/@core/store/errorStore";
import { useDocumentStore } from "@/@core/store/documents";

const defaultOptions = {
  loop: false,
  autoplay: true,
  animationData: animationData,
  rendererSettings: {
    preserveAspectRatio: "xMidYMid slice",
  },
};

export default function FeeManagement() {
  const { feeData, isAprovalFlowDone, setIsAprovalFlowDone } =
    useFeeManagementStore((state) => state);

  const { errorGlobal, setErrorGlobal } = useErrorStore((state) => state);

  const navigate = useNavigate();
  const { globalLoading } = useLoadingStore((state) => state);
  const { feeCaseNumber, customerCif } = useParams();
  const { getActiveFee, getFeeByCIF } = FeeManagenmetProvider();
  const { search, setSearch } = useCustomerSearchStore((state) => state);
  const { cifListSearch } = CIFProvider();
  const router = useRouter();
  const { setDocumentList } = useDocumentStore((state) => state);

  useEffect(() => {
    setDocumentList(feeData?.data?.documents || []);
    if (customerCif) {
      const baseRoute = "/app/feemanagement";
      const route = baseRoute + "/" + customerCif;
      setIsAprovalFlowDone(false);
      if (!search || search === "") {
        setSearch(customerCif);
      }
      if (feeCaseNumber) {
        getActiveFee(feeCaseNumber).catch((error) => {
          if ([400, 404].includes(error.response?.status)) {
            navigate(route);
          }
        });
      } else {
        cifListSearch(customerCif).then((response) => {
          if (response.data.data.customers.length > 0) {
            getFeeByCIF(customerCif).catch((error) => {
              if ([400, 404].includes(error.response?.status)) {
                navigate(route);
              }
            });
          } else {
            router.replace(baseRoute);
          }
        });
      }
    }
  }, [feeCaseNumber, customerCif]);

  if (globalLoading === false) {
    if (feeData?.data?.fees?.length > 0) {
      return (
        <MainContainer>
          <div
            style={{ paddingTop: 24, width: "100%", height: "100%" }}
            className="content-container"
          >
            <div style={{ display: "flex", marginBottom: 24 }}>
              <Paper
                title="CIF"
                width="20%"
                label={feeData.data.cif}
                icon={BankIcon}
                alt="Bank Acount"
              />
              <Paper
                title="Client Name"
                width="20%"
                label={feeData.data.customerName}
                icon={ClientIcon}
                alt="Bank Acount"
                margin="0px 16px"
              />
              <Paper
                title="Client Address"
                width="40%"
                label={feeData.data.customerAddress}
                icon={LocationIcon}
                alt="Bank Acount"
                margin="0px 16px 0px 0px"
              />
              <Paper
                title="Client Officer"
                width="20%"
                label={feeData.data.customerAccountOfficer}
                icon={OfficerIcon}
                alt="Bank Acount"
              />
            </div>
            {feeData?.data?.feesActives.length > 0 && !isAprovalFlowDone && (
              <div
                style={{
                  justifyContent: "center",
                  display: "flex",
                  margin: "0px 0px 24px 0px",
                }}
              >
                <CifRequest />
              </div>
            )}
            <div style={{ minHeight: "60vh" }}>
              <Tabs />
            </div>
          </div>
        </MainContainer>
      );
    } else {
      return (
        <div
          style={{
            display: "flex",
            height: "110vh",
            background: "#f7f7f8",
            alignItems: "center",
            justifyContent: "center",
            alignContent: "center",
            flexDirection: "column",
            textAlign: "center",
          }}
        >
          <>
            <Animation options={defaultOptions} width={250} height={200} />
            <div style={{ marginTop: 24 }}>
              <Text>Enter CIF or Short Name to get started.</Text>
            </div>

            <GenericErrorMsgModal
              open={errorGlobal}
              onClose={() => setErrorGlobal(false)}
            />
          </>
        </div>
      );
    }
  } else {
    return (
      <div
        style={{
          display: "flex",
          height: "110vh",
          background: "#f7f7f8",
          alignItems: "center",
          justifyContent: "center",
          alignContent: "center",
          flexDirection: "column",
          textAlign: "center",
        }}
      >
        <CircularProgress />
      </div>
    );
  }
}


==================================================================

import React from "react";
import Modal from "@mui/material/Modal";
import Image from "next/image";
import Button from "@/@core/components/Button";
import TouchableOpacity from "@/@core/components/TouchableOpacity";
import closeIcon from "@/assets/svg/close.svg";
import {
  Container,
  Title,
  Text,
  TextThin,
  TableCell,
  TableContainer,
  TableRow,
} from "./styles";
import { FeeManagenmetProvider } from "@/services/feeManagementProvider";
import ScrollableSection from "@/@core/components/ScrollableSection";

interface IClientCurrentFeesModal {
  cif: string;
}

interface ICustomerFee {
  feeDescription: string;
  feeCode: string;
}

const ClientCurrentFeesModal = ({ cif }: IClientCurrentFeesModal) => {
  const { getCurrentFeesByCIF } = FeeManagenmetProvider();
  const [customerFees, setCustomerFees] = React.useState<Array<ICustomerFee>>(
    []
  );
  const [open, setOpen] = React.useState(false);
  const handleOpen = () => {
    getCurrentFeesByCIF(cif).then((response) => {
      setCustomerFees(response.data.data);
      setOpen(true);
    });
  };
  const handleClose = () => setOpen(false);

  return (
    <div style={{ marginLeft: "15px" }}>
      <Button outline onClick={handleOpen} style={{ width: "177px" }}>
        Client Current Fees
      </Button>
      <Modal
        open={open}
        onClose={handleClose}
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <Container>
          <div style={{ display: "flex", justifyContent: "flex-end" }}>
            <Title>Client Current Fees</Title>
            <TouchableOpacity onClick={handleClose}>
              <Image src={closeIcon} width={20} height={20} alt="close" />
            </TouchableOpacity>
          </div>
          <div
            style={{
              margin: "20px 0px 16px 0px",
            }}
          >
            <ScrollableSection>
              <TableContainer>
                <TableRow>
                  <TableCell>
                    <Text>Account</Text>
                  </TableCell>
                  <TableCell>
                    <Text>Fee</Text>
                  </TableCell>
                </TableRow>
                {customerFees.map((item, index) => (
                  <TableRow key={index}>
                    <TableCell>
                      <TextThin>{item.feeCode}</TextThin>
                    </TableCell>
                    <TableCell>
                      <TextThin>{item.feeDescription}</TextThin>
                    </TableCell>
                  </TableRow>
                ))}
              </TableContainer>
            </ScrollableSection>
          </div>

          <div>
            <TextThin>
              *N/A: Refer to Front-Office desktop reference manual for procedure
              to request changes. Contact the Trading Desk or Trade Support
              teams if you have additional questions.
            </TextThin>
          </div>
        </Container>
      </Modal>
    </div>
  );
};

export default ClientCurrentFeesModal;


========================================================================================

import api from "@/@core/api";
import { apiPathAddress } from "@/@core/api/apiAddress";
import { useAuthStore, useCustomerSearchStore } from "@/@core/store";
import { DocumentLinkData } from "@/@core/store/documents";
import { useErrorStore } from "@/@core/store/errorStore";
import {
  FeeManagementData,
  FeeManagementDataUpdate,
  useFeeManagementStore,
} from "@/@core/store/feeManagementStore";
import { useLoadingStore } from "@/@core/store/loadingStore";
import {
  RevenueReportData,
  useRevenueReportStore,
} from "@/@core/store/revenueReportStore";
import { useMutation } from "@tanstack/react-query";
import { AxiosResponse } from "axios";
import { useState } from "react";

interface CaseAttributes {
  name: string;
  value: string;
}

interface Data {
  conductorId: string;
  caseId: string;
  caseNumber: string;
  userOwner: string;
  feeManagementId: string;
  cif: string;
  caseAttributes: CaseAttributes[];
}

interface CreateCaseResponse {
  code: number;
  data: Data;
}

export function FeeManagenmetProvider() {
  const { cif } = useCustomerSearchStore((state) => state);
  const {
    setFeeData,
    newFeeRequest,
    feeApprovedData,
    newFeeRequestId,
    setNewFeeRequestId,
    rejectGroup,
    setRejectGroup,
  } = useFeeManagementStore((state) => state);
  const { userData } = useAuthStore((state) => state);
  const { setGlobalLoading } = useLoadingStore((state) => state);
  const { setErrorGlobal } = useErrorStore((state) => state);
  const { setRevenueReport } = useRevenueReportStore((state) => state);

  const { mutateAsync: getFeeByCIF, isLoading: getFeeIsLoading } = useMutation(
    ["getFeesByCIF"],
    async (customerCif: string) => {
      setGlobalLoading(true);
      return await api.get(`${apiPathAddress.feeManagement}/${customerCif}`);
    },
    {
      onSuccess: (response: AxiosResponse<FeeManagementData>) => {
        response.data.data.fees.map((fees) => {
          return fees.feeGroups.map((feeGroups) => {
            return feeGroups.fields.map((fields) => {
              return (fields.defaultLabelValue = fields.labelValue);
            });
          });
        });
        setFeeData(response.data);
        setGlobalLoading(false);
      },
      onError(error, variables, context) {
        console.log("Error on get feedata", error, variables, context);
        setGlobalLoading(false);
        setErrorGlobal(true);
      },
    }
  );

  const {
    mutateAsync: getCurrentFeesByCIF,
    isLoading: getCurrentFeesIsLoading,
  } = useMutation(
    ["getCurrentFeesByCIF"],
    async (cif: string) => {
      return await api.get(
        `${apiPathAddress.conductorCustomer}/${cif}/fees/current`
      );
    },
    {
      onSuccess: (response: AxiosResponse) => {
        return response;
      },
      onError(error, variables, context) {},
    }
  );

  const { mutateAsync: newFeeCase, isLoading: newFeeCaseLoading } = useMutation(
    ["newFeeRequest"],
    async (newFeeCaseRequest: FeeManagementData) => {
      setGlobalLoading(true);
      return await api.post("/v1/conductor/fee/case", newFeeCaseRequest);
    },
    {
      onSuccess: (result: AxiosResponse<CreateCaseResponse>) => {
        setNewFeeRequestId(result.data.data.feeManagementId);
        console.log(result.status);
        setGlobalLoading(false);
      },
      onError: () => {
        console.log(newFeeRequest);
        setGlobalLoading(false);
      },
    }
  );

  const {
    mutateAsync: getActiveFee,
    isLoading: getActiveFeeLoading,
    isSuccess: getActiveFeeSuccess,
  } = useMutation(
    ["getActiveFee"],
    async (feedId: string) => {
      setGlobalLoading(true);
      return await api.get(`/v1/fee/case/${feedId}/${userData.userName}`);
    },
    {
      onSuccess: (response: AxiosResponse<FeeManagementData>) => {
        setFeeData(response.data);
        setGlobalLoading(false);
      },
      onError: (error) => {
        console.log(error);
        setGlobalLoading(false);
      },
    }
  );

  const { mutateAsync: viewActiveFee, isLoading: getViewActiveFeeLoading } =
    useMutation(
      ["getViewActiveFee"],
      async () => {
        setGlobalLoading(true);
        return await api.get(
          `/v1/fee/case/${newFeeRequestId}/${userData.userName}`
        );
      },
      {
        onSuccess: (response: AxiosResponse<FeeManagementData>) => {
          setFeeData(response.data);
          setGlobalLoading(false);
        },
        onError: (error) => {
          console.log(error);
          setGlobalLoading(false);
        },
      }
    );

  const { mutateAsync: updateFeeCase, isLoading: updateFeeCaseLoading } =
    useMutation(
      ["putUpdateFeeCaseFee"],
      async (updateFeeCase: FeeManagementDataUpdate) => {
        setGlobalLoading(true);
        return await api.put(`/v1/fee/case`, updateFeeCase);
      },
      {
        onSuccess: (response: AxiosResponse<FeeManagementData>) => {
          console.log(response);
          setGlobalLoading(false);
        },
        onError: (error) => {
          console.log(error);
          setGlobalLoading(false);
        },
      }
    );

  const { mutateAsync: getRevenueReport } = useMutation(
    ["getRevenueReport"],
    async (cif: string) => {
      return await api.get(`customer/v1/${cif}/revenue`);
    },
    {
      onSuccess: (response: AxiosResponse<RevenueReportData>) => {
        setRevenueReport(response.data);
      },
      onError: (error) => {},
    }
  );

  const { mutateAsync: getFeeDocumentLink } = useMutation(
    ["getFeeDocumentLink"],
    async (documentName: string) => {
      return await api.get(`/v1/file/feeMangementTemp/${documentName}`);
    },
    {
      onSuccess: (response: AxiosResponse<DocumentLinkData>) => {},
      onError: (error) => {},
    }
  );

  return {
    getFeeByCIF, // Buscar Fee por CIF
    newFeeCase, // Criar novo fee
    getActiveFee, // Buscar Active Fee
    updateFeeCase,
    viewActiveFee,
    getCurrentFeesByCIF,
    rejectGroup,
    setRejectGroup,
    getCurrentFeesIsLoading,
    getFeeIsLoading, // Loading do carregamento do fee
    getActiveFeeLoading, // Loading da busca do active Fee
    newFeeCaseLoading, // Loading da criação do fee
    updateFeeCaseLoading,
    getViewActiveFeeLoading,
    getActiveFeeSuccess,
    getRevenueReport,
    getFeeDocumentLink,
  };
}


