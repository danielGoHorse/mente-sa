import Result from '#features/shared/result.js';

export default class FeeCaseGetByCifUseCase {
  async execute({ cif }, feeManagementModel, customerModel) {
    const [errCustomer, responseCustomer] = await customerModel.getCustomerDetailsByCif(cif);
    if (errCustomer) {
      return Result.fail({ message: "It's not possible to get address cif" });
    }

    const customerData = responseCustomer?.data?.customer || {};
    const [errFee, responseFee] = await feeManagementModel.getFeeByAccount(customerData);
    if (errFee) {
      return Result.fail({ message: "It's not possible to get fee values" });
    }

    const feesData = responseFee?.data || {};
    const timestamp = new Date().toISOString();

    const currentFees = [
      ...(customerData?.customerCurrentFees?.map(x => ({
        feeDescription: x.feeDescription || '',
        feeCode: x.feeCode || ''
      })) || []),
      ...(feesData?.currentFees || [])
    ];

    const formattedFees = customerData?.customerAccount?.map(fee => ({
      feeGroups: [{
        name: fee.feeGroup === 1 ? "Client Current Fees" : "Standard Fees",
        visible: true,
        kycMailingStatus: fee.kycMailingStatus || null,
        code: fee.feeGroup,
        accountNumber: fee.ddaNumber || '',
        cif: fee.cifno,
        id: "0000000000",
        fields: [{
          hasChanged: false,
          code: fee.feeCode,
          name: fee.feeDescription,
          defaultValue: fee.feeAmount?.toString() || '',
          isStandard: fee.isFeesStandard === "Yes",
          isException: fee.isFeesStandard === "No",
          isCurrentClient: false,
          labelValue: `$${fee.feeAmount.toFixed(2)}`,
          tooltip: fee.source ? `Source: ${fee.source}` : '',
          exceptionOptions: [],
          createdAt: timestamp,
          updatedAt: timestamp,
          id: fee.ddaNumber.toString()
        }]
      }],
      feeType: "Customer Fees",
      id: "0000000000000"
    })) || [];

    const formattedFeeGroups = feesData?.fees?.map(feeGroup => ({
      ...feeGroup,
      id: feeGroup.id || "0000000000000",
      feeGroups: feeGroup.feeGroups.map(group => ({
        ...group,
        id: group.id || "0000000000",
        cif: group.cif || '',
        accountNumber: group.accountNumber || '',
        fields: group.fields.map(field => ({
          ...field,
          hasChanged: field.hasChanged || false,
          createdAt: field.createdAt || timestamp,
          updatedAt: field.updatedAt || timestamp,
          id: field._id || "0000000000",
          exceptionOptions: field.exceptionOptions?.map(opt => ({
            ...opt,
            parameterOptionId: opt.parameterOptionId || "0000000000",
          })) || []
        }))
      }))
    })) || [];

    const result = {
      customerName: customerData?.customerAddress?.name || feesData?.customerName || '',
      customerShortName: feesData?.customerShortName || '',
      customerAddress: customerData?.customerAddress?.address || '',
      customerAccountOfficer: customerData?.customerAddress?.officer || '',
      cif: customerData?.customerAddress?.cif || cif,
      officerId: feesData?.officerId || '',
      branchCity: feesData?.branchCity || '',
      branchState: feesData?.branchState || '',
      feePackage: feesData?.feePackage || '',
      defaultFeePackageId: feesData?.defaultFeePackageId || '',
      fees: [...formattedFees, ...formattedFeeGroups],
      feesActives: feesData?.feesActives || [],
      documentUrl: feesData?.documentUrl || '',
      currentFees
    };

    return Result.ok(result);
  }
}
