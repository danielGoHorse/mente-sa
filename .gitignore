import { Router } from 'express'
import feeGetByPackageEndpoint from './feeGetByPackageEndpoint.js'

const feeGetByPackageRouter = Router()

// Nova rota para buscar Exception Fees por Fee Package ID
feeGetByPackageRouter.get('/fee/exceptions/:feePackageId', feeGetByPackageEndpoint)

export default feeGetByPackageRouter




import FeeGetByPackageUseCase from './feeGetByPackageUseCase.js'
import ApiResponse from '#core/http/apiResponse.js'

export default async function feeGetByPackageEndpoint(req, res) {
  const { feePackageId } = req.params;

  if (!feePackageId) {
    return res.status(400).json(ApiResponse.createBadRequestResponse({ error: "feePackageId is required" }));
  }

  const useCase = new FeeGetByPackageUseCase();
  const result = await useCase.execute({ feePackageId });

  if (result.isFailure) {
    return res.status(400).json(ApiResponse.createBadRequestResponse({ error: result.error }));
  }

  res.json(ApiResponse.createOkResponse(result.value));
}




import {
  connectToFeeMgmtDb,
  executeStoreProcedure
} from '#core/data/mssql/index.js'

export default class FeeGetByPackageUseCase {
  async execute({ feePackageId }) {
    const connection = await connectToFeeMgmtDb();
    const recordset = await executeStoreProcedure(connection, 'sp_get_exception_fees', { feePackageId });

    const feeResult = recordset.map((record) => ({
      feeType: record.feeType,
      feeGroups: [
        {
          name: record.feeGroup,
          code: record.groupCode,
          fields: [
            {
              code: record.fieldCode,
              name: record.fieldName,
              defaultValue: record.defaultValue,
              isException: record.isException === 1,
              exceptionOptions: record.exceptionOptions ? JSON.parse(record.exceptionOptions) : [],
            },
          ],
        },
      ],
    }));

    return feeResult;
  }
}
