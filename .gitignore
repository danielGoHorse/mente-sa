https://api.dev.k8s.safra.int/v1/conductor/fee/NAA0010

do projeto conductor-fee.management....

que o rout Ã© esse:

import { Router } from 'express'
import feeCaseGetByCifEndpoint from './feeCaseGetByCifEndpoint.js'

const feeCaseGetByCifRouter = Router()

feeCaseGetByCifRouter.get('/conductor/fee/:cif', feeCaseGetByCifEndpoint)

export default feeCaseGetByCifRouter

import FeeCaseGetByCifUseCase from './feeCaseGetByCifUseCase.js'
import ApiResponse from '#core/http/apiResponse.js'
import FeeManagement from '#src/models/FeeManagement.js'
import Customer from '#src/models/Customer.js'

export default async function feeCaseGetByCifEndpoint(req, res) {
  const useCase = new FeeCaseGetByCifUseCase()
  const feeManagement = new FeeManagement(global)
  const customer = new Customer(global)
  const result = await useCase.execute(req.params, feeManagement, customer)

  if (result.isFailure) {
    const badRequestResponse = ApiResponse.createBadRequestResponse({
      error: result.error
    })
    return res.status(badRequestResponse.code).json(badRequestResponse)
  }

  const okResponse = ApiResponse.createOkResponse(result.value)

  res.json(okResponse)
}


import Result from '#features/shared/result.js'

export default class FeeCaseGetByCifUseCase {
  async execute({ cif }, feeManagementModel, customerModel) {
    global.logger.info(`customerModel.getCustomerDetailsByCif(${cif})`)
    const [errCustomer, responseCustomer] =
      await customerModel.getCustomerDetailsByCif(cif)

    if (errCustomer) {
      return Result.fail({ message: "It's not possible to get address cif" })
    }
    global.logger.info('feeManagementModel.getFeeByAccount')
    const [errFee, responseFee] = await feeManagementModel.getFeeByAccount(
      responseCustomer.data.customer
    )

    if (errFee) {
      return Result.fail({ message: "Its's not possible get fee values" })
    }

    const currentFees =
      responseCustomer?.data?.customer?.customerCurrentFees?.map((x) => ({
        feeDescription: x.feeDescription,
        feeCode: x.feeCode
      }))

    const result = {
      customerName: responseCustomer.data.customer.customerAddress.name,
      customerAddress: responseCustomer.data.customer.customerAddress.address,
      customerAccountOfficer:
        responseCustomer.data.customer.customerAddress.officer,
      cif: responseCustomer.data.customer.customerAddress.cif,
      fees: responseFee.data.fees,
      feesActives: responseFee.data.feesActives,
      documentUrl: responseFee.data.documentUrl,
      currentFees
    }
    global.logger.info('End process')
    return Result.ok(result)
  }
}
